[{"detail": [{"content": "Scientific Computing - NYU Computer Science Department                                                                     Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                 Scientific Computing      Faculty       Marsha Berger    Michael Overton    Olof Widlund    Margaret Wright      Description         Scientific Computing has a long tradition at the Courant Institute,   which was founded by Richard Courant at the dawn of the computer era.   Electronic computers were invented in the late 1940's and early 1950's   for exactly one purpose: solving hard scientific and engineering   problems which required too much numerical computation to do by hand.   The phenomenal development of computers in the last 50 years has been   accompanied by an equally rapid development in the field of scientific   computing. Now, virtually all branches of science and engineering   rely heavily on computing. The traditional two branches of science   are theoretical science and experimental science. Computational   science is now often mentioned as a third branch, having a status   which is essentially equal, perhaps even eclipsing, that of its two   older siblings. The availability of greatly improved computational   techniques and immensely faster computers have made it possible to   solve complicated problems which would have seemed impossible just a   generation ago.       Scientific Computing is the discipline that studies how to solve a wide   variety of problems arising in science and engineering by   computational techniques. Sometimes it is said to rest on four A's:   Analysis, Algorithms, Architecture, and Applications.   Many faculty at Courant, both in the Computer Science and Mathematics   Departments, have strong interests in Scientific Computing,   both in specific application areas and in general techniques   and analysis that have broad applicability.         Research Interests                  Marsha J. Berger            Computational fluid dynamics, large-scale parallel computing, adaptive methods in complex geometries.                      Michael L. Overton             Optimization, semidefinite programming, convex and nonconvex programming.                     Olof B. Widlund             Finite element methods, partial differential equations, domain decomposition.                     Margaret H. Wright              Optimization, linear algebra, numerical analysis, scientific computing, and scientific and engineering applications.                Affiliated Mathematics Faculty         Yu Chen    Jonathan Goodman     Leslie Greengard     Michael Shelley      Related Projects         Courant Math and Computing Laboratory (CMCL)               top | contact webmaster@cs.nyu.edu"}]},
{"detail": [{"content": "Scientific Computing - NYU Computer Science Department                                                                     Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                 Scientific Computing      Faculty       Marsha Berger    Michael Overton    Olof Widlund    Margaret Wright      Description         Scientific Computing has a long tradition at the Courant Institute,   which was founded by Richard Courant at the dawn of the computer era.   Electronic computers were invented in the late 1940's and early 1950's   for exactly one purpose: solving hard scientific and engineering   problems which required too much numerical computation to do by hand.   The phenomenal development of computers in the last 50 years has been   accompanied by an equally rapid development in the field of scientific   computing. Now, virtually all branches of science and engineering   rely heavily on computing. The traditional two branches of science   are theoretical science and experimental science. Computational   science is now often mentioned as a third branch, having a status   which is essentially equal, perhaps even eclipsing, that of its two   older siblings. The availability of greatly improved computational   techniques and immensely faster computers have made it possible to   solve complicated problems which would have seemed impossible just a   generation ago.       Scientific Computing is the discipline that studies how to solve a wide   variety of problems arising in science and engineering by   computational techniques. Sometimes it is said to rest on four A's:   Analysis, Algorithms, Architecture, and Applications.   Many faculty at Courant, both in the Computer Science and Mathematics   Departments, have strong interests in Scientific Computing,   both in specific application areas and in general techniques   and analysis that have broad applicability.         Research Interests                  Marsha J. Berger            Computational fluid dynamics, large-scale parallel computing, adaptive methods in complex geometries.                      Michael L. Overton             Optimization, semidefinite programming, convex and nonconvex programming.                     Olof B. Widlund             Finite element methods, partial differential equations, domain decomposition.                     Margaret H. Wright              Optimization, linear algebra, numerical analysis, scientific computing, and scientific and engineering applications.                Affiliated Mathematics Faculty         Yu Chen    Jonathan Goodman     Leslie Greengard     Michael Shelley      Related Projects         Courant Math and Computing Laboratory (CMCL)               top | contact webmaster@cs.nyu.edu"}, {"content": "Scientific Computing graduate course, Spring 2012                  MATH-GA.2043 or CSCI-GA.2112     Scientific Computing           Warren Weaver Hall, room 101, Thursdays,   5:10 - 7 pm     Courant Institute of    Mathematical Sciences     New York University     Spring Semester, 2012           Home         Lectures         Assignments                   Instructor     Aleksandar Donev ,    1016 Warren Weaver Hall     E-mail: donev@courant.nyu.edu     ; Phone: (212) 992-7315     Office hours: 5-6 pm Tuesdays, 4-5pm on Thursdays, or by appointment     Graders     Juan Calvo ( calvo@cims.nyu.edu )     Office hours: Mondays, 5-7pm, 705 Warren Weaver Hall         Aaron Eastburn ( ae593@cims.nyu.edu )     Office hours: Fridays, 4-6pm, 705 Warren Weaver Hall    Course description     This course is a graduate-level introduction to     practical introduction to computational problem solving,     including both mathematical analysis of numerical     algorithms (numerical analysis) and practical problem     solving. This is not a programming course but programming     in homework projects with Matlab (Python, Fortran, C/C++,     or other language of your choice) is an important part of     the course work.     Take a look at the homepage of          the Spring 2011 course as this course will be     similar.          3 points per term         Topics covered include:               floating point arithmetic, conditioning and stability      direct methods for systems of linear equations      matrix eigenvalue problems and SVD decomposition           numerical interpolation, differentiation and integration      nonlinear systems of equations and unconstrained     optimization      Fourier and wavelet transforms      ordinary and partial differential equations           Monte Carlo methods.         For a tentative schedule download the syllabus .                  Main Textbook (required)         The main textbook will be Scientific Computing with     MATLAB and Octave , by Alfio M. Quarteroni &amp;    Fausto Saleri, Springer, whose third          edition just appeared in 2010 but older editions will    do just as well. Both the third          edition and the second          edition are available in PDF form through the library    subscription to springerlink, so you don't even have to buy    the paper copy. A paper copy is available on 2h reserve in    the Courant Library.          The Matlab scripts for the examples in the second edition of    the book can be downloaded as a zip          archive (use \"unzip &lt; filename &gt;\" in Linux to extract the    files). Erratas as well as the files for the recent third    edition of the book can be found on the book website .          Some of the lectures will be more closely based on a draft    of an upcoming book Principles          of Scientific Computing by my colleagues Jonathan    Goodman and David Bindel, to be found here as one          PDF or as individual          chapters .     Additional Readings         There are many free online    materials that can be consulted as additional reading,    depending on your background and interests. Here are some    suggestions (more may be added as the course progresses)    that you have special access to through the NYU/Courant    library:              Numerical Computing with MATLAB , by     Cleve Moler, available for free in PDF form at the MATLAB          site .      The Cambridge Engineering          guide to MATLAB has lots of useful information.      An Introduction to Programming and Numerical     Methods in MATLAB , Stephen R. Otto &amp; James P.     Denier, Springer, 2005, available in PDF          format through the library. This book provides an     elementary introduction to Matlab with less focus on     actual scientific computing.               Also see these resources listed         by my colleague David Bindell .    Prerequisites     A solid background    (undergraduate level) in multivariate calculus and linear    algebra. Experience with writing computer programs (in    Matlab, Python, Fortran, C, C++, or other language) is    strongly recommended as homework assignments will involve    programming from the start and you will be expected to catch    up on your own (winter break is a good time to learn    programming!).         Prior knowledge of Matlab is    not required, but it will be used as the main language for    the course. If you have experience with other languages    (Fortran, C, C++, Python), Matlab will be easy to learn and    use, and comes with a great help facility. Please look at    some of the \"Additional Readings\" above for programming    guides.         Assignments and grading     There will be regular    (biweekly or weekly) challenging     assignments and a take-home final. The assignments will be    mostly computational. You will be expected to submit a PDF    of your solutions, as explained in more detail under Assignments . The grade will be    70% based on assignments and 30% on a take-home final which    will be similar to the homework assignments. Assuming the    total possible number of points (excluding extra credit) is    100, the grade scale will be based on the weights used in    computing your GPA:              &gt;92.5  = A      87.5-92.5 = A-      80.0-87.5 = B+      72.5-80.0 = B      65.0-72.5 = B-      57.5-65.0 = C+      50.0-57.5 = C      42.5-50.0 = C-           &lt;42.5  = F         Academic         integrity policies will be strictly enforced for    homework assignments. Students in the Mathematics in Finance    program should be aware of the strict academic         integrity policy of their program.     Communication     There is a message and    discussion board on the course Blackboard page that will be    used for messages related to the assignments and any    scheduling changes. If you register for the class, you    automatically have access to the message board. All course    materials including lecture notes and assignments will be    posted on this site as they become available.         You should feel free to email the instructor     with any questions, concerns, or special requests such as    deadline extensions, meeting outside of office hours, etc.         Computing     Computing on your own will    form an essential part of the learning process and your own    applied mathematics training. The Courant Institute has    computer labs with Linux workstations that have Matlab    (matlab), Maple (xmaple), Mathematica (mathematica), the GNU    (gcc,g++,gfortran), Intel and Pathscale C/C++/Fortran    compiler suites, and other useful software installed.          You can purchase student edition Matlab from the NYU    computer store if you want to use it on your own personal    computer. If cost is a problem, Octave (octave)    provides a free alternative to Matlab that you can download    for Linux, Windows or Mac OS X. Note however that the    plotting facilities in Octave are not up to par with    Matlab's and this may put you at a disadvantage for homework    assignments.          You are encouraged to submit reports as PDFs produced using    LaTex (latex), as a good practice in learning how to use    mathematical typesetting software for future papers and    thesis reports. I recommend trying out the LyX word processor as a    front-end GUI to LaTex, especially if you are new to LaTex.          Also see these resources listed          by my colleague David Bindell . In particular, some coding          advice that may be useful in general."}]},
{"detail": [{"content": "Scientific Computing - NYU Computer Science Department                                                                     Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                 Scientific Computing      Faculty       Marsha Berger    Michael Overton    Olof Widlund    Margaret Wright      Description         Scientific Computing has a long tradition at the Courant Institute,   which was founded by Richard Courant at the dawn of the computer era.   Electronic computers were invented in the late 1940's and early 1950's   for exactly one purpose: solving hard scientific and engineering   problems which required too much numerical computation to do by hand.   The phenomenal development of computers in the last 50 years has been   accompanied by an equally rapid development in the field of scientific   computing. Now, virtually all branches of science and engineering   rely heavily on computing. The traditional two branches of science   are theoretical science and experimental science. Computational   science is now often mentioned as a third branch, having a status   which is essentially equal, perhaps even eclipsing, that of its two   older siblings. The availability of greatly improved computational   techniques and immensely faster computers have made it possible to   solve complicated problems which would have seemed impossible just a   generation ago.       Scientific Computing is the discipline that studies how to solve a wide   variety of problems arising in science and engineering by   computational techniques. Sometimes it is said to rest on four A's:   Analysis, Algorithms, Architecture, and Applications.   Many faculty at Courant, both in the Computer Science and Mathematics   Departments, have strong interests in Scientific Computing,   both in specific application areas and in general techniques   and analysis that have broad applicability.         Research Interests                  Marsha J. Berger            Computational fluid dynamics, large-scale parallel computing, adaptive methods in complex geometries.                      Michael L. Overton             Optimization, semidefinite programming, convex and nonconvex programming.                     Olof B. Widlund             Finite element methods, partial differential equations, domain decomposition.                     Margaret H. Wright              Optimization, linear algebra, numerical analysis, scientific computing, and scientific and engineering applications.                Affiliated Mathematics Faculty         Yu Chen    Jonathan Goodman     Leslie Greengard     Michael Shelley      Related Projects         Courant Math and Computing Laboratory (CMCL)               top | contact webmaster@cs.nyu.edu"}, {"content": "Scientific Computing graduate course, Spring 2012                  MATH-GA.2043 or CSCI-GA.2112     Scientific Computing           Warren Weaver Hall, room 101, Thursdays,   5:10 - 7 pm     Courant Institute of    Mathematical Sciences     New York University     Spring Semester, 2012           Home         Lectures         Assignments                   Instructor     Aleksandar Donev ,    1016 Warren Weaver Hall     E-mail: donev@courant.nyu.edu     ; Phone: (212) 992-7315     Office hours: 5-6 pm Tuesdays, 4-5pm on Thursdays, or by appointment     Graders     Juan Calvo ( calvo@cims.nyu.edu )     Office hours: Mondays, 5-7pm, 705 Warren Weaver Hall         Aaron Eastburn ( ae593@cims.nyu.edu )     Office hours: Fridays, 4-6pm, 705 Warren Weaver Hall    Course description     This course is a graduate-level introduction to     practical introduction to computational problem solving,     including both mathematical analysis of numerical     algorithms (numerical analysis) and practical problem     solving. This is not a programming course but programming     in homework projects with Matlab (Python, Fortran, C/C++,     or other language of your choice) is an important part of     the course work.     Take a look at the homepage of          the Spring 2011 course as this course will be     similar.          3 points per term         Topics covered include:               floating point arithmetic, conditioning and stability      direct methods for systems of linear equations      matrix eigenvalue problems and SVD decomposition           numerical interpolation, differentiation and integration      nonlinear systems of equations and unconstrained     optimization      Fourier and wavelet transforms      ordinary and partial differential equations           Monte Carlo methods.         For a tentative schedule download the syllabus .                  Main Textbook (required)         The main textbook will be Scientific Computing with     MATLAB and Octave , by Alfio M. Quarteroni &amp;    Fausto Saleri, Springer, whose third          edition just appeared in 2010 but older editions will    do just as well. Both the third          edition and the second          edition are available in PDF form through the library    subscription to springerlink, so you don't even have to buy    the paper copy. A paper copy is available on 2h reserve in    the Courant Library.          The Matlab scripts for the examples in the second edition of    the book can be downloaded as a zip          archive (use \"unzip &lt; filename &gt;\" in Linux to extract the    files). Erratas as well as the files for the recent third    edition of the book can be found on the book website .          Some of the lectures will be more closely based on a draft    of an upcoming book Principles          of Scientific Computing by my colleagues Jonathan    Goodman and David Bindel, to be found here as one          PDF or as individual          chapters .     Additional Readings         There are many free online    materials that can be consulted as additional reading,    depending on your background and interests. Here are some    suggestions (more may be added as the course progresses)    that you have special access to through the NYU/Courant    library:              Numerical Computing with MATLAB , by     Cleve Moler, available for free in PDF form at the MATLAB          site .      The Cambridge Engineering          guide to MATLAB has lots of useful information.      An Introduction to Programming and Numerical     Methods in MATLAB , Stephen R. Otto &amp; James P.     Denier, Springer, 2005, available in PDF          format through the library. This book provides an     elementary introduction to Matlab with less focus on     actual scientific computing.               Also see these resources listed         by my colleague David Bindell .    Prerequisites     A solid background    (undergraduate level) in multivariate calculus and linear    algebra. Experience with writing computer programs (in    Matlab, Python, Fortran, C, C++, or other language) is    strongly recommended as homework assignments will involve    programming from the start and you will be expected to catch    up on your own (winter break is a good time to learn    programming!).         Prior knowledge of Matlab is    not required, but it will be used as the main language for    the course. If you have experience with other languages    (Fortran, C, C++, Python), Matlab will be easy to learn and    use, and comes with a great help facility. Please look at    some of the \"Additional Readings\" above for programming    guides.         Assignments and grading     There will be regular    (biweekly or weekly) challenging     assignments and a take-home final. The assignments will be    mostly computational. You will be expected to submit a PDF    of your solutions, as explained in more detail under Assignments . The grade will be    70% based on assignments and 30% on a take-home final which    will be similar to the homework assignments. Assuming the    total possible number of points (excluding extra credit) is    100, the grade scale will be based on the weights used in    computing your GPA:              &gt;92.5  = A      87.5-92.5 = A-      80.0-87.5 = B+      72.5-80.0 = B      65.0-72.5 = B-      57.5-65.0 = C+      50.0-57.5 = C      42.5-50.0 = C-           &lt;42.5  = F         Academic         integrity policies will be strictly enforced for    homework assignments. Students in the Mathematics in Finance    program should be aware of the strict academic         integrity policy of their program.     Communication     There is a message and    discussion board on the course Blackboard page that will be    used for messages related to the assignments and any    scheduling changes. If you register for the class, you    automatically have access to the message board. All course    materials including lecture notes and assignments will be    posted on this site as they become available.         You should feel free to email the instructor     with any questions, concerns, or special requests such as    deadline extensions, meeting outside of office hours, etc.         Computing     Computing on your own will    form an essential part of the learning process and your own    applied mathematics training. The Courant Institute has    computer labs with Linux workstations that have Matlab    (matlab), Maple (xmaple), Mathematica (mathematica), the GNU    (gcc,g++,gfortran), Intel and Pathscale C/C++/Fortran    compiler suites, and other useful software installed.          You can purchase student edition Matlab from the NYU    computer store if you want to use it on your own personal    computer. If cost is a problem, Octave (octave)    provides a free alternative to Matlab that you can download    for Linux, Windows or Mac OS X. Note however that the    plotting facilities in Octave are not up to par with    Matlab's and this may put you at a disadvantage for homework    assignments.          You are encouraged to submit reports as PDFs produced using    LaTex (latex), as a good practice in learning how to use    mathematical typesetting software for future papers and    thesis reports. I recommend trying out the LyX word processor as a    front-end GUI to LaTex, especially if you are new to LaTex.          Also see these resources listed          by my colleague David Bindell . In particular, some coding          advice that may be useful in general."}, {"content": "The M.S. Programs                                                                                  Courant Institute      New York University      FAS      CAS      GSAS                           :: CONTACT US                                                       go                                  Home     People     Administration     Research     Seminars     Courses     Ph.D. Programs     M.S. Programs     M.S. in Mathematics     M.S. in Scientific Computing     M.S. in Mathematics in Finance     M.S. in Data Science     Undergraduate Program     Visiting Member Program     Weekly Bulletin     Useful Links     Job Openings     Outreach                  The Master of Science in Scientific Computing           Notice to Fall 2015 MS applicants: The department has     started to review the applications. Please note that this     process can take several weeks. We cannot guarantee a decision     date; you will be contacted by the Graduate School when an     admission decision has been made on your application. If you     have any questions and concerns regarding your application,     please contact the Math Department at admissions@math.nyu.edu .                The Program      The departments of mathematics and computer science at NYU's     Courant Institute of Mathematical Sciences offer a master's     degree in scientific computing. The program provides broad yet     rigorous training in areas of mathematics and computer science     related to scientific computing. It aims to prepare people     with the right talents and background for a technical career     doing practical computing.      The program accommodates both full-time and part-time     students, with most courses meeting in the evening. The     program is self-contained and terminal, providing a complete     set of skills in a field where the need is greater than the     supply. The masters program focuses on computational science,     which includes modeling and numerical simulation as used in     engineering design, development, and optimization.           During the academic years of 2012 and 2013 a concentration in     data sciences existed within the scientific computing program;     this concentration has been discontinued as of 2014. Incoming     students interested in data sciences should consider the     recently-created Masters              of Science in Data Science within the NYU Center for Data     Science .           Starting Fall of 2014 the modified the program requirements     and guidelines listed below will apply to all incoming     students. The new list of required/approved courses includes     the previous list but gives additional flexibility for     students to tailor the list of courses to their background and     interests. Students presently enrolled in the Modeling and     Simulation track can choose to complete the program either     under the new or the old requirements. Students enrolled in     the Data Science concentration should consult the expanded     course options and modified requirements below since this     increases flexibility while maintaining consistency with the     previous requirements. These students should contact Professor     Esteban Tabak for help     in deciding on classes to take.                Scientific Computing:     Overview           Scientific computing is an indispensable part of almost all     scientific investigation and technological development at     universities, government laboratories, and within the private     sector. Typically a scientific computing team consists of     several people trained in some branch of mathematics, science,     statistics, or engineering. What is often lacking is expertise     in modern computing tools such as visualization, modern     programming paradigms, and high performance computing. The     master's program in scientific computing aims to satisfy these     needs, without omitting basic training in numerical analysis     and computer science. Many graduates of this program work at     technologically advanced institutions, especially in research     and development, where their skills and experience complement     those without interdisciplinary degrees. The program is also     open to students who will go on to pursue doctoral studies in     computer science, mathematics, or statistics.      The master's program in scientific computing focuses on the     mathematics and computer science related to advanced computer     modeling and simulation. The program is similar in structure     to terminal master's programs in engineering, combining     classroom training with practical experience. The coursework     ranges from foundational mathematics and fundamental     algorithms to such practical topics as data visualization and     software tools. Electives encourage the exploration of     specific application areas such as mathematical and     statistical finance, applications of machine learning, fluid     mechanics, finite element methods, and biomedical modeling.     The program culminates in a master's project, which serves to     integrate the classroom material.           Admission Requirements      The program requires least three semesters of Calculus     (including multivariate calculus), as well as linear algebra.     Experience with programming in a high-level language (e.g.,     Java, C, C++, Fortran. Python) as well as data structures,     equivalent to a first-year sequence in computer science,      is also required. It is highly desirable that applicants have     undergraduate major or significant experience in mathematics,     a quantitative science or engineering, or economics.      The deadline for application to the program is April 1st for     the fall semester. The program admits students both on a     full-time and on a part-time basis. The application process     takes place online via the Graduate School of Arts and     Sciences; please visit the Graduate     School Admissions site .      For more information, please contact us at      Office of Admissions and Student Affairs      Department of Mathematics      Courant Institute of Mathematical Sciences      251 Mercer Street      New York, NY 10012-1185                Tel. (212) 998-3238      Fax (212) 995-4121                e-Mail: admissions@math.nyu.edu           e-Mail: arnon@cims.nyu.edu           web page: http://www.math.nyu.edu                Degree Requirements      A candidate for a master's degree in scientific computing     must accrue the following:           33 points of course credit (11 courses)     comprised of            4 core courses (12 points) in mathematics       4 core courses (12 points) in computer science       3 elective courses (9 points)           3 points of credit from a master's capstone     project.          Students with exceptional backgrounds may petition the program    director for permission to substitute other appropriate courses    for core courses. Advanced students may be permitted to do a    masters thesis as an alternative to the master's capstone    project.           Core Courses      The following are the two required core courses      in mathematics:                 MATH-GA              2010 Numerical Methods I (fall semester)       MATH-GA              2020 Numerical Methods II (spring semester)          Students must also complete at least two of the following core    courses in mathematics:           MATH-GA              2701 Methods of Applied Mathematics (fall     semester)      MATH-GA-2490 Partial Differential Equations I (fall)       MATH-GA              2702 Fluid Dynamics (fall semester)      MATH-GA-2962 Mathematical Statistics (if offered)           MATH-GA-2704 Applied Stochastic Analysis (spring semester)      DS-GA-1002 Statistical and Mathematical Methods          Advanced students may also choose the two additional core    courses from the following advanced topics courses in applied    math and numerical analysis, typically offered bi-anually:           MATH-GA Advanced Topics: Optimization           MATH-GA Advanced Topics: Optimization and Data Analysis      MATH-GA Advanced Topics: Monte Carlo      MATH-GA Advanced Topics: Computational Fluid Dynamics      MATH-GA Advanced Topics: Finite Element Methods                The following are the two required core courses      in computer science:            CSCI-GA              1170 Fundamental Algorithms (fall, spring and     summer terms)       CSCI-GA              2110 Programming Languages (fall, spring, and     summer terms)          Students must also complete at least two of the following core    courses in computer science:            CSCI-GA              3033 Open Source Tools (fall term)       CSCI-GA              2270 Computer Graphics (spring term)       CSCI-GA              2565 Machine Learning (fall term)      CSCI-GA.2566 Foundations of Machine Learning      DS-GA-1001 Introduction to Data Science (fall)           DS-GA-1003 Machine Learning and Computational Statistics     (spring)      DS-GA-1004: Big Data (spring)          Advanced students may also choose the two additional core    courses from advanced topics courses in computer science of    relevance to Scientific Computing, such as:           CSCI-GA Graphics Processing Units (GPUs)      CSCI-GA Advanced Topics: High-Performance Computing          The departments of mathematics and computer science publish    annual brochures describing all courses offered each year.    Students should consult these lists of course offerings to    determine the availability of desired courses.     Concentration in Data     Science     This section is meant only for students presently enrolled in    the Data Science concentration; this concentration is no longer    offered. To graduate, students enrolled in the old concentration    are required to take the following core courses     in mathematics for the concentration in data science:                One of           MATH-GA              2962 Mathematical Statistics (spring semester),      DS-GA-1001 Introduction to Data Science (fall), or           DS-GA-1002 Statistical and Mathematical Methods                and either            MATH-GA              2043 Scientific Computing (fall and spring     semesters)                or both            MATH-GA              2010 Numerical Methods I (fall semester) and            MATH-GA              2020 Numerical Methods II (spring semester)           The following are the three required core courses      in computer science for the concentration in data science:            CSCI-GA              1170 Fundamental Algorithms (fall, spring and     summer terms)       CSCI-GA              3033 Open Source Tools (fall term)          and one of           CSCI-GA              2565 Machine Learning (fall term), or      DS-GA-1003 Machine Learning and Computational Statistics     (spring)          Students in the concentration in data science must complete 33    points points of course credit (11 courses), including core and    elective courses. They must also obtain 3 points from a master's    capstone project.          The Capstone Project      The master's program culminates in a capstone project. The     capstone project course is usually taken during the final year     of study. During the project, students go through the entire     process of solving a real-world problem, from collecting and     processing data to designing and fully implementing a     solution. The problems and data sets come from settings     identical to those encountered in industry, academia, or     government.           The following is a list of courses approved to meet the     capstone requirement:             MATH-GA.2011/ CSCI-GA.2945      Advanced topics: Data Science      CSCI-GA Advanced Topics: High-Performance Computing      DS-GA-1006 Capstone Project in Data Science      CSCI-GA Advanced Computer Graphics      CSCI-GA Multicore Processors: Architecture     &amp;Programming      CSCI-GA Software Engineering           Advanced students can obtain permission from the director of     the program to do an individual capstone project under the     supervision of a faculty member.                Computing Facilities      The Courant Institute makes available for graduate training     and coursework a network of workstations maintained by systems     administrators. All graduate students have computer accounts     for the duration of their studies. NYU also runs a     high-performance computing center with both shared-memory and     distributed-memory computers.           Faculty      Many members of the departments of mathematics and computer     science have research interests bearing on scientific     computing. The list includes           Marsha J.      Berger . B.S. 1974, Binghamton; M.S. 1978, Ph.D.     1982, Stanford. Research interests: computational fluid     dynamics, adaptive mesh refinement, parallel computing.      Yu Chen .     B.S. 1982, Tsinghua; M.S. 1988, Ph.D. 1991, Yale. Research     Interests: numerical scattering theory, ill-posed problems,     scientific computing.           Aleksandar Donev .     B.S. 2001, Michigan State; Ph.D. 2006, Princeton. Research     interests: multi-scale methods, fluctuating hydrodynamics,     coarse-grained particle methods, jamming and packing.           Davi Geiger .     B.S. 1980, Pontifica (Brazil); Ph.D. 1990, MIT. Research     interests: computer vision, information theory, medical     imaging, and neuroscience.      Jonathan              B. Goodman . B.S. 1977, MIT; Ph.D. 1982, Stanford.     Research interests: numerical analysis, fluid dynamics,     computational physics, partial differential equations.      Leslie      Greengard . B.A. 1979, Wesleyan; M.S. 1987, Yale     School of Medicine; Ph.D. 1987, Yale. Research interests:     scientific computing, fast algorithms, potential theory.      Yann LeCun . B.S.     1983, ESIEE (Paris); D.E.A. 1984, Ph.D. 1987, Pierre and Marie     Curie University (Paris). Research interests: machine     learning.      Andrew      Majda . B.S. 1970, M.S. 1971, Ph.D. 1973, Stanford.     Research interests: modern applied mathematics,     atmosphere/ocean science, turbulence, statistical physics.      Bhubaneswar              Mishra . B.S. 1980, India Institute of Technology,     Kharagpur; M.S. 1982, Ph.D. 1985, Carnegie-Mellon. Research     interests: robotics, mathematical and theoretical computer     science.      Michael      L. Overton . B.S. 1974, British Columbia; M.S.     1977, Ph.D. 1979, Stanford. Research interests: numerical     linear algebra, optimization, linear and semidefinite     programming.      Kenneth Perlin .     B.A. 1979, Harvard; M.S. 1984, Ph.D. 1986, NYU. Research     interests: computer graphics, simulation, computer-human     interfaces, multimedia.      Charles              S. Peskin . B.A. 1968, Harvard; Ph.D. 1972,     Yeshiva. Research interests: physiology, fluid dynamics,     numerical methods.      Aaditya V.      Rangan . B.A. 1999, Dartmouth; Ph.D. 2003,     Berkeley. Research interests: large-scale scientific modeling     of physical, biological, and neurobiological phenomena.      Tamar      Schlick . B.S. 1982, Wayne State; M.S. 1984, Ph.D.     1987, NYU. Research interests: mathematical biology, numerical     analysis, computational chemistry.      Michael              J. Shelley . B.S. 1981, Colorado; M.S. 1984, Ph.D.     1985, Arizona. Research interests: scientific computation,     fluid dynamics, neuroscience.      Eero Simoncelli .     B.A. 1984, Harvard; M.S. 1988, Ph.D. 1993, MIT. Research     interests: image processing, computational neuroscience,     computer vision.      Esteban              Tabak . Bach. 1988, Buenos Aires; Ph.D. 1992, MIT.     Research interests: fluid dynamics, conservation laws,     optimization and data analysis.      Olof B.      Widlund . C.E. 1960, Tekn. L. 1964, Technology     Institute, Stockholm; Ph.D. 1966, Uppsala. Research interests:     numerical analysis, partial differential equations, parallel     computing.      Margaret H. Wright .     B.S. 1964, M.S. 1965, Ph.D. 1976, Stanford. Research     interests: mathematical optimization, numerical methods,     nonlinear programming.      Denis Zorin .    B.S. 1991, Moscow Institute of Physics and Technology; M.S.    1993, Ohio State; Ph.D. 1997, Caltech. Research interests:    computer graphics, geometric modeling, subdivision surfaces,    multiresolution surface representations, perceptually based    methods for computer graphics.            Miranda Holmes-Cerfon ,    B.S. 2005 University of British Columbia, PhD 2010 NYU. Research    interests: soft-matter physics, fluid dynamics, oceanography,    stochastic methods.           Antoine Cerfon ,    B.S. 2003, M.S. 2005 Ecole des Mines de Paris, PhD 2010 MIT.    Research interests: Computational plasma physics, multi-scale    methods, fast algorithms.           Dimitris GIannakis ,    MSci 2001 Cambridge, PhD 2009 Chicago. Research interests:    geometrical data analysis, statistical modeling, climate    dynamics.                Academic Standards      To register for courses, students must maintain good academic     standing, fulfilling the following requirements:           Students must maintain an average of B or better over     their first twelve credits. Students who fail to achieve     this cannot continue in the master's program.      Students cannot obtain a master's degree unless they have     maintained an overall average of B or better. Students at     risk of failing to meet this requirement receive a warning     letter from the department.      Students cannot obtain more than four no-credit grades,     withdrawals, or unresolved incomplete grades during their     academic tenure, and no more than two such grades in the     first six courses for which they have registered.          Up to two core courses taken elsewhere can earn transfer credit,    subject to the normal NYU graduate school restrictions on    transfer of credit and the approval of the program director. At    least 30 credits must be taken at NYU. For further    administrative information please contact             Tamar    Arnon            arnon@cims.nyu.edu        Tel.    212 998-3257          For further academic information please contact                 Aleksandar Donev, Director of the Master's Program in Scientific    Computing            donev@courant.nyu.edu                          Revised summer 2013                                   NEW YORK UNIVERSITY"}]}]