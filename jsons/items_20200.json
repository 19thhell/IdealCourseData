[{"detail": [{"content": "Curriculum | Computer Science, MS | NYU Polytechnic School of Engineering                                                                                                 NYU Abu Dhabi | NYU Shanghai         QuickLinks Bulletin   Directory   Employment and Career Development   Events Calendar   Human Resources / Careers   Information Technology Systems   Library   Make a Gift   NYU Classes   NYUAlbert (PS DATA)   NYUHome   Records and Registration   Services and Resources   Students   Alumni   Faculty   Staff                          Admissions  Undergraduate Admissions Graduate Admissions Online Learning Financial Aid Accepted Undergraduates Accepted Graduates  Academics  Majors and Programs Departments Honors Program BS/MS Program Study Abroad Online Learning Support + Services Graduate School  Records and Registration Class Schedule Course Textbooks School Calendar Code of Conduct Bulletin Women in Engineering  Research  Message from the Associate Provost Sponsored Research Centers + Institutes Labs + Groups CITE Game Innovation Lab Cross-Institution \u201cSeed\u201d Research Undergraduate Summer Research Bern Dibner Library Institutional Research Bioengineering IT + Media Urban Systems  Outreach  Incubators NYC Media Lab NYC Seed Enterprise Learning Center for K12 STEM Education Employment and Career Development PowerBridgeNY  Student Life  Athletics Student Affairs Public Safety Graduate Student Life and Services International Students + Scholars Residence Life and Housing Services Student Activities and Resource Center Students with Disabilities Student Resources Student Orientation  About  Hours and Directions Leadership and Administration Mission News and Publications Campus Transformation Middle States Self-Study NYU Merger Past, Present, Future Giving                                          Home / Academics / Majors and Programs / Computer Science, MS                         Computer Science, MS                                                             Curriculum                       Degree Requirements   To satisfy the requirements for the master&rsquo;s degree, you must complete 30 credits, as described below, with an overall average of B. In addition, a B average is required across the 6 core courses, as indicated below. The master&rsquo;s curriculum has 2 components: 18 credits of core elective courses and 12 credits of general elective courses.   Core Courses   Core electives are organized into 3 core areas: Computer Systems, Programming/Software, and Theory. Students must take at least 6 core elective courses, with 2 courses coming from each of the core areas.   Systems Core Area   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Computer Architecture II CS-GY 6143 This course covers high-speed computer arithmetic. Topics: Uni-processor computer architectures that exploit parallelism, advanced pipelining, superscalar, VLIW, vector processors. Parallel processing: Interconnection structures, MIMD and SIMD systems. Other selected parallel computing topics, such as parallel algorithms, PRAM machines and multicore processing. Prerequisite: Graduate standing and CS-GY 6133. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Operating Systems II CS-GY 6243 This course surveys recent important commercial and research trends in operating systems. Topics may include virtualization, network server design and characterization, scheduling and resource optimization, file systems, memory management, advanced debugging techniques, data-center design and energy utilization. Prerequisite: Graduate standing and CS-GY 6233. 3.00 Credits Distributed Operating Systems CS-GY 6253 This course introduces distributed-networked computer systems. Topics: Distributed control and consensus. Notions of time in distributed systems. Client/Server communications protocols. Middleware. Distributed File Systems and Services. Fault tolerance, replication and transparency. Peer-to-peer systems. Case studies of modern commercial systems and research efforts. 3.00 Credits Computer Networking CS-GY 6843 This course takes a top-down approach to computer networking. After an overview of computer networks and the Internet, the course covers the application layer, transport layer, network layer and link layers. Topics at the application layer include client-server architectures, P2P architectures, DNS and HTTP and Web applications. Topics at the transport layer include multiplexing, connectionless transport and UDP, principles or reliable data transfer, connection-oriented transport and TCP and TCP congestion control. Topics at the network layer include forwarding, router architecture, the IP protocol and routing protocols including OSPF and BGP. Topics at the link layer include multiple-access protocols, ALOHA, CSMA/CD, Ethernet, CSMA/CA, wireless 802.11 networks and linklayer switches. The course includes simple quantitative delay and throughput modeling, socket programming and network application development and Ethereal labs. Prerequisite: Graduate standing and CS-UY 2134. 3.00 Credits Information, Security and Privacy CS-GY 6813 This course introduces Information Systems Security and covers cryptography, capability and access control mechanisms, authentication models, security models, operating systems security, malicious code, security-policy formation and enforcement, vulnerability analysis, evaluating secure systems. Prerequisite: Competency in Application Development in UNIX and Windows Environments, Graduate status. *Online version available. 3.00 Credits Network Security CS-GY 6823 This course begins by covering attacks and threats in computer networks, including network mapping, port scanning, sniffing, DoS, DDoS, reflection attacks, attacks on DNS and leveraging P2P deployments for attacks. The course continues with cryptography topics most relevant to secure networking protocols. Topics covered are block ciphers, stream ciphers, public key cryptography, RSA, Diffie Hellman, certification authorities, digital signatures and message integrity. After surveying basic cryptographic techniques, the course examines several secure networking protocols, including PGP, SSL, IPsec and wireless security protocols. The course examines operational security, including firewalls and intrusion-detection systems. Students read recent research papers on network security and participate in an important lab component that includes packet sniffing, network mapping, firewalls, SSL and IPsec. Prerequisite: Graduate standing and EL-GY 5363:* Online version available.   Theory Core Area   3.00 Credits Foundations of Computer Science CS-GY 6003 This course covers logic, sets, functions, relations, asymptotic notation, proof techniques, induction, combinatorics, discrete probability, recurrences, graphs, trees, mathematical models of computation and undecidability. Corequisite: Graduate Standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Design and Analysis of Algorithms II CS-GY 6043 This course covers techniques in advanced design and analysis. Topics: Amortized analysis of algorithms. Advanced data structures: binomial heaps, Fibonacci heaps, data structures for disjoint sets, analysis of union by rank with path compression. Graph algorithms: elementary graph algorithms, maximum flow, matching algorithms. Randomized algorithms. Theory of NPcompleteness and approach to finding (approximate) solutions to NPcomplete problems. Selected additional topics that may vary. Prerequisite: Graduate standing and CS-GY 6033. 3.00 Credits Theory of Computation CS-GY 6753 This course introduces the theory of computation. Topics: Formal languages and automata theory. Deterministic and non-deterministic finite automata, regular expressions, regular languages, context-free languages. Pumping theorems for regular and context-free languages. Turing machines, recognizable and decidable languages. Limits of computability: the Halting Problem, undecidable and unrecognizable languages, reductions to prove undecidability. Time complexity, P and NP, Cook-Levin theorem, NP completeness. Prerequisites: Graduate standing and CS-GY 6003 (or instructor\u2019s permission). 3.00 Credits Applied Cryptography CS-GY 6903 This course examines Modern Cryptography from a both theoretical and applied perspective, with emphasis on \u201cprovable security\u201d and \u201capplication case studies\u201d. The course looks particularly at cryptographic primitives that are building blocks of various cryptographic applications. The course studies notions of security for a given cryptographic primitive, its various constructions and respective security analysis based on the security notion. The cryptographic primitives covered include pseudorandom functions, symmetric encryption (block ciphers), hash functions and random oracles, message authentication codes, asymmetric encryption, digital signatures and authenticated key exchange. The course covers how to build provably secure cryptographic protocols (e.g., secure message transmission, identification schemes, secure function evaluation, etc.), and various number-theoretic assumptions upon which cryptography is based. Also covered: implementation issues (e.g., key lengths, key management, standards, etc.) and, as application case studies, a number of real-life scenarios currently using solutions from modern cryptography. Prerequisite: Graduate standing. 3.00 Credits Computational Geometry CS-GY 6703 This course introduces data structures and algorithms for geometric data. Topics include intersection, polygon triangulation, linear programming, orthogonal range searching, point location, Voronoi diagrams, Delaunay triangulations, arrangements and duality, geometric data structures, convex hulls, binary space partitions, robot motion planning, quadtrees, visibility graphs, simplex range searching.   Programming/Software Core Area   3.00 Credits Software Engineering I CS-GY 6063 The course emphasizes the full software-engineering approach with alternative approaches. Technical emphasis is on requirements, design, development and modeling. Management issues include software cost estimating and project management. Understanding the processes applicable to the software development/integration cycle and maintenance along with technology changes on quality and development activities is highlighted. Prerequisite: Graduate standing. 3.00 Credits Software Engineering II CS-GY 6073 The course covers modern, advanced software-engineering approaches with theory and practice orientations. Important design and management issues are analyzed and evaluated. Technical and management tradeoffs in distributed software systems are emphasized. An extensive number of real world case studies are assessed. A class project is required. Prerequisite: CS-GY 6063 and graduate standing. 3.00 Credits Principles of Database Systems CS-GY 6083 This course broadly introduces database systems, including the relational data model, query languages, database design, index and file structures, query processing and optimization, concurrency and recovery, transaction management and database design. Students acquire hands-on experience in working with database systems and in building web-accessible database applications. Prerequisites: Graduate standing, CS-GY 6003 or equivalent, familiarity with basic data structures and operating system principles. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403. 3.00 Credits Compiler Design and Construction CS-GY 6413 This course covers compiler organization. Topics: Lexical analysis, syntax analysis, abstract syntax trees, symbol table organization, code generation. Introduction to code optimization techniques. Prerequisites: CS-GY 5403, CS-GY 6133 and CS-GY 6003. 3.00 Credits Interactive Computer Graphics CS-GY 6533 This course introduces the fundamentals of computer graphics with hands-on graphics programming experiences. Topics include graphics software and hardware, 2D line segment-scan conversion, 2D and 3D transformations, viewing, clipping, polygon-scan conversion, hidden surface removal, illumination and shading, compositing, texture mapping, ray tracing, radiosity and scientific visualization. Prerequisites: Graduate standing, CS-GY 5403 (Data Structures) or equivalents and knowledge of C or C++ programming. 3.00 Credits Artificial Intelligence I CS-GY 6613 Artificial Intelligence (AI) is an important topic in computer science and offers many diversified applications. It addresses one of the ultimate puzzles humans are trying to solve: How is it possible for a slow, tiny brain, whether biological or electronic, to perceive, understand, predict and manipulate a world far larger and more complicated than itself? And how do people create a machine (or computer) with those properties? To that end, AI researchers try to understand how seeing, learning, remembering and reasoning can, or should, be done. This course introduces students to the many AI concepts and techniques. Prerequisite: Graduate standing and CS-GY 5403. 3.00 Credits Application Security CS-GY 9163 This course addresses the design and implementation of secure applications. Concentration is on writing software programs that make it difficult for intruders to exploit security holes. The course emphasizes writing secure distributed programs in Java. The security ramifications of class, field and method visibility are emphasized. Prerequisite: Gradute standing   Additionally, the rule below applies for these 4 courses:   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403.   You are required to take the course unless you have taken an equivalent course (at either the graduate or undergraduate level) with a grade of B or higher. If you have taken an equivalent course and received a B grade or higher, you may not take the course at Polytechnic as part of this master&rsquo;s program without special permission.   Electives   In addition to the core electives, you are required to take 4 general elective courses but have considerable flexibility. The only restriction is that no more than 2 of the courses may be taken from outside the Department of Computer Science and Engineering. In particular:     Master&rsquo;s thesis (6 credits) and/or independent study courses may be part of a student&rsquo;s 4 elective courses   Any of the courses in the 3 core areas may be chosen as electives.   Graduate-level courses from outside of the department (at most 2) may be chosen as electives.   Any CS graduate course not included in the core areas may be chosen as electives.     These courses include:   3.00 Credits Performance Evaluation of Computer Systems CS-GY 6273 This course focuses on modeling and performance analysis of computer systems. It concentrates on testing and evaluation of three-tiered distributed client/server and WEB-based systems and generally on distributed networking systems. The course presents and evaluates various systems architectures from a macro and micro viewpoint. Prerequisites: Graduate Standing, EL-GY 5363 and instructor\u2019s permission. 3.00 Credits Computer Vision and Scene Analysis CS-GY 6643 An important goal of artificial intelligence is to equip computers with the capability to interpret visual inputs. Computer vision and scene analysis is an AI area that deals with constructing explicit, meaningful descriptions of physical objects from images. It includes many techniques from image processing, pattern recognition, geometric modeling and cognitive processing. This course introduces the many techniques and applications of computer vision and scene analysis. Prerequisites: Graduate standing, CS-GY 5403 and MA-UY 2012, or equivalents, or instructor\u2019s permission. 3.00 Credits Neural Network Computing CS-GY 6673 This course introduces neural network models and their applications. Topics: Discussion of organization and learning in neural network models including perceptrons, adalines, back-propagation networks, recurrent networks, adaptive resonance theory and the neocognitron. Implementations in general and special purpose hardware, both analog and digital. Application in various areas with comparisons to nonneural approaches. Decision systems, nonlinear control, speech processing and vision. Prerequisite: Graduate standing and CS-GY 5403. Some familiarity with matrix notation and partial derivatives is recommended. 3.00 Credits Selected Topics in Computer Science CS-GY 9013 This course covers topics of current interest in computer science. Recent offerings include software specification and validation, parallel algorithms and architectures, client-server systems and advanced object-oriented design (Java). Advanced topics: Databases, performance analysis, computer simulation, Java programming, Unix programming, human and computer interaction, cryptography with financial applications and biometric identification. Prerequisites: Graduate Standing, and specified when course is offered. 3.00 Credits Special Topics in Computer Science CS-GY 9053 3.00 Credits Select Topics Computer Science CS-GY 9073 3.00 Credits Advanced Database Systems CS-GY 6093 Students in this advanced course on database systems and data management are assumed to have a solid background in databases. The course typically covers a selection from the following topics: (1) advanced relational query processing and optimization, (2) OLAP and data warehousing, (3) data mining, (4) stream databases and other emerging database architectures and applications, (5) advanced transaction processing, (6) databases and the Web: text, search and semistructured data, or (7) geographic information systems. Topics are taught based on a reading list of selected research papers. Students work on a course project and may have to present in class. Prerequisites: CS-GY 6083 or CS-UY 308 or equivalent, including experience with a relational database system and graduate standing. 3.00 Credits Biometrics CS-GY 9093 The course concentrates on the unique advantages that biometrics brings to computer security. The course also addresses such challenging issues as security strength, recognition rates and privacy, as well as alternatives of passwords and smart cards. Students gain knowledge in the building blocks of this field: image and signal processing, pattern recognition, security and privacy and secure system design. By the end of the course students are able to evaluate and design security systems that include biometrics. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Selected Topics in Cs CS-GY 9103 3.00 Credits Machine Learning CS-GY 6923 This course introduces the field of machine learning and covers standard machine-learning techniques, such as decision trees, nearest neighbor, Bayesian methods, support vector machines and logistic regression. Topics: Basic concepts in computational learning theory including the PAC model and VC dimension. Methods for evaluating and comparing machine learning techniques. 3.00 Credits Web Search Engines CS-GY 6913 This course covers the basic technology underlying Web search engines and related tools. The main focus is on large-scale Web search engines (such as Google, Yahoo and MSN Search) and their underlying architectures and techniques. Students learn how search engines work and get hands-on experience in how to build search engines from the ground up. Topics are based on a reading list of recent research papers. Students must work on a course project and may have to present in class. Prerequisite: Graduate standing 3.00 Credits Special Topics in Cs CS-GY 9133 3.00 Credits Selected Topics in Computer Science CS-GY 9153   Preparatory Courses   We offer 2 preparatory bridge courses for students who do not have a working knowledge of a high level, general-purpose programming language:   3.00 Credits Introduction to Programming and Problem Solving CS-GY 5303 This course introduces discrete mathematics, computers and programming; Running C/C++ programs under Unix; algorithmic language; pseudo code; problem solving and program structure. Topics include constants, variable, data types, assignments, arithmetic expressions, input and output; object-oriented and top-down design and procedures, selection and loops; functions; enumerated; arrays, structs and searching and sorting. Prerequisite: Graduate status: *Online version available. 3.00 Credits Data Structures and Algorithms CS-GY 5403 This course introduces data structures. Topics include program specifications and design; abstract data types; stacks, queues; dynamic storage allocation; sequential and linked implementation of stacks and queues; searching methods, sequential and binary; binary trees and general trees; hashing; computational complexity; sorting algorithms: selection sort, heap sort, mergesort and quicksort; comparison of sorting techniques and analysis. Prerequisite: Graduate Standing, CS-GY 5303 *Online version available.   Master&#39;s Thesis   Exceptional students may elect to write a master&#39;s thesis, for which no more than 6 credits may be earned toward the degree. Such students should find an appropriate adviser who has agreed to monitor the thesis research. Such research need not be original, but should adequately demonstrate the student&#39;s proficiency in the subject material. An oral defense of the master&#39;s thesis with at least three professors in attendance is required.   ( see overview )                                Computer Science, MS      Admission Requirements   Curriculum                                    Engineering is NYU  Follow Us:  Facebook Twitter Vimeo YouTube        Undergraduate   Admissions   How to Apply   Apply Now   admissions@nyu.edu   Graduate   Admissions   Requirements   Apply Now   engineering.gradinfo@nyu.edu   Site Links   Press   Directory   Directions   Event Calendar   Careers/HR   Support    Email/Network help@poly.edu Website Report a Problem Login (Faculty + Staff)  NYU School of Engineering 6 MetroTech Center, Brooklyn, NY 11201 Tel: 718.260.3600 Fax: 718.260.3136 &copy; NYU School of Engineering"}]},
{"detail": [{"content": "Curriculum | Computer Science, MS | NYU Polytechnic School of Engineering                                                                                                 NYU Abu Dhabi | NYU Shanghai         QuickLinks Bulletin   Directory   Employment and Career Development   Events Calendar   Human Resources / Careers   Information Technology Systems   Library   Make a Gift   NYU Classes   NYUAlbert (PS DATA)   NYUHome   Records and Registration   Services and Resources   Students   Alumni   Faculty   Staff                          Admissions  Undergraduate Admissions Graduate Admissions Online Learning Financial Aid Accepted Undergraduates Accepted Graduates  Academics  Majors and Programs Departments Honors Program BS/MS Program Study Abroad Online Learning Support + Services Graduate School  Records and Registration Class Schedule Course Textbooks School Calendar Code of Conduct Bulletin Women in Engineering  Research  Message from the Associate Provost Sponsored Research Centers + Institutes Labs + Groups CITE Game Innovation Lab Cross-Institution \u201cSeed\u201d Research Undergraduate Summer Research Bern Dibner Library Institutional Research Bioengineering IT + Media Urban Systems  Outreach  Incubators NYC Media Lab NYC Seed Enterprise Learning Center for K12 STEM Education Employment and Career Development PowerBridgeNY  Student Life  Athletics Student Affairs Public Safety Graduate Student Life and Services International Students + Scholars Residence Life and Housing Services Student Activities and Resource Center Students with Disabilities Student Resources Student Orientation  About  Hours and Directions Leadership and Administration Mission News and Publications Campus Transformation Middle States Self-Study NYU Merger Past, Present, Future Giving                                          Home / Academics / Majors and Programs / Computer Science, MS                         Computer Science, MS                                                             Curriculum                       Degree Requirements   To satisfy the requirements for the master&rsquo;s degree, you must complete 30 credits, as described below, with an overall average of B. In addition, a B average is required across the 6 core courses, as indicated below. The master&rsquo;s curriculum has 2 components: 18 credits of core elective courses and 12 credits of general elective courses.   Core Courses   Core electives are organized into 3 core areas: Computer Systems, Programming/Software, and Theory. Students must take at least 6 core elective courses, with 2 courses coming from each of the core areas.   Systems Core Area   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Computer Architecture II CS-GY 6143 This course covers high-speed computer arithmetic. Topics: Uni-processor computer architectures that exploit parallelism, advanced pipelining, superscalar, VLIW, vector processors. Parallel processing: Interconnection structures, MIMD and SIMD systems. Other selected parallel computing topics, such as parallel algorithms, PRAM machines and multicore processing. Prerequisite: Graduate standing and CS-GY 6133. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Operating Systems II CS-GY 6243 This course surveys recent important commercial and research trends in operating systems. Topics may include virtualization, network server design and characterization, scheduling and resource optimization, file systems, memory management, advanced debugging techniques, data-center design and energy utilization. Prerequisite: Graduate standing and CS-GY 6233. 3.00 Credits Distributed Operating Systems CS-GY 6253 This course introduces distributed-networked computer systems. Topics: Distributed control and consensus. Notions of time in distributed systems. Client/Server communications protocols. Middleware. Distributed File Systems and Services. Fault tolerance, replication and transparency. Peer-to-peer systems. Case studies of modern commercial systems and research efforts. 3.00 Credits Computer Networking CS-GY 6843 This course takes a top-down approach to computer networking. After an overview of computer networks and the Internet, the course covers the application layer, transport layer, network layer and link layers. Topics at the application layer include client-server architectures, P2P architectures, DNS and HTTP and Web applications. Topics at the transport layer include multiplexing, connectionless transport and UDP, principles or reliable data transfer, connection-oriented transport and TCP and TCP congestion control. Topics at the network layer include forwarding, router architecture, the IP protocol and routing protocols including OSPF and BGP. Topics at the link layer include multiple-access protocols, ALOHA, CSMA/CD, Ethernet, CSMA/CA, wireless 802.11 networks and linklayer switches. The course includes simple quantitative delay and throughput modeling, socket programming and network application development and Ethereal labs. Prerequisite: Graduate standing and CS-UY 2134. 3.00 Credits Information, Security and Privacy CS-GY 6813 This course introduces Information Systems Security and covers cryptography, capability and access control mechanisms, authentication models, security models, operating systems security, malicious code, security-policy formation and enforcement, vulnerability analysis, evaluating secure systems. Prerequisite: Competency in Application Development in UNIX and Windows Environments, Graduate status. *Online version available. 3.00 Credits Network Security CS-GY 6823 This course begins by covering attacks and threats in computer networks, including network mapping, port scanning, sniffing, DoS, DDoS, reflection attacks, attacks on DNS and leveraging P2P deployments for attacks. The course continues with cryptography topics most relevant to secure networking protocols. Topics covered are block ciphers, stream ciphers, public key cryptography, RSA, Diffie Hellman, certification authorities, digital signatures and message integrity. After surveying basic cryptographic techniques, the course examines several secure networking protocols, including PGP, SSL, IPsec and wireless security protocols. The course examines operational security, including firewalls and intrusion-detection systems. Students read recent research papers on network security and participate in an important lab component that includes packet sniffing, network mapping, firewalls, SSL and IPsec. Prerequisite: Graduate standing and EL-GY 5363:* Online version available.   Theory Core Area   3.00 Credits Foundations of Computer Science CS-GY 6003 This course covers logic, sets, functions, relations, asymptotic notation, proof techniques, induction, combinatorics, discrete probability, recurrences, graphs, trees, mathematical models of computation and undecidability. Corequisite: Graduate Standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Design and Analysis of Algorithms II CS-GY 6043 This course covers techniques in advanced design and analysis. Topics: Amortized analysis of algorithms. Advanced data structures: binomial heaps, Fibonacci heaps, data structures for disjoint sets, analysis of union by rank with path compression. Graph algorithms: elementary graph algorithms, maximum flow, matching algorithms. Randomized algorithms. Theory of NPcompleteness and approach to finding (approximate) solutions to NPcomplete problems. Selected additional topics that may vary. Prerequisite: Graduate standing and CS-GY 6033. 3.00 Credits Theory of Computation CS-GY 6753 This course introduces the theory of computation. Topics: Formal languages and automata theory. Deterministic and non-deterministic finite automata, regular expressions, regular languages, context-free languages. Pumping theorems for regular and context-free languages. Turing machines, recognizable and decidable languages. Limits of computability: the Halting Problem, undecidable and unrecognizable languages, reductions to prove undecidability. Time complexity, P and NP, Cook-Levin theorem, NP completeness. Prerequisites: Graduate standing and CS-GY 6003 (or instructor\u2019s permission). 3.00 Credits Applied Cryptography CS-GY 6903 This course examines Modern Cryptography from a both theoretical and applied perspective, with emphasis on \u201cprovable security\u201d and \u201capplication case studies\u201d. The course looks particularly at cryptographic primitives that are building blocks of various cryptographic applications. The course studies notions of security for a given cryptographic primitive, its various constructions and respective security analysis based on the security notion. The cryptographic primitives covered include pseudorandom functions, symmetric encryption (block ciphers), hash functions and random oracles, message authentication codes, asymmetric encryption, digital signatures and authenticated key exchange. The course covers how to build provably secure cryptographic protocols (e.g., secure message transmission, identification schemes, secure function evaluation, etc.), and various number-theoretic assumptions upon which cryptography is based. Also covered: implementation issues (e.g., key lengths, key management, standards, etc.) and, as application case studies, a number of real-life scenarios currently using solutions from modern cryptography. Prerequisite: Graduate standing. 3.00 Credits Computational Geometry CS-GY 6703 This course introduces data structures and algorithms for geometric data. Topics include intersection, polygon triangulation, linear programming, orthogonal range searching, point location, Voronoi diagrams, Delaunay triangulations, arrangements and duality, geometric data structures, convex hulls, binary space partitions, robot motion planning, quadtrees, visibility graphs, simplex range searching.   Programming/Software Core Area   3.00 Credits Software Engineering I CS-GY 6063 The course emphasizes the full software-engineering approach with alternative approaches. Technical emphasis is on requirements, design, development and modeling. Management issues include software cost estimating and project management. Understanding the processes applicable to the software development/integration cycle and maintenance along with technology changes on quality and development activities is highlighted. Prerequisite: Graduate standing. 3.00 Credits Software Engineering II CS-GY 6073 The course covers modern, advanced software-engineering approaches with theory and practice orientations. Important design and management issues are analyzed and evaluated. Technical and management tradeoffs in distributed software systems are emphasized. An extensive number of real world case studies are assessed. A class project is required. Prerequisite: CS-GY 6063 and graduate standing. 3.00 Credits Principles of Database Systems CS-GY 6083 This course broadly introduces database systems, including the relational data model, query languages, database design, index and file structures, query processing and optimization, concurrency and recovery, transaction management and database design. Students acquire hands-on experience in working with database systems and in building web-accessible database applications. Prerequisites: Graduate standing, CS-GY 6003 or equivalent, familiarity with basic data structures and operating system principles. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403. 3.00 Credits Compiler Design and Construction CS-GY 6413 This course covers compiler organization. Topics: Lexical analysis, syntax analysis, abstract syntax trees, symbol table organization, code generation. Introduction to code optimization techniques. Prerequisites: CS-GY 5403, CS-GY 6133 and CS-GY 6003. 3.00 Credits Interactive Computer Graphics CS-GY 6533 This course introduces the fundamentals of computer graphics with hands-on graphics programming experiences. Topics include graphics software and hardware, 2D line segment-scan conversion, 2D and 3D transformations, viewing, clipping, polygon-scan conversion, hidden surface removal, illumination and shading, compositing, texture mapping, ray tracing, radiosity and scientific visualization. Prerequisites: Graduate standing, CS-GY 5403 (Data Structures) or equivalents and knowledge of C or C++ programming. 3.00 Credits Artificial Intelligence I CS-GY 6613 Artificial Intelligence (AI) is an important topic in computer science and offers many diversified applications. It addresses one of the ultimate puzzles humans are trying to solve: How is it possible for a slow, tiny brain, whether biological or electronic, to perceive, understand, predict and manipulate a world far larger and more complicated than itself? And how do people create a machine (or computer) with those properties? To that end, AI researchers try to understand how seeing, learning, remembering and reasoning can, or should, be done. This course introduces students to the many AI concepts and techniques. Prerequisite: Graduate standing and CS-GY 5403. 3.00 Credits Application Security CS-GY 9163 This course addresses the design and implementation of secure applications. Concentration is on writing software programs that make it difficult for intruders to exploit security holes. The course emphasizes writing secure distributed programs in Java. The security ramifications of class, field and method visibility are emphasized. Prerequisite: Gradute standing   Additionally, the rule below applies for these 4 courses:   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403.   You are required to take the course unless you have taken an equivalent course (at either the graduate or undergraduate level) with a grade of B or higher. If you have taken an equivalent course and received a B grade or higher, you may not take the course at Polytechnic as part of this master&rsquo;s program without special permission.   Electives   In addition to the core electives, you are required to take 4 general elective courses but have considerable flexibility. The only restriction is that no more than 2 of the courses may be taken from outside the Department of Computer Science and Engineering. In particular:     Master&rsquo;s thesis (6 credits) and/or independent study courses may be part of a student&rsquo;s 4 elective courses   Any of the courses in the 3 core areas may be chosen as electives.   Graduate-level courses from outside of the department (at most 2) may be chosen as electives.   Any CS graduate course not included in the core areas may be chosen as electives.     These courses include:   3.00 Credits Performance Evaluation of Computer Systems CS-GY 6273 This course focuses on modeling and performance analysis of computer systems. It concentrates on testing and evaluation of three-tiered distributed client/server and WEB-based systems and generally on distributed networking systems. The course presents and evaluates various systems architectures from a macro and micro viewpoint. Prerequisites: Graduate Standing, EL-GY 5363 and instructor\u2019s permission. 3.00 Credits Computer Vision and Scene Analysis CS-GY 6643 An important goal of artificial intelligence is to equip computers with the capability to interpret visual inputs. Computer vision and scene analysis is an AI area that deals with constructing explicit, meaningful descriptions of physical objects from images. It includes many techniques from image processing, pattern recognition, geometric modeling and cognitive processing. This course introduces the many techniques and applications of computer vision and scene analysis. Prerequisites: Graduate standing, CS-GY 5403 and MA-UY 2012, or equivalents, or instructor\u2019s permission. 3.00 Credits Neural Network Computing CS-GY 6673 This course introduces neural network models and their applications. Topics: Discussion of organization and learning in neural network models including perceptrons, adalines, back-propagation networks, recurrent networks, adaptive resonance theory and the neocognitron. Implementations in general and special purpose hardware, both analog and digital. Application in various areas with comparisons to nonneural approaches. Decision systems, nonlinear control, speech processing and vision. Prerequisite: Graduate standing and CS-GY 5403. Some familiarity with matrix notation and partial derivatives is recommended. 3.00 Credits Selected Topics in Computer Science CS-GY 9013 This course covers topics of current interest in computer science. Recent offerings include software specification and validation, parallel algorithms and architectures, client-server systems and advanced object-oriented design (Java). Advanced topics: Databases, performance analysis, computer simulation, Java programming, Unix programming, human and computer interaction, cryptography with financial applications and biometric identification. Prerequisites: Graduate Standing, and specified when course is offered. 3.00 Credits Special Topics in Computer Science CS-GY 9053 3.00 Credits Select Topics Computer Science CS-GY 9073 3.00 Credits Advanced Database Systems CS-GY 6093 Students in this advanced course on database systems and data management are assumed to have a solid background in databases. The course typically covers a selection from the following topics: (1) advanced relational query processing and optimization, (2) OLAP and data warehousing, (3) data mining, (4) stream databases and other emerging database architectures and applications, (5) advanced transaction processing, (6) databases and the Web: text, search and semistructured data, or (7) geographic information systems. Topics are taught based on a reading list of selected research papers. Students work on a course project and may have to present in class. Prerequisites: CS-GY 6083 or CS-UY 308 or equivalent, including experience with a relational database system and graduate standing. 3.00 Credits Biometrics CS-GY 9093 The course concentrates on the unique advantages that biometrics brings to computer security. The course also addresses such challenging issues as security strength, recognition rates and privacy, as well as alternatives of passwords and smart cards. Students gain knowledge in the building blocks of this field: image and signal processing, pattern recognition, security and privacy and secure system design. By the end of the course students are able to evaluate and design security systems that include biometrics. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Selected Topics in Cs CS-GY 9103 3.00 Credits Machine Learning CS-GY 6923 This course introduces the field of machine learning and covers standard machine-learning techniques, such as decision trees, nearest neighbor, Bayesian methods, support vector machines and logistic regression. Topics: Basic concepts in computational learning theory including the PAC model and VC dimension. Methods for evaluating and comparing machine learning techniques. 3.00 Credits Web Search Engines CS-GY 6913 This course covers the basic technology underlying Web search engines and related tools. The main focus is on large-scale Web search engines (such as Google, Yahoo and MSN Search) and their underlying architectures and techniques. Students learn how search engines work and get hands-on experience in how to build search engines from the ground up. Topics are based on a reading list of recent research papers. Students must work on a course project and may have to present in class. Prerequisite: Graduate standing 3.00 Credits Special Topics in Cs CS-GY 9133 3.00 Credits Selected Topics in Computer Science CS-GY 9153   Preparatory Courses   We offer 2 preparatory bridge courses for students who do not have a working knowledge of a high level, general-purpose programming language:   3.00 Credits Introduction to Programming and Problem Solving CS-GY 5303 This course introduces discrete mathematics, computers and programming; Running C/C++ programs under Unix; algorithmic language; pseudo code; problem solving and program structure. Topics include constants, variable, data types, assignments, arithmetic expressions, input and output; object-oriented and top-down design and procedures, selection and loops; functions; enumerated; arrays, structs and searching and sorting. Prerequisite: Graduate status: *Online version available. 3.00 Credits Data Structures and Algorithms CS-GY 5403 This course introduces data structures. Topics include program specifications and design; abstract data types; stacks, queues; dynamic storage allocation; sequential and linked implementation of stacks and queues; searching methods, sequential and binary; binary trees and general trees; hashing; computational complexity; sorting algorithms: selection sort, heap sort, mergesort and quicksort; comparison of sorting techniques and analysis. Prerequisite: Graduate Standing, CS-GY 5303 *Online version available.   Master&#39;s Thesis   Exceptional students may elect to write a master&#39;s thesis, for which no more than 6 credits may be earned toward the degree. Such students should find an appropriate adviser who has agreed to monitor the thesis research. Such research need not be original, but should adequately demonstrate the student&#39;s proficiency in the subject material. An oral defense of the master&#39;s thesis with at least three professors in attendance is required.   ( see overview )                                Computer Science, MS      Admission Requirements   Curriculum                                    Engineering is NYU  Follow Us:  Facebook Twitter Vimeo YouTube        Undergraduate   Admissions   How to Apply   Apply Now   admissions@nyu.edu   Graduate   Admissions   Requirements   Apply Now   engineering.gradinfo@nyu.edu   Site Links   Press   Directory   Directions   Event Calendar   Careers/HR   Support    Email/Network help@poly.edu Website Report a Problem Login (Faculty + Staff)  NYU School of Engineering 6 MetroTech Center, Brooklyn, NY 11201 Tel: 718.260.3600 Fax: 718.260.3136 &copy; NYU School of Engineering"}, {"content": "Programming Assignment 2 Computer Science 102              Programming Assignment 2   Computer Science 102   Spring 2000      First draft due TUES, FEB 29, 11:59 pm (midnight). Each successive draft is due one week after the due date for the previous draft   .    Introduction  Your project is to design a program to implement string operations. Recall that in Turbo Pascal there is already a string type. A  string is an array of 255 characters, plus a length field that indicates how many characters are actually being used. There are two problems with this built-in implementation. First, you are prevented from having a string with more than 255 characters. Second, even if your string is very short, depending on your system, the system may  still allocate space for 255 characters. Turbo Pascal allocates space for only the amount of characters in the string. You are to implement an alternative string type, called string_type , that avoids these two problems.   Your string type will use a linked list instead of an array. For example, to represent the string 'comp' , you can use the following linked list.     _______  ______  ______  ______ list--> |_C|___|--> |_O|__|--> |_M|__|--> |_P|__|-->NIL       Your project divides into two parts:      A StrngADT unit that will implement several string operations,   A client program that will use this unit to implement a  calculator for strings assigned to one-letter variables,        The StrngADT unit    In the unit StrngADT , you will implement an abstract data type, called string_type , that will allow several useful string operations. The interface for this unit is given below.        unit StrngADT;  interface  type   pointer_type = ^node_type;  node_type =   record   info : char;   next : pointer_type  end;   string_type = object procedure Concat(string1, string2 : string_type; var string3 : string_type); {Precondition: None.  Postcondition: string3 is the concatenation of string1 and string2;     the nodes of string3 are separate from the nodes      of string1 and string2.}  procedure Copy(string1 : string_type; var string2 : string_type); {Precondition: None.  Postcondition: string2 is a copy of string1. The nodes of string2     are separate from the nodes of string1.}  procedure Repeats(string1 : string_type; n : integer;       var string2 : string_type); {Precondition: n &gt;= 0.  Postcondition: string2 is the concatenation of n copies of string1.   If n = 0, then string2 is the empty string represented by a linked list  consisting of only the NIL pointer.}  procedure Assign(string1 : string; var string2 : string_type); {Precondition: None. (Notice that string1 is a Pascal string.)  Postcondition: string2 represents the same string as string1.  Use ord(string1[0] ) to obtain the string length since you will be  using the function length as a method in this object.}  procedure Substring(string1 : string_type; x, y : integer;       var string2 : string_type); {Precondition: 1 &lt;= x &lt;= y &lt;= length(string1).  Postcondition: string2 is the substring of string1 that goes from      the xth character to the yth character.}  procedure delete(var string1 : string_type); {Precondition: string1 is defined.  Postcondition: All the nodes of string1 are returned to the heap     and string1.head is assigned the nil pointer.   Do not use delete in cases where x appears on both sides of the  ``:='', like, x := x + y, only for cases like x := 'nyu' and then x  is reassigned in for instance, x := 'hello}    function Length(string1 : string_type) : integer; {Precondition: None.  Postcondition: Returns the number of characters of string1.}  procedure Print(string1 : string_type); {Precondition: None.  Postcondition: Displays the characters of string1 on the terminal.      The display will have up to 75 characters per line.}    private   head : pointer_type;  end;     Note that the private field cannot be used as a parameter for the methods of the object; however as we see here, the object  ( String_type ) can.    Draft 1   For draft 1, you are required to first write an object called  string_type which contains as methods the usual string operations: assignment (x := 'nyu'), concatenation (z := x + y), multiplication (w := 12 * z), substring (w := x [2..5]), copying (u := x), printing (x), and  deleting . These operations are to be implemented with linked lists using dynamic pointers, so the object also contains a delete method to return the nodes of a reassigned string to the heap. The private field of the object is a pointer.    When you write the methods, remember that when you assign nil  to a pointer, you are assigning a new address to the pointer. What happens if new(p) and then q^.next := p is executed? The answer is that q^.next is the address stored in  p . If another new(p) is executed, q^.next  is still the address stored in the old p . If p := nil is executed instead, q^.next is still the address stored in the old  p and not nill .       An example of a method heading is PROCEDURE ASSIGNMENT( ST1 :STRING; ST2: STRING_TYPE) . So if ST1 is 'nyu', ST2 is the  pointer to the first node of the three node linked list containing 'n', 'y', and 'u'. The object is defined and implemented in a unit strnADT. There is a program test1.pas (available on the homepage) that  checks your strnADT.    Draft 2   The Main Program  Your main program will be a calculator of strings. In other words,  the user will use a file with a series of string commands. After each command, your program will parse the command and then print out the result of the command. Each command will have one of the following forms:        x := 'Hello'     x := y + z     x := y     x := 17 * y     x := y [10..20]     length x     x     quit      Here x , y , and z represent string variables (possibly the same variables). The only variable names allowed will be a single character, either a lowercase letter (' a ' to  ' z ') or an uppercase letter (' A ' to ' Z '). As  in Pascal, an uppercase letter refers to the same variable as its  lowercase counterpart.   Each of the tokens in the input line will be separated by one or more  blanks. Your lexical analyser should use this fact to separate the tokens,       Command 1 assigns x the string 'Hello' . In place of  'Hello' , any string of up to 75 characters may be used.   Command 2 assigns x the concatenation of strings y and  z .   Command 3 copies y into x .   Command 4 assigns x the concatenation of 17 copies of y . In place of 17, any integer between 0 and maxint may be used.   Command 5 assigns x the substring of y going from the 10th character to the 20th character. In place of 10 and 20, any integers between 1 and maxint may be used.   In all of the assignment commands above, your program should display the new value of x , in addition to performing the assignment.   Command 6 outputs the length of string x .   Command 7 outputs the value of string x .   Command 8 stops the program.   If the input line is not in one of the formats above, your program should print an error message, and then skip that input line. Similarly, if one of the variables on the right side of an assignment has not been initialized, your program should complain and skip that line. Use a symbol table to keep track of those variables assigned values. Also, the actual string_type parameters should be elements  of an array of string_type .    Discussion and explanation  Draft 2 requires you to write a string interpreter that will execute an input stream of string operations. For instance, if the input is:    x := 'nyu'   y:= 'hello'   z := y + x   z   quit   where z is the instruction to print the string stored in z, then the result would be &quot;hellonyu&quot;. A variable in the input can only be a single letter. The interpreter is not case sensitive, so that &quot;z&quot; and &quot;Z&quot; represent the same variable.   The front end of the interpreter breaks the input into constituent parts called tokens . Then in the parser , it determines which statement (assignment, print, etc.) a line of token represents. I have written the scanner for you, and the initial stage of the parser (again, these are available on the homepage in analyse.pas). The scanner is elementary because the tokens in the input must be separated by at least one blank. The parser indicates which procedure further parses a statement. The parsing up to this point is done simply by determining how many tokens appear in the input. Thus x := 'hello' and x := y are parsed such that the same procedure is executed. It is up to you to further parse them by distinguishing between an assignment and a copy statement.   Use a symbol table to check whether a variable that must have a value in any operation, has in fact been assigned a value. This in x := y, you would check whether y has been assigned a value. Do this by using a globally declared array  symbol = array['A'..'Z'] of boolean . If the input contains an undefined variable, the interpreter must print an error message.    How do you associate a variable with the pointer to the linked list? The natural way is to have an array of the object, i.e., table_type = array ['A'..'Z'] of string_type . Assume that   Table : table_type and if x := 'nyu' and y := 'hello'; and Px points to the linked list for x; and Py, for y, then Table['X'] contains Px and Table['Y']  contains Py. This also facilitates deleting linked lists for redefined  variables (see below).    How is this implemented? For instance in x := 'nyu',  stream[1] is 'x', stream[2] is ':=' and  stream[3] is the string 'nyu'. First you must strip the quotes from 'nyu'. The quotes are the first and last elements of  stream[3] . These are referred to as stream[3][1] and  stream[3][5] respectively. In general, the second subscript for the term referring to the second quote should be the length  L of the string. So it should be written as stream[3][L]   The element of Table is the second parameter of method ASSIGN . Remember that the header for the method is: PROCEDURE ASSIGN( ST1 :STRING; ST2: STRING_TYPE).  This will result in the pointer for the linked list that stores 'nyu' being the contents of the element 'X' of Table . The data for draft 2 is also on the home page.  Deleting linked lists  When a variable is assigned a new string in a simple assignment statement, e.g.,     x := 'nyu'  x := 'jay'   if you assign a new pointer to x , the pointer for the linked list representing nyu will no longer be accessible. That means that the locations for n, y and u in the heap will consume heap memory and will no longer be addressable. We say that leakage has occurred. The portion of the heap that is inaccessible (here,that which stores nyu )  is called garbage .  A language like Lisp eliminates garbage by performing garbage collection. Pascal does not do this. In this project you will do this yourself using Delete ."}]},
{"detail": [{"content": "Curriculum | Computer Science, MS | NYU Polytechnic School of Engineering                                                                                                 NYU Abu Dhabi | NYU Shanghai         QuickLinks Bulletin   Directory   Employment and Career Development   Events Calendar   Human Resources / Careers   Information Technology Systems   Library   Make a Gift   NYU Classes   NYUAlbert (PS DATA)   NYUHome   Records and Registration   Services and Resources   Students   Alumni   Faculty   Staff                          Admissions  Undergraduate Admissions Graduate Admissions Online Learning Financial Aid Accepted Undergraduates Accepted Graduates  Academics  Majors and Programs Departments Honors Program BS/MS Program Study Abroad Online Learning Support + Services Graduate School  Records and Registration Class Schedule Course Textbooks School Calendar Code of Conduct Bulletin Women in Engineering  Research  Message from the Associate Provost Sponsored Research Centers + Institutes Labs + Groups CITE Game Innovation Lab Cross-Institution \u201cSeed\u201d Research Undergraduate Summer Research Bern Dibner Library Institutional Research Bioengineering IT + Media Urban Systems  Outreach  Incubators NYC Media Lab NYC Seed Enterprise Learning Center for K12 STEM Education Employment and Career Development PowerBridgeNY  Student Life  Athletics Student Affairs Public Safety Graduate Student Life and Services International Students + Scholars Residence Life and Housing Services Student Activities and Resource Center Students with Disabilities Student Resources Student Orientation  About  Hours and Directions Leadership and Administration Mission News and Publications Campus Transformation Middle States Self-Study NYU Merger Past, Present, Future Giving                                          Home / Academics / Majors and Programs / Computer Science, MS                         Computer Science, MS                                                             Curriculum                       Degree Requirements   To satisfy the requirements for the master&rsquo;s degree, you must complete 30 credits, as described below, with an overall average of B. In addition, a B average is required across the 6 core courses, as indicated below. The master&rsquo;s curriculum has 2 components: 18 credits of core elective courses and 12 credits of general elective courses.   Core Courses   Core electives are organized into 3 core areas: Computer Systems, Programming/Software, and Theory. Students must take at least 6 core elective courses, with 2 courses coming from each of the core areas.   Systems Core Area   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Computer Architecture II CS-GY 6143 This course covers high-speed computer arithmetic. Topics: Uni-processor computer architectures that exploit parallelism, advanced pipelining, superscalar, VLIW, vector processors. Parallel processing: Interconnection structures, MIMD and SIMD systems. Other selected parallel computing topics, such as parallel algorithms, PRAM machines and multicore processing. Prerequisite: Graduate standing and CS-GY 6133. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Operating Systems II CS-GY 6243 This course surveys recent important commercial and research trends in operating systems. Topics may include virtualization, network server design and characterization, scheduling and resource optimization, file systems, memory management, advanced debugging techniques, data-center design and energy utilization. Prerequisite: Graduate standing and CS-GY 6233. 3.00 Credits Distributed Operating Systems CS-GY 6253 This course introduces distributed-networked computer systems. Topics: Distributed control and consensus. Notions of time in distributed systems. Client/Server communications protocols. Middleware. Distributed File Systems and Services. Fault tolerance, replication and transparency. Peer-to-peer systems. Case studies of modern commercial systems and research efforts. 3.00 Credits Computer Networking CS-GY 6843 This course takes a top-down approach to computer networking. After an overview of computer networks and the Internet, the course covers the application layer, transport layer, network layer and link layers. Topics at the application layer include client-server architectures, P2P architectures, DNS and HTTP and Web applications. Topics at the transport layer include multiplexing, connectionless transport and UDP, principles or reliable data transfer, connection-oriented transport and TCP and TCP congestion control. Topics at the network layer include forwarding, router architecture, the IP protocol and routing protocols including OSPF and BGP. Topics at the link layer include multiple-access protocols, ALOHA, CSMA/CD, Ethernet, CSMA/CA, wireless 802.11 networks and linklayer switches. The course includes simple quantitative delay and throughput modeling, socket programming and network application development and Ethereal labs. Prerequisite: Graduate standing and CS-UY 2134. 3.00 Credits Information, Security and Privacy CS-GY 6813 This course introduces Information Systems Security and covers cryptography, capability and access control mechanisms, authentication models, security models, operating systems security, malicious code, security-policy formation and enforcement, vulnerability analysis, evaluating secure systems. Prerequisite: Competency in Application Development in UNIX and Windows Environments, Graduate status. *Online version available. 3.00 Credits Network Security CS-GY 6823 This course begins by covering attacks and threats in computer networks, including network mapping, port scanning, sniffing, DoS, DDoS, reflection attacks, attacks on DNS and leveraging P2P deployments for attacks. The course continues with cryptography topics most relevant to secure networking protocols. Topics covered are block ciphers, stream ciphers, public key cryptography, RSA, Diffie Hellman, certification authorities, digital signatures and message integrity. After surveying basic cryptographic techniques, the course examines several secure networking protocols, including PGP, SSL, IPsec and wireless security protocols. The course examines operational security, including firewalls and intrusion-detection systems. Students read recent research papers on network security and participate in an important lab component that includes packet sniffing, network mapping, firewalls, SSL and IPsec. Prerequisite: Graduate standing and EL-GY 5363:* Online version available.   Theory Core Area   3.00 Credits Foundations of Computer Science CS-GY 6003 This course covers logic, sets, functions, relations, asymptotic notation, proof techniques, induction, combinatorics, discrete probability, recurrences, graphs, trees, mathematical models of computation and undecidability. Corequisite: Graduate Standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Design and Analysis of Algorithms II CS-GY 6043 This course covers techniques in advanced design and analysis. Topics: Amortized analysis of algorithms. Advanced data structures: binomial heaps, Fibonacci heaps, data structures for disjoint sets, analysis of union by rank with path compression. Graph algorithms: elementary graph algorithms, maximum flow, matching algorithms. Randomized algorithms. Theory of NPcompleteness and approach to finding (approximate) solutions to NPcomplete problems. Selected additional topics that may vary. Prerequisite: Graduate standing and CS-GY 6033. 3.00 Credits Theory of Computation CS-GY 6753 This course introduces the theory of computation. Topics: Formal languages and automata theory. Deterministic and non-deterministic finite automata, regular expressions, regular languages, context-free languages. Pumping theorems for regular and context-free languages. Turing machines, recognizable and decidable languages. Limits of computability: the Halting Problem, undecidable and unrecognizable languages, reductions to prove undecidability. Time complexity, P and NP, Cook-Levin theorem, NP completeness. Prerequisites: Graduate standing and CS-GY 6003 (or instructor\u2019s permission). 3.00 Credits Applied Cryptography CS-GY 6903 This course examines Modern Cryptography from a both theoretical and applied perspective, with emphasis on \u201cprovable security\u201d and \u201capplication case studies\u201d. The course looks particularly at cryptographic primitives that are building blocks of various cryptographic applications. The course studies notions of security for a given cryptographic primitive, its various constructions and respective security analysis based on the security notion. The cryptographic primitives covered include pseudorandom functions, symmetric encryption (block ciphers), hash functions and random oracles, message authentication codes, asymmetric encryption, digital signatures and authenticated key exchange. The course covers how to build provably secure cryptographic protocols (e.g., secure message transmission, identification schemes, secure function evaluation, etc.), and various number-theoretic assumptions upon which cryptography is based. Also covered: implementation issues (e.g., key lengths, key management, standards, etc.) and, as application case studies, a number of real-life scenarios currently using solutions from modern cryptography. Prerequisite: Graduate standing. 3.00 Credits Computational Geometry CS-GY 6703 This course introduces data structures and algorithms for geometric data. Topics include intersection, polygon triangulation, linear programming, orthogonal range searching, point location, Voronoi diagrams, Delaunay triangulations, arrangements and duality, geometric data structures, convex hulls, binary space partitions, robot motion planning, quadtrees, visibility graphs, simplex range searching.   Programming/Software Core Area   3.00 Credits Software Engineering I CS-GY 6063 The course emphasizes the full software-engineering approach with alternative approaches. Technical emphasis is on requirements, design, development and modeling. Management issues include software cost estimating and project management. Understanding the processes applicable to the software development/integration cycle and maintenance along with technology changes on quality and development activities is highlighted. Prerequisite: Graduate standing. 3.00 Credits Software Engineering II CS-GY 6073 The course covers modern, advanced software-engineering approaches with theory and practice orientations. Important design and management issues are analyzed and evaluated. Technical and management tradeoffs in distributed software systems are emphasized. An extensive number of real world case studies are assessed. A class project is required. Prerequisite: CS-GY 6063 and graduate standing. 3.00 Credits Principles of Database Systems CS-GY 6083 This course broadly introduces database systems, including the relational data model, query languages, database design, index and file structures, query processing and optimization, concurrency and recovery, transaction management and database design. Students acquire hands-on experience in working with database systems and in building web-accessible database applications. Prerequisites: Graduate standing, CS-GY 6003 or equivalent, familiarity with basic data structures and operating system principles. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403. 3.00 Credits Compiler Design and Construction CS-GY 6413 This course covers compiler organization. Topics: Lexical analysis, syntax analysis, abstract syntax trees, symbol table organization, code generation. Introduction to code optimization techniques. Prerequisites: CS-GY 5403, CS-GY 6133 and CS-GY 6003. 3.00 Credits Interactive Computer Graphics CS-GY 6533 This course introduces the fundamentals of computer graphics with hands-on graphics programming experiences. Topics include graphics software and hardware, 2D line segment-scan conversion, 2D and 3D transformations, viewing, clipping, polygon-scan conversion, hidden surface removal, illumination and shading, compositing, texture mapping, ray tracing, radiosity and scientific visualization. Prerequisites: Graduate standing, CS-GY 5403 (Data Structures) or equivalents and knowledge of C or C++ programming. 3.00 Credits Artificial Intelligence I CS-GY 6613 Artificial Intelligence (AI) is an important topic in computer science and offers many diversified applications. It addresses one of the ultimate puzzles humans are trying to solve: How is it possible for a slow, tiny brain, whether biological or electronic, to perceive, understand, predict and manipulate a world far larger and more complicated than itself? And how do people create a machine (or computer) with those properties? To that end, AI researchers try to understand how seeing, learning, remembering and reasoning can, or should, be done. This course introduces students to the many AI concepts and techniques. Prerequisite: Graduate standing and CS-GY 5403. 3.00 Credits Application Security CS-GY 9163 This course addresses the design and implementation of secure applications. Concentration is on writing software programs that make it difficult for intruders to exploit security holes. The course emphasizes writing secure distributed programs in Java. The security ramifications of class, field and method visibility are emphasized. Prerequisite: Gradute standing   Additionally, the rule below applies for these 4 courses:   3.00 Credits Computer Architecture I CS-GY 6133 This course provides students with an understanding of computer-hardware subsystems, digital design strategies and fundamental computer-performance and capacity-improvement techniques. Combinational and sequential circuits are developed for the essential building blocks of computers. Binary number systems are presented in both human and computer algorithms. A uniprocessor computer is built from the blocks developed. An assembly language and an instruction set are presented. Processor implementation with a data path and hardwired and microprogrammed control is introduced. Performance evaluation of computers is studied. Basic pipelining is introduced to improve system performance. Memory-hierarchy alternatives are introduced to improve the capacity of the computing system. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Introduction to Operating Systems CS-GY 6233 This course introduces basic issues in operating systems. Topics: Threads, processes, concurrency, memory management, I/O Control and case studies. Prerequisite: Graduate standing. 3.00 Credits Design and Analysis of Algorithms I CS-GY 6033 This course reviews basic data structures and mathematical tools. Topics: Data structures, priority queues, binary search trees, balanced search trees. Btrees. Algorithm design and analysis techniques illustrated in searching and sorting: heapsort, quicksort, sorting in linear time, medians and order statistics. Design and analysis techniques: dynamic programming, greedy algorithms. Graph algorithms: elementary graph algorithms (breadth first search, depth first search, topological sort, connected components, strongly connected components), minimum spanning tree, shortest path. String algorithms. Geometric algorithms. Linear programming. Brief introduction to NP completeness. Prerequisites: Graduate Standing, CS-GY 5403 and CS-GY 6003. 3.00 Credits Programming Languages CS-GY 6373 This course covers the structures, notations and semantics of programming languages. Topics: Issues of scope, type structure and parameter passing. Control structures, including support for exception handling and concurrency. Abstract data types and object oriented languages. Programming in the large. Implementation issues. Functional, logic programming languages. Examples from a variety of languages. Prerequisites: Graduate standing and CS-GY 5403.   You are required to take the course unless you have taken an equivalent course (at either the graduate or undergraduate level) with a grade of B or higher. If you have taken an equivalent course and received a B grade or higher, you may not take the course at Polytechnic as part of this master&rsquo;s program without special permission.   Electives   In addition to the core electives, you are required to take 4 general elective courses but have considerable flexibility. The only restriction is that no more than 2 of the courses may be taken from outside the Department of Computer Science and Engineering. In particular:     Master&rsquo;s thesis (6 credits) and/or independent study courses may be part of a student&rsquo;s 4 elective courses   Any of the courses in the 3 core areas may be chosen as electives.   Graduate-level courses from outside of the department (at most 2) may be chosen as electives.   Any CS graduate course not included in the core areas may be chosen as electives.     These courses include:   3.00 Credits Performance Evaluation of Computer Systems CS-GY 6273 This course focuses on modeling and performance analysis of computer systems. It concentrates on testing and evaluation of three-tiered distributed client/server and WEB-based systems and generally on distributed networking systems. The course presents and evaluates various systems architectures from a macro and micro viewpoint. Prerequisites: Graduate Standing, EL-GY 5363 and instructor\u2019s permission. 3.00 Credits Computer Vision and Scene Analysis CS-GY 6643 An important goal of artificial intelligence is to equip computers with the capability to interpret visual inputs. Computer vision and scene analysis is an AI area that deals with constructing explicit, meaningful descriptions of physical objects from images. It includes many techniques from image processing, pattern recognition, geometric modeling and cognitive processing. This course introduces the many techniques and applications of computer vision and scene analysis. Prerequisites: Graduate standing, CS-GY 5403 and MA-UY 2012, or equivalents, or instructor\u2019s permission. 3.00 Credits Neural Network Computing CS-GY 6673 This course introduces neural network models and their applications. Topics: Discussion of organization and learning in neural network models including perceptrons, adalines, back-propagation networks, recurrent networks, adaptive resonance theory and the neocognitron. Implementations in general and special purpose hardware, both analog and digital. Application in various areas with comparisons to nonneural approaches. Decision systems, nonlinear control, speech processing and vision. Prerequisite: Graduate standing and CS-GY 5403. Some familiarity with matrix notation and partial derivatives is recommended. 3.00 Credits Selected Topics in Computer Science CS-GY 9013 This course covers topics of current interest in computer science. Recent offerings include software specification and validation, parallel algorithms and architectures, client-server systems and advanced object-oriented design (Java). Advanced topics: Databases, performance analysis, computer simulation, Java programming, Unix programming, human and computer interaction, cryptography with financial applications and biometric identification. Prerequisites: Graduate Standing, and specified when course is offered. 3.00 Credits Special Topics in Computer Science CS-GY 9053 3.00 Credits Select Topics Computer Science CS-GY 9073 3.00 Credits Advanced Database Systems CS-GY 6093 Students in this advanced course on database systems and data management are assumed to have a solid background in databases. The course typically covers a selection from the following topics: (1) advanced relational query processing and optimization, (2) OLAP and data warehousing, (3) data mining, (4) stream databases and other emerging database architectures and applications, (5) advanced transaction processing, (6) databases and the Web: text, search and semistructured data, or (7) geographic information systems. Topics are taught based on a reading list of selected research papers. Students work on a course project and may have to present in class. Prerequisites: CS-GY 6083 or CS-UY 308 or equivalent, including experience with a relational database system and graduate standing. 3.00 Credits Biometrics CS-GY 9093 The course concentrates on the unique advantages that biometrics brings to computer security. The course also addresses such challenging issues as security strength, recognition rates and privacy, as well as alternatives of passwords and smart cards. Students gain knowledge in the building blocks of this field: image and signal processing, pattern recognition, security and privacy and secure system design. By the end of the course students are able to evaluate and design security systems that include biometrics. Prerequisite: Graduate standing. *Online version available. 3.00 Credits Selected Topics in Cs CS-GY 9103 3.00 Credits Machine Learning CS-GY 6923 This course introduces the field of machine learning and covers standard machine-learning techniques, such as decision trees, nearest neighbor, Bayesian methods, support vector machines and logistic regression. Topics: Basic concepts in computational learning theory including the PAC model and VC dimension. Methods for evaluating and comparing machine learning techniques. 3.00 Credits Web Search Engines CS-GY 6913 This course covers the basic technology underlying Web search engines and related tools. The main focus is on large-scale Web search engines (such as Google, Yahoo and MSN Search) and their underlying architectures and techniques. Students learn how search engines work and get hands-on experience in how to build search engines from the ground up. Topics are based on a reading list of recent research papers. Students must work on a course project and may have to present in class. Prerequisite: Graduate standing 3.00 Credits Special Topics in Cs CS-GY 9133 3.00 Credits Selected Topics in Computer Science CS-GY 9153   Preparatory Courses   We offer 2 preparatory bridge courses for students who do not have a working knowledge of a high level, general-purpose programming language:   3.00 Credits Introduction to Programming and Problem Solving CS-GY 5303 This course introduces discrete mathematics, computers and programming; Running C/C++ programs under Unix; algorithmic language; pseudo code; problem solving and program structure. Topics include constants, variable, data types, assignments, arithmetic expressions, input and output; object-oriented and top-down design and procedures, selection and loops; functions; enumerated; arrays, structs and searching and sorting. Prerequisite: Graduate status: *Online version available. 3.00 Credits Data Structures and Algorithms CS-GY 5403 This course introduces data structures. Topics include program specifications and design; abstract data types; stacks, queues; dynamic storage allocation; sequential and linked implementation of stacks and queues; searching methods, sequential and binary; binary trees and general trees; hashing; computational complexity; sorting algorithms: selection sort, heap sort, mergesort and quicksort; comparison of sorting techniques and analysis. Prerequisite: Graduate Standing, CS-GY 5303 *Online version available.   Master&#39;s Thesis   Exceptional students may elect to write a master&#39;s thesis, for which no more than 6 credits may be earned toward the degree. Such students should find an appropriate adviser who has agreed to monitor the thesis research. Such research need not be original, but should adequately demonstrate the student&#39;s proficiency in the subject material. An oral defense of the master&#39;s thesis with at least three professors in attendance is required.   ( see overview )                                Computer Science, MS      Admission Requirements   Curriculum                                    Engineering is NYU  Follow Us:  Facebook Twitter Vimeo YouTube        Undergraduate   Admissions   How to Apply   Apply Now   admissions@nyu.edu   Graduate   Admissions   Requirements   Apply Now   engineering.gradinfo@nyu.edu   Site Links   Press   Directory   Directions   Event Calendar   Careers/HR   Support    Email/Network help@poly.edu Website Report a Problem Login (Faculty + Staff)  NYU School of Engineering 6 MetroTech Center, Brooklyn, NY 11201 Tel: 718.260.3600 Fax: 718.260.3136 &copy; NYU School of Engineering"}, {"content": "Programming Assignment 2 Computer Science 102              Programming Assignment 2   Computer Science 102   Spring 2000      First draft due TUES, FEB 29, 11:59 pm (midnight). Each successive draft is due one week after the due date for the previous draft   .    Introduction  Your project is to design a program to implement string operations. Recall that in Turbo Pascal there is already a string type. A  string is an array of 255 characters, plus a length field that indicates how many characters are actually being used. There are two problems with this built-in implementation. First, you are prevented from having a string with more than 255 characters. Second, even if your string is very short, depending on your system, the system may  still allocate space for 255 characters. Turbo Pascal allocates space for only the amount of characters in the string. You are to implement an alternative string type, called string_type , that avoids these two problems.   Your string type will use a linked list instead of an array. For example, to represent the string 'comp' , you can use the following linked list.     _______  ______  ______  ______ list--> |_C|___|--> |_O|__|--> |_M|__|--> |_P|__|-->NIL       Your project divides into two parts:      A StrngADT unit that will implement several string operations,   A client program that will use this unit to implement a  calculator for strings assigned to one-letter variables,        The StrngADT unit    In the unit StrngADT , you will implement an abstract data type, called string_type , that will allow several useful string operations. The interface for this unit is given below.        unit StrngADT;  interface  type   pointer_type = ^node_type;  node_type =   record   info : char;   next : pointer_type  end;   string_type = object procedure Concat(string1, string2 : string_type; var string3 : string_type); {Precondition: None.  Postcondition: string3 is the concatenation of string1 and string2;     the nodes of string3 are separate from the nodes      of string1 and string2.}  procedure Copy(string1 : string_type; var string2 : string_type); {Precondition: None.  Postcondition: string2 is a copy of string1. The nodes of string2     are separate from the nodes of string1.}  procedure Repeats(string1 : string_type; n : integer;       var string2 : string_type); {Precondition: n &gt;= 0.  Postcondition: string2 is the concatenation of n copies of string1.   If n = 0, then string2 is the empty string represented by a linked list  consisting of only the NIL pointer.}  procedure Assign(string1 : string; var string2 : string_type); {Precondition: None. (Notice that string1 is a Pascal string.)  Postcondition: string2 represents the same string as string1.  Use ord(string1[0] ) to obtain the string length since you will be  using the function length as a method in this object.}  procedure Substring(string1 : string_type; x, y : integer;       var string2 : string_type); {Precondition: 1 &lt;= x &lt;= y &lt;= length(string1).  Postcondition: string2 is the substring of string1 that goes from      the xth character to the yth character.}  procedure delete(var string1 : string_type); {Precondition: string1 is defined.  Postcondition: All the nodes of string1 are returned to the heap     and string1.head is assigned the nil pointer.   Do not use delete in cases where x appears on both sides of the  ``:='', like, x := x + y, only for cases like x := 'nyu' and then x  is reassigned in for instance, x := 'hello}    function Length(string1 : string_type) : integer; {Precondition: None.  Postcondition: Returns the number of characters of string1.}  procedure Print(string1 : string_type); {Precondition: None.  Postcondition: Displays the characters of string1 on the terminal.      The display will have up to 75 characters per line.}    private   head : pointer_type;  end;     Note that the private field cannot be used as a parameter for the methods of the object; however as we see here, the object  ( String_type ) can.    Draft 1   For draft 1, you are required to first write an object called  string_type which contains as methods the usual string operations: assignment (x := 'nyu'), concatenation (z := x + y), multiplication (w := 12 * z), substring (w := x [2..5]), copying (u := x), printing (x), and  deleting . These operations are to be implemented with linked lists using dynamic pointers, so the object also contains a delete method to return the nodes of a reassigned string to the heap. The private field of the object is a pointer.    When you write the methods, remember that when you assign nil  to a pointer, you are assigning a new address to the pointer. What happens if new(p) and then q^.next := p is executed? The answer is that q^.next is the address stored in  p . If another new(p) is executed, q^.next  is still the address stored in the old p . If p := nil is executed instead, q^.next is still the address stored in the old  p and not nill .       An example of a method heading is PROCEDURE ASSIGNMENT( ST1 :STRING; ST2: STRING_TYPE) . So if ST1 is 'nyu', ST2 is the  pointer to the first node of the three node linked list containing 'n', 'y', and 'u'. The object is defined and implemented in a unit strnADT. There is a program test1.pas (available on the homepage) that  checks your strnADT.    Draft 2   The Main Program  Your main program will be a calculator of strings. In other words,  the user will use a file with a series of string commands. After each command, your program will parse the command and then print out the result of the command. Each command will have one of the following forms:        x := 'Hello'     x := y + z     x := y     x := 17 * y     x := y [10..20]     length x     x     quit      Here x , y , and z represent string variables (possibly the same variables). The only variable names allowed will be a single character, either a lowercase letter (' a ' to  ' z ') or an uppercase letter (' A ' to ' Z '). As  in Pascal, an uppercase letter refers to the same variable as its  lowercase counterpart.   Each of the tokens in the input line will be separated by one or more  blanks. Your lexical analyser should use this fact to separate the tokens,       Command 1 assigns x the string 'Hello' . In place of  'Hello' , any string of up to 75 characters may be used.   Command 2 assigns x the concatenation of strings y and  z .   Command 3 copies y into x .   Command 4 assigns x the concatenation of 17 copies of y . In place of 17, any integer between 0 and maxint may be used.   Command 5 assigns x the substring of y going from the 10th character to the 20th character. In place of 10 and 20, any integers between 1 and maxint may be used.   In all of the assignment commands above, your program should display the new value of x , in addition to performing the assignment.   Command 6 outputs the length of string x .   Command 7 outputs the value of string x .   Command 8 stops the program.   If the input line is not in one of the formats above, your program should print an error message, and then skip that input line. Similarly, if one of the variables on the right side of an assignment has not been initialized, your program should complain and skip that line. Use a symbol table to keep track of those variables assigned values. Also, the actual string_type parameters should be elements  of an array of string_type .    Discussion and explanation  Draft 2 requires you to write a string interpreter that will execute an input stream of string operations. For instance, if the input is:    x := 'nyu'   y:= 'hello'   z := y + x   z   quit   where z is the instruction to print the string stored in z, then the result would be &quot;hellonyu&quot;. A variable in the input can only be a single letter. The interpreter is not case sensitive, so that &quot;z&quot; and &quot;Z&quot; represent the same variable.   The front end of the interpreter breaks the input into constituent parts called tokens . Then in the parser , it determines which statement (assignment, print, etc.) a line of token represents. I have written the scanner for you, and the initial stage of the parser (again, these are available on the homepage in analyse.pas). The scanner is elementary because the tokens in the input must be separated by at least one blank. The parser indicates which procedure further parses a statement. The parsing up to this point is done simply by determining how many tokens appear in the input. Thus x := 'hello' and x := y are parsed such that the same procedure is executed. It is up to you to further parse them by distinguishing between an assignment and a copy statement.   Use a symbol table to check whether a variable that must have a value in any operation, has in fact been assigned a value. This in x := y, you would check whether y has been assigned a value. Do this by using a globally declared array  symbol = array['A'..'Z'] of boolean . If the input contains an undefined variable, the interpreter must print an error message.    How do you associate a variable with the pointer to the linked list? The natural way is to have an array of the object, i.e., table_type = array ['A'..'Z'] of string_type . Assume that   Table : table_type and if x := 'nyu' and y := 'hello'; and Px points to the linked list for x; and Py, for y, then Table['X'] contains Px and Table['Y']  contains Py. This also facilitates deleting linked lists for redefined  variables (see below).    How is this implemented? For instance in x := 'nyu',  stream[1] is 'x', stream[2] is ':=' and  stream[3] is the string 'nyu'. First you must strip the quotes from 'nyu'. The quotes are the first and last elements of  stream[3] . These are referred to as stream[3][1] and  stream[3][5] respectively. In general, the second subscript for the term referring to the second quote should be the length  L of the string. So it should be written as stream[3][L]   The element of Table is the second parameter of method ASSIGN . Remember that the header for the method is: PROCEDURE ASSIGN( ST1 :STRING; ST2: STRING_TYPE).  This will result in the pointer for the linked list that stores 'nyu' being the contents of the element 'X' of Table . The data for draft 2 is also on the home page.  Deleting linked lists  When a variable is assigned a new string in a simple assignment statement, e.g.,     x := 'nyu'  x := 'jay'   if you assign a new pointer to x , the pointer for the linked list representing nyu will no longer be accessible. That means that the locations for n, y and u in the heap will consume heap memory and will no longer be addressable. We say that leakage has occurred. The portion of the heap that is inaccessible (here,that which stores nyu )  is called garbage .  A language like Lisp eliminates garbage by performing garbage collection. Pascal does not do this. In this project you will do this yourself using Delete ."}, {"content": "NYU Computer Science Department &gt; Computer Science Majors                                                                                                                                 Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                               Computer Science Majors   Edit Title                Edit Body      If you you have any questions regarding the major requirements, send an email to the Undergraduate Program Administrator.       Major in Computer Science (12 Courses)    Core Requirements (7)       CSCI-UA.0101 Introduction to Computer Science (FA/SP) prereq: CSCI-UA.0002 or placement exam    CSCI-UA.0102 Data Structures (FA/SP) prereq: CSCI-UA.0101    CSCI-UA.0201 Computer Systems Organization (FA/SP) prereq: CSCI-UA.0102    CSCI-UA.0202 Operating Systems (FA/SP) prereq: CSCI-UA.0201    CSCI-UA.0310 Basic Algorithms (FA/SP) prereq: CSCI-UA.0102 and MATH-UA.0120    MATH-UA.0121 Calculus I (FA/SP/SU) prereq: MATH-UA.0009    MATH-UA.0120 Discrete Mathematics (FA/SP) prereq: MATH-UA.0121       Electives (5)       FIVE electives, numbered CSCI-UA.04xx       Electives vary every fall and spring semester and are NOT offered in the summer. Students may substitute a 400-level elective with one of the following Math classes: Calculus II (MATH-UA.0122) , Linear Algebra (MATH-UA.0140) and/or Probability and Statistics (MATH-UA 235); a maximum of two (2) classes can be substituted.       Joint Major in Computer Science/Mathematics (18 Courses)    REQUIREMENTS FOR STUDENTS WHO ENROLLED AT NYU FALL 2012 OR LATER    An interdisciplinary major offered jointly by the Department of Mathematics and Computer Science, providing the opportunity to study both computer science and such relevant mathematics courses as analysis, algebra, probability, and statistics.    The requirements are ten courses numbered MATH-UA 120 or higher, except MATH-UA 125, 211, 212, 213 or 246 from the Mathematics Department, which must include:       MATH-UA 120 Discrete Math    MATH-UA 121 Calculus I    MATH-UA 122 Calculus II    MATH-UA 123 Calculus III    MATH-UA 140 Linear Algebra    MATH-UA 325 Analysis I    MATH-UA 343 Algebra I       The rest of the 10 required courses must include two of the following:       MATH-UA 326 Analysis II    MATH-UA 344 Algebra II    MATH-UA 224 Vector Analysis    MATH-UA 233 Theory of Probability    MATH-UA 252 Numerical Analysis    MATH-UA 263 Partial Differential Equations    MATH-UA 282 Functions of a Complex Variable       The requirements are eight courses from the Computer Science Department, which must include:       CSCI-UA.0101 Introduction to Computer Science (FA/SP) prereq: CSCI-UA.0002 or departmental permission    CSCI-UA.0102 Data Structures (FA/SP) prereq: CSCI-UA.0101    CSCI-UA.0201 Computer Systems Organization (FA/SP) prereq: CSCI-UA.0102    CSCI-UA.0202 Operating Systems (FA/SP) prereq: CSCI-UA.0201    CSCI-UA.0310 Basic Algorithms (FA/SP) prereq: CSCI-UA.0102 and MATH-UA.0120    CSCI-UA.0421 Numerical Computing (SP)    CSCI-UA.04.. Advanced CS Elective    CSCI-UA.04.. Advanced CS Elective       * A grade of C or better is required in all these courses to fulfill the major requirement    REQUIREMENTS FOR STUDENTS WHO ENROLLED TO NYU BEFORE FALL 2012    The requirements are ten courses numbered MATH-UA 120 or higher, except MATH-UA 125, 211, 212, 213 or 246 from the Mathematics Department, which must include:       MATH-UA 325 Analysis I    MATH-UA 343 Algebra I       The rest of the 10 required courses must include one of the following:       MATH-UA 326 Analysis II    MATH-UA 344 Algebra II or    MATH-UA 224 Vector Analysis       and eight computer science courses as required for the major in that department. For more information on computer science courses please click the following link: Link .    * A grade of C or better is required in all these courses to fulfill the major requirement.       Joint Major in Economics/Computer Science (22 Courses)    Computer Science Requirements (9)       CSCI-UA.0101 Introduction to Computer Science (FA/SP) prereq: CSCI-UA.0002 or departmental permission    CSCI-UA.0102 Data Structures (FA/SP) prereq: CSCI-UA.0101    CSCI-UA.0201 Computer Systems Organization (FA/SP) prereq: CSCI-UA.0102    CSCI-UA.0202 Operating Systems (FA/SP) prereq: CSCI-UA.0201    CSCI-UA.0310 Basic Algorithms (FA/SP) prereq: CSCI-UA.0102 and MATH-UA.0120    CSCI-UA.04.. Advanced CS Elective    CSCI-UA.04.. Advanced CS Elective    CSCI-UA.04.. Advanced CS Elective    CSCI-UA.04.. Advanced CS Elective OR one of the following:       MATH-UA.0140 Linear Algebra    ECON-UA.0310 Strategic Decision Thry.    ECON-UA.0337 Fwds, Ftrs, &amp; Options    ECON-UA.0365 Advanced Micro Thry    ECON-UA.0375 Tpcs in Econ. Thry             Economics Requirements - Theory Concentration (9)       ECON-UA.0001 Ecnomics Principles I    ECON-UA.0002 Economics Principles II    ECON-UA.0011 Microeconomics    ECON-UA.0013 Macroeconomics    ECON-UA.0020 Analytical Statistics    ECON-UA.0266 Introduction to Econometrics       Two economics theory electives numbers ECON-UA 300-399 One additional economics elective    Mathematics Requirements (4)       MATH-UA.0120 Discrete Mathematics    MATH-UA.0211 Mathematics for Economics I    MATH-UA.0212 Mathematics for Economics II    MATH-UA.0213 Mathematics for Economics III            Edit All                   top | contact webmaster"}]}]