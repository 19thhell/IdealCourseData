[{"detail": [{"content": "G22.2110-001 Programming Languages            G22.2110-001 Programming Languages     Spring 2010  Class: Tuesdays, 7:10&ndash;9:00pm, WWH 102    Instructor: Robert Grimm , rgrimm@cs.nyu.edu  Office hours: Wednesdays, 2&ndash;3pm, 715 Broadway, room 711    Recitation: Ayse Naz Erkan , Mondays, 8:10&ndash;9:00pm, WWH 101        [ Overview |  Syllabus |  Homework |  Resources ]      Overview    This course explores the design, implementation, and use of mainstream programming languages. Topics include syntax, naming, scopes, state, types, abstraction through procedures, objects, and modules, as well as concurrency. Languages covered include Python, Scheme, C, Java, and O'Caml, with programming assignments for all these languages.    Textbook . Programming Language Pragmatics (PLP), 3rd edition, by Michael L. Scott.    Mailing List . Please subscribe to the class mailing list g22_2110_001_sp10 . Be sure to email your class-related questions to this list and not just the instructor.    Grading Policy . Approximately 30% for individual assignments, 30% for the midterm, and 40% for the final exam.    Collaboration Policy . Generally, please adhere to the department's  academic integrity policy . Specifically, you are encouraged to collaborate on homework assignments with other students in the course. You must, however, write up and hand in your own solutions, which clearly identify any collaborators.    Acknowledgements . This course builds on the experiences and notes of Clark Barrett, Allan Gottlieb, Martin Hirzel, and Ed Osinski. Previous versions of this course include  Spring '07 ,  Fall '08 , and  Fall '09 .     Syllabus   The syllabus will change, so please check this page at least once a week.      (Jan 19) Introduction to programming languages, syntax of programming languages. Read PLP 1 &amp; 2.1.  Slides .     (Jan 26) Names, scopes, and bindings. Read PLP 3.1&ndash;3.4 excluding 3.3.4 and 3.3.5.  Slides .  parser.py .     (Feb 2) Control flow. Read PLP 6.1&ndash;6.5.  Slides .  driver.py .     (Feb 9) Functions and procedures. Read PLP 6.6, 8.1&ndash;8.3.  Slides .    Abelson and Sussman on  the metacircurlar  evaluator   Our own version: mceval.scm        (Feb 16) Functional programming. Read PLP 10, including 10.6.1 on the CD, and Jung on Lambda Calculus .  Slides .     (Feb 23) Types. Read PLP 7.  Slides .  list.ml and plist.ml .     (Mar 2) More types. Read PLP 7.  Slides .  lambda.ml .     (Mar 9) In-class midterm exam. The exam is closed notes &amp; book. You have time for the entire period.     (Mar 16) Spring break.     (Mar 23) Program structure. Read PLP 3.3.4, 3.3.5, 3.7.  Slides .  tool.c .     (Mar 30) Object-oriented programming. Read PLP 9.  Slides .  pointer.c .     (Apr 6) More object-oriented programming. Read PLP 9.  Slides .     (Apr 13) Generic programming. Read PLP 8.4.  Slides .  Calculator.java .     (Apr 20) Exceptions. Read PLP 8.5.  Slides .  Transcript .     (Apr 27) Concurrency. Read PLP 12.  Slides .     (May 4) Q&amp;A session to help with final preparation.  Test.java and test.ml .     (May 11) Final exam. 7:10&ndash;9:00pm, Silver 206 .       Homework       Python: regular expressions and context-free grammars . Assigned 1/26. Due 2/9.    Scheme: call-by-value, call-by-name, and call-by-need . Assigned 2/9. Due 2/23.    OCaml: the simply typed lambda calculus . Assigned 2/23. Due 3/23.    C: Portable Network Graphics (PNG) . Assigned 3/23. Due 4/6.    Java: class signatures . Assigned 4/6. Due 4/27.        Resources   Languages and their implementations:     Python   Scheme     Gambit Scheme   PLT Scheme  (in R5RS mode)   MIT Scheme     gcc for C/C++   Java   O'Caml"}]},
{"detail": [{"content": "G22.2110-001 Programming Languages            G22.2110-001 Programming Languages     Spring 2010  Class: Tuesdays, 7:10&ndash;9:00pm, WWH 102    Instructor: Robert Grimm , rgrimm@cs.nyu.edu  Office hours: Wednesdays, 2&ndash;3pm, 715 Broadway, room 711    Recitation: Ayse Naz Erkan , Mondays, 8:10&ndash;9:00pm, WWH 101        [ Overview |  Syllabus |  Homework |  Resources ]      Overview    This course explores the design, implementation, and use of mainstream programming languages. Topics include syntax, naming, scopes, state, types, abstraction through procedures, objects, and modules, as well as concurrency. Languages covered include Python, Scheme, C, Java, and O'Caml, with programming assignments for all these languages.    Textbook . Programming Language Pragmatics (PLP), 3rd edition, by Michael L. Scott.    Mailing List . Please subscribe to the class mailing list g22_2110_001_sp10 . Be sure to email your class-related questions to this list and not just the instructor.    Grading Policy . Approximately 30% for individual assignments, 30% for the midterm, and 40% for the final exam.    Collaboration Policy . Generally, please adhere to the department's  academic integrity policy . Specifically, you are encouraged to collaborate on homework assignments with other students in the course. You must, however, write up and hand in your own solutions, which clearly identify any collaborators.    Acknowledgements . This course builds on the experiences and notes of Clark Barrett, Allan Gottlieb, Martin Hirzel, and Ed Osinski. Previous versions of this course include  Spring '07 ,  Fall '08 , and  Fall '09 .     Syllabus   The syllabus will change, so please check this page at least once a week.      (Jan 19) Introduction to programming languages, syntax of programming languages. Read PLP 1 &amp; 2.1.  Slides .     (Jan 26) Names, scopes, and bindings. Read PLP 3.1&ndash;3.4 excluding 3.3.4 and 3.3.5.  Slides .  parser.py .     (Feb 2) Control flow. Read PLP 6.1&ndash;6.5.  Slides .  driver.py .     (Feb 9) Functions and procedures. Read PLP 6.6, 8.1&ndash;8.3.  Slides .    Abelson and Sussman on  the metacircurlar  evaluator   Our own version: mceval.scm        (Feb 16) Functional programming. Read PLP 10, including 10.6.1 on the CD, and Jung on Lambda Calculus .  Slides .     (Feb 23) Types. Read PLP 7.  Slides .  list.ml and plist.ml .     (Mar 2) More types. Read PLP 7.  Slides .  lambda.ml .     (Mar 9) In-class midterm exam. The exam is closed notes &amp; book. You have time for the entire period.     (Mar 16) Spring break.     (Mar 23) Program structure. Read PLP 3.3.4, 3.3.5, 3.7.  Slides .  tool.c .     (Mar 30) Object-oriented programming. Read PLP 9.  Slides .  pointer.c .     (Apr 6) More object-oriented programming. Read PLP 9.  Slides .     (Apr 13) Generic programming. Read PLP 8.4.  Slides .  Calculator.java .     (Apr 20) Exceptions. Read PLP 8.5.  Slides .  Transcript .     (Apr 27) Concurrency. Read PLP 12.  Slides .     (May 4) Q&amp;A session to help with final preparation.  Test.java and test.ml .     (May 11) Final exam. 7:10&ndash;9:00pm, Silver 206 .       Homework       Python: regular expressions and context-free grammars . Assigned 1/26. Due 2/9.    Scheme: call-by-value, call-by-name, and call-by-need . Assigned 2/9. Due 2/23.    OCaml: the simply typed lambda calculus . Assigned 2/23. Due 3/23.    C: Portable Network Graphics (PNG) . Assigned 3/23. Due 4/6.    Java: class signatures . Assigned 4/6. Due 4/27.        Resources   Languages and their implementations:     Python   Scheme     Gambit Scheme   PLT Scheme  (in R5RS mode)   MIT Scheme     gcc for C/C++   Java   O'Caml"}, {"content": "Honors Programming Languages, G22.3110         Honors Programming Languages  G22.3110 Spring 2009      Instructor: Benjamin Goldberg     Phone: (212) 998-3495  Email: goldberg@cs.nyu.edu   URL: http://cs.nyu.edu/goldberg   Office: Warren Weaver Hall, Room 401  Office Hours: TBD      Lectures     Mondays and Wednesdays 3:30pm - 4:45pm, Room 101 Warren Weaver Hall       Class Mailing List     You must subscribe to the class mailing list:   g22_3110_001_sp09@cs.nyu.edu .  To subscribe, go to    http://www.cs.nyu.edu/mailman/listinfo/g22_3110_001_sp09         Course Syllabus      Final Exam : Thursday, May 7th from 2pm to 5PM in Room 512 WWH .     Assignments     Ada Assignment. Due Monday, February 23   Scheme Assignment. Due Wednesday, March 25   ML Assignment. Due Friday, April 17      unify.sml    test programs     Prolog Assignment. Due at the end of the semester   SETL Assignment. Due at the end of the semester           Exam Preparation     2008 Final Exam     In-class portion    Take-home portion      2005 Final Exam    2004 Final Exam   2003 Final Exam   2001 Final Exam   Type Theory Practice Questions   1998 Final Exam      Course Materials      Recommended Textbooks:     Programming in Ada 95  by J. G. P. Barnes  Addison-Wesley      The Art of Prolog  by Leon Sterling and Ehud Shapiro  MIT Press      ML for the Working Programmer  by Lawrence C. Paulson  Cambridge Univ Press      The  Lovelace Tutorial on Ada95    Sample Ada programs     Using Gnat, the Ada compiler    Slides from Prof. Robert Dewar's Ada Lectures (powerpoint)     Ada Tasking    Ada Object Oriented features      C++ Code Typed in Class    Scheme Code Typed in Class   To run scheme on department unix machines, type \"mzscheme\" to run MzScheme.  Scheme Downloads for Windows    Chez Scheme and Petite Chez Scheme   DrScheme, a programming environment for Scheme   MzScheme, a stand-alone Scheme implementation     Scheme Reference Manual (Revised^5)    The Scheme Programming Language, 3rd ed., by R. Kent Dybvig    An introduction to Scheme, by Paul Wilson, U. Texas      Dynamic Storage Allocation (Garbage Collection) Slides (postscript)      PDF version      Brief Lambda Calculus Lecture Notes   Scheme mini-interpreter    Functional Programming Slides (postscript)      PDF version      A Gentle Introduction to ML, by Andrew Cummings, Napier University    The Standard ML Basis Library    unify.sml (the ML unification code for use in type inference)  Informal type inference lecture notes    PS    PDF   Logic Programming and Prolog Lecture Notes   PDF    PS    Running the Prolog system    The GNU Prolog Home Page   SETL Reference Manual    PDF    PS    Sample SETL programs   Type Theory Lectures     Ed Osinski's Types Lecture   Transparencies on Subtyping      Denotational Semantics Lecture (.jpg's of handwritten notes)     Cygwin - A UNIX environment for Windows (click on \"install now\")    Note: When asked to select packages, click \"devel\" and then  scroll down to make sure that the box in the \"bin\" column  next to \"gcc\" is checked. This will ensure that gcc is included  with the cygwin installation.    Java Software Page  (Java2 Standard Edition, version 1.4.2)    The Java API web page (Java2 Standard Edition, version 1.4.2)      Lazy Scheme & Infinite Streams (Scheme Code w/ Delay & Force)"}]},
{"detail": [{"content": "G22.2110-001 Programming Languages            G22.2110-001 Programming Languages     Spring 2010  Class: Tuesdays, 7:10&ndash;9:00pm, WWH 102    Instructor: Robert Grimm , rgrimm@cs.nyu.edu  Office hours: Wednesdays, 2&ndash;3pm, 715 Broadway, room 711    Recitation: Ayse Naz Erkan , Mondays, 8:10&ndash;9:00pm, WWH 101        [ Overview |  Syllabus |  Homework |  Resources ]      Overview    This course explores the design, implementation, and use of mainstream programming languages. Topics include syntax, naming, scopes, state, types, abstraction through procedures, objects, and modules, as well as concurrency. Languages covered include Python, Scheme, C, Java, and O'Caml, with programming assignments for all these languages.    Textbook . Programming Language Pragmatics (PLP), 3rd edition, by Michael L. Scott.    Mailing List . Please subscribe to the class mailing list g22_2110_001_sp10 . Be sure to email your class-related questions to this list and not just the instructor.    Grading Policy . Approximately 30% for individual assignments, 30% for the midterm, and 40% for the final exam.    Collaboration Policy . Generally, please adhere to the department's  academic integrity policy . Specifically, you are encouraged to collaborate on homework assignments with other students in the course. You must, however, write up and hand in your own solutions, which clearly identify any collaborators.    Acknowledgements . This course builds on the experiences and notes of Clark Barrett, Allan Gottlieb, Martin Hirzel, and Ed Osinski. Previous versions of this course include  Spring '07 ,  Fall '08 , and  Fall '09 .     Syllabus   The syllabus will change, so please check this page at least once a week.      (Jan 19) Introduction to programming languages, syntax of programming languages. Read PLP 1 &amp; 2.1.  Slides .     (Jan 26) Names, scopes, and bindings. Read PLP 3.1&ndash;3.4 excluding 3.3.4 and 3.3.5.  Slides .  parser.py .     (Feb 2) Control flow. Read PLP 6.1&ndash;6.5.  Slides .  driver.py .     (Feb 9) Functions and procedures. Read PLP 6.6, 8.1&ndash;8.3.  Slides .    Abelson and Sussman on  the metacircurlar  evaluator   Our own version: mceval.scm        (Feb 16) Functional programming. Read PLP 10, including 10.6.1 on the CD, and Jung on Lambda Calculus .  Slides .     (Feb 23) Types. Read PLP 7.  Slides .  list.ml and plist.ml .     (Mar 2) More types. Read PLP 7.  Slides .  lambda.ml .     (Mar 9) In-class midterm exam. The exam is closed notes &amp; book. You have time for the entire period.     (Mar 16) Spring break.     (Mar 23) Program structure. Read PLP 3.3.4, 3.3.5, 3.7.  Slides .  tool.c .     (Mar 30) Object-oriented programming. Read PLP 9.  Slides .  pointer.c .     (Apr 6) More object-oriented programming. Read PLP 9.  Slides .     (Apr 13) Generic programming. Read PLP 8.4.  Slides .  Calculator.java .     (Apr 20) Exceptions. Read PLP 8.5.  Slides .  Transcript .     (Apr 27) Concurrency. Read PLP 12.  Slides .     (May 4) Q&amp;A session to help with final preparation.  Test.java and test.ml .     (May 11) Final exam. 7:10&ndash;9:00pm, Silver 206 .       Homework       Python: regular expressions and context-free grammars . Assigned 1/26. Due 2/9.    Scheme: call-by-value, call-by-name, and call-by-need . Assigned 2/9. Due 2/23.    OCaml: the simply typed lambda calculus . Assigned 2/23. Due 3/23.    C: Portable Network Graphics (PNG) . Assigned 3/23. Due 4/6.    Java: class signatures . Assigned 4/6. Due 4/27.        Resources   Languages and their implementations:     Python   Scheme     Gambit Scheme   PLT Scheme  (in R5RS mode)   MIT Scheme     gcc for C/C++   Java   O'Caml"}, {"content": "Honors Programming Languages, G22.3110         Honors Programming Languages  G22.3110 Spring 2009      Instructor: Benjamin Goldberg     Phone: (212) 998-3495  Email: goldberg@cs.nyu.edu   URL: http://cs.nyu.edu/goldberg   Office: Warren Weaver Hall, Room 401  Office Hours: TBD      Lectures     Mondays and Wednesdays 3:30pm - 4:45pm, Room 101 Warren Weaver Hall       Class Mailing List     You must subscribe to the class mailing list:   g22_3110_001_sp09@cs.nyu.edu .  To subscribe, go to    http://www.cs.nyu.edu/mailman/listinfo/g22_3110_001_sp09         Course Syllabus      Final Exam : Thursday, May 7th from 2pm to 5PM in Room 512 WWH .     Assignments     Ada Assignment. Due Monday, February 23   Scheme Assignment. Due Wednesday, March 25   ML Assignment. Due Friday, April 17      unify.sml    test programs     Prolog Assignment. Due at the end of the semester   SETL Assignment. Due at the end of the semester           Exam Preparation     2008 Final Exam     In-class portion    Take-home portion      2005 Final Exam    2004 Final Exam   2003 Final Exam   2001 Final Exam   Type Theory Practice Questions   1998 Final Exam      Course Materials      Recommended Textbooks:     Programming in Ada 95  by J. G. P. Barnes  Addison-Wesley      The Art of Prolog  by Leon Sterling and Ehud Shapiro  MIT Press      ML for the Working Programmer  by Lawrence C. Paulson  Cambridge Univ Press      The  Lovelace Tutorial on Ada95    Sample Ada programs     Using Gnat, the Ada compiler    Slides from Prof. Robert Dewar's Ada Lectures (powerpoint)     Ada Tasking    Ada Object Oriented features      C++ Code Typed in Class    Scheme Code Typed in Class   To run scheme on department unix machines, type \"mzscheme\" to run MzScheme.  Scheme Downloads for Windows    Chez Scheme and Petite Chez Scheme   DrScheme, a programming environment for Scheme   MzScheme, a stand-alone Scheme implementation     Scheme Reference Manual (Revised^5)    The Scheme Programming Language, 3rd ed., by R. Kent Dybvig    An introduction to Scheme, by Paul Wilson, U. Texas      Dynamic Storage Allocation (Garbage Collection) Slides (postscript)      PDF version      Brief Lambda Calculus Lecture Notes   Scheme mini-interpreter    Functional Programming Slides (postscript)      PDF version      A Gentle Introduction to ML, by Andrew Cummings, Napier University    The Standard ML Basis Library    unify.sml (the ML unification code for use in type inference)  Informal type inference lecture notes    PS    PDF   Logic Programming and Prolog Lecture Notes   PDF    PS    Running the Prolog system    The GNU Prolog Home Page   SETL Reference Manual    PDF    PS    Sample SETL programs   Type Theory Lectures     Ed Osinski's Types Lecture   Transparencies on Subtyping      Denotational Semantics Lecture (.jpg's of handwritten notes)     Cygwin - A UNIX environment for Windows (click on \"install now\")    Note: When asked to select packages, click \"devel\" and then  scroll down to make sure that the box in the \"bin\" column  next to \"gcc\" is checked. This will ensure that gcc is included  with the cygwin installation.    Java Software Page  (Java2 Standard Edition, version 1.4.2)    The Java API web page (Java2 Standard Edition, version 1.4.2)      Lazy Scheme & Infinite Streams (Scheme Code w/ Delay & Force)"}, {"content": "NYU Computer Science Department &gt; Programming Languages used in the Computer Science Major                                                                                                                                 Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                               Programming Languages used in the Computer Science Major   Edit Title                Edit Body      The Java programming language is used for the courses Introduction to Computer Science I and II (CSCI-UA.0101 and CSCI-UA.0102). Well prepared freshmen who want to major in Computer Science and who have some programming experience, either from high school or the workplace, are advised to take CSCI-UA.0101 and CSCI-UA.0102 in their freshman year. Although Java is taught from the beginning, students are expected to have some basic programming experience before entering CSCI-UA.0101. Students with little or no experience in programming must take Introduction to Computer Programming (CSCI-UA.0002), a basic introduction to programming using Python, before taking CSCI-UA.0101. In order to place into CSCI-UA.0101 or more advanced courses, students must take either the departmental placement exam or the ETS Advanced Placement exam. Click here for more information on placement exams.    In Computer Systems Organization I (CSCI-UA.0201), students use both assembly language and the C programming language. In Computer Systems Organization II (CSCI-UA.0202), students typically use Java, C or C++. Upper level electives use a variety of languages, most commonly Java or C++. See the course web pages for more information.          Edit All                   top | contact webmaster"}]}]