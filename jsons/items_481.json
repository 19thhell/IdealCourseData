[{"detail": [{"content": "Programming Languages Home Page       Programming Languages    CSCI-GA.2110-001   Fall 2011   Wednesdays 5:00 - 6:50   Room 109, Warren Weaver Hall      Professor Edmond Schonberg         Instructor: Edmond Schonberg (schonberg@cs.nyu.edu)    Office hours: CIMS 420. Wednesday 3:00p m to 5:00 pm and by appointment.    Teaching Assistants:    Alex Rubinsteyn        Objectives  We will examine basic concepts underlying the design of modern programming languages: types, control structures, abstraction mechanisms, inheritance, concurrency, constructs for programming in the large, etc. This is not a programming course per se, but there will be programming assignments in several languages, imperative and functional. The languages are chosen because of the interest of their features, and not necessarily because of their wide use. We will touch on Ada, C++, C#, Java, LISP, ML, Python, Scheme, and mention many others.    Course Outline     Prerequisites  Undergraduate courses in data structures and algorithms, familiarity and programming experience with one of the following: C, C++, Ada,Java, or Pascal.    Course Work  Programming assignments, midterm, final examination. Assignments count for  40% of the grade, but you must hand in all assignments.  Textbook   required:   Michael Scott: Programming Language Pragmatics (Morgan Kaufman 2009)   This is a excellent recent text that covers both language design and compiler fundamentals. In your readings for this course you don't need to study sections that deal with translation and compiler construction issues, but that material is interesting, and you will examine it in more detail when you take the Compiler Construction course. The latest edition of the book has just appeared, but you can use an earlier edition if you have a copy of it.  Recommended :     John Barnes: Programming in Ada2005 Addison Wesley   We will mention Ada in several contexts because the language design highlights some fundamental issues about programming in general. This is the standard text on the language. We will also use on-line materials listed below.   You must have some good text on C++ and on Java. For C++ the 3rd edition of Stroustrup: the C++ programming Language, is the standard reference. For Java, the language definition is given in: Gosling, Joy and Steele: the Java Language Specification. For both languages, there are several introductory texts by Horstmann that are very well-written, and innumerable others.   We will discuss functional languages, specifically Scheme and ML, for which there is abundant on-line documentation. The older book by Ravi Sethi: Programming Languages, Concepts and Constructs, has several good chapters on functional languages. For ML, a good pragmatic reference is \"ML for the working Programmer\" by Paulson.   We will discuss scripting and so-called very high level languages, and focus on Python and Perl, There is abundant on-line documentation for both, and several programming texts and users guides from O'Reilly.   Class list  All students should register themselves with the class list, which is used for all technical discussions concerning the course. To register, go to the following web page, and follow the instructions:     g22_2110_001_fa11 class list    You can also subscribe by sending an e-mail message to  majordomo@cs.nyu.edu . The contents of the message should be the single line:     subscribe csci_ga_g22_2110_001_fa11   you will be notified in return that you are a list participant. Please send all your questions to this list (not to the instructor) so that everyone can participate.    Software  You are free to do the programming assignments on any machine you choose, either the NYU servers, some other machine at work, or a personal computer at home. For each programming assignment, Indicate what compiler you used.  Assignments  Assignments must be submitted electronically. Send plain text, not Word files or other exotic formats. For executable programs, provide the test data and the output, and indicate the compiler you used. Send the assignments to:   schonberg@cs.nyu.edu   nyu.cs.2110@gmail    Assignment 1     Assignment 2     Assignment 3     Assignment 4     Assignment 5     Assignment 6     Assignment 7"}]},
{"detail": [{"content": "Programming Languages Home Page       Programming Languages    CSCI-GA.2110-001   Fall 2011   Wednesdays 5:00 - 6:50   Room 109, Warren Weaver Hall      Professor Edmond Schonberg         Instructor: Edmond Schonberg (schonberg@cs.nyu.edu)    Office hours: CIMS 420. Wednesday 3:00p m to 5:00 pm and by appointment.    Teaching Assistants:    Alex Rubinsteyn        Objectives  We will examine basic concepts underlying the design of modern programming languages: types, control structures, abstraction mechanisms, inheritance, concurrency, constructs for programming in the large, etc. This is not a programming course per se, but there will be programming assignments in several languages, imperative and functional. The languages are chosen because of the interest of their features, and not necessarily because of their wide use. We will touch on Ada, C++, C#, Java, LISP, ML, Python, Scheme, and mention many others.    Course Outline     Prerequisites  Undergraduate courses in data structures and algorithms, familiarity and programming experience with one of the following: C, C++, Ada,Java, or Pascal.    Course Work  Programming assignments, midterm, final examination. Assignments count for  40% of the grade, but you must hand in all assignments.  Textbook   required:   Michael Scott: Programming Language Pragmatics (Morgan Kaufman 2009)   This is a excellent recent text that covers both language design and compiler fundamentals. In your readings for this course you don't need to study sections that deal with translation and compiler construction issues, but that material is interesting, and you will examine it in more detail when you take the Compiler Construction course. The latest edition of the book has just appeared, but you can use an earlier edition if you have a copy of it.  Recommended :     John Barnes: Programming in Ada2005 Addison Wesley   We will mention Ada in several contexts because the language design highlights some fundamental issues about programming in general. This is the standard text on the language. We will also use on-line materials listed below.   You must have some good text on C++ and on Java. For C++ the 3rd edition of Stroustrup: the C++ programming Language, is the standard reference. For Java, the language definition is given in: Gosling, Joy and Steele: the Java Language Specification. For both languages, there are several introductory texts by Horstmann that are very well-written, and innumerable others.   We will discuss functional languages, specifically Scheme and ML, for which there is abundant on-line documentation. The older book by Ravi Sethi: Programming Languages, Concepts and Constructs, has several good chapters on functional languages. For ML, a good pragmatic reference is \"ML for the working Programmer\" by Paulson.   We will discuss scripting and so-called very high level languages, and focus on Python and Perl, There is abundant on-line documentation for both, and several programming texts and users guides from O'Reilly.   Class list  All students should register themselves with the class list, which is used for all technical discussions concerning the course. To register, go to the following web page, and follow the instructions:     g22_2110_001_fa11 class list    You can also subscribe by sending an e-mail message to  majordomo@cs.nyu.edu . The contents of the message should be the single line:     subscribe csci_ga_g22_2110_001_fa11   you will be notified in return that you are a list participant. Please send all your questions to this list (not to the instructor) so that everyone can participate.    Software  You are free to do the programming assignments on any machine you choose, either the NYU servers, some other machine at work, or a personal computer at home. For each programming assignment, Indicate what compiler you used.  Assignments  Assignments must be submitted electronically. Send plain text, not Word files or other exotic formats. For executable programs, provide the test data and the output, and indicate the compiler you used. Send the assignments to:   schonberg@cs.nyu.edu   nyu.cs.2110@gmail    Assignment 1     Assignment 2     Assignment 3     Assignment 4     Assignment 5     Assignment 6     Assignment 7"}, {"content": "G22.2110-001 Programming Languages            G22.2110-001 Programming Languages     Spring 2010  Class: Tuesdays, 7:10&ndash;9:00pm, WWH 102    Instructor: Robert Grimm , rgrimm@cs.nyu.edu  Office hours: Wednesdays, 2&ndash;3pm, 715 Broadway, room 711    Recitation: Ayse Naz Erkan , Mondays, 8:10&ndash;9:00pm, WWH 101        [ Overview |  Syllabus |  Homework |  Resources ]      Overview    This course explores the design, implementation, and use of mainstream programming languages. Topics include syntax, naming, scopes, state, types, abstraction through procedures, objects, and modules, as well as concurrency. Languages covered include Python, Scheme, C, Java, and O'Caml, with programming assignments for all these languages.    Textbook . Programming Language Pragmatics (PLP), 3rd edition, by Michael L. Scott.    Mailing List . Please subscribe to the class mailing list g22_2110_001_sp10 . Be sure to email your class-related questions to this list and not just the instructor.    Grading Policy . Approximately 30% for individual assignments, 30% for the midterm, and 40% for the final exam.    Collaboration Policy . Generally, please adhere to the department's  academic integrity policy . Specifically, you are encouraged to collaborate on homework assignments with other students in the course. You must, however, write up and hand in your own solutions, which clearly identify any collaborators.    Acknowledgements . This course builds on the experiences and notes of Clark Barrett, Allan Gottlieb, Martin Hirzel, and Ed Osinski. Previous versions of this course include  Spring '07 ,  Fall '08 , and  Fall '09 .     Syllabus   The syllabus will change, so please check this page at least once a week.      (Jan 19) Introduction to programming languages, syntax of programming languages. Read PLP 1 &amp; 2.1.  Slides .     (Jan 26) Names, scopes, and bindings. Read PLP 3.1&ndash;3.4 excluding 3.3.4 and 3.3.5.  Slides .  parser.py .     (Feb 2) Control flow. Read PLP 6.1&ndash;6.5.  Slides .  driver.py .     (Feb 9) Functions and procedures. Read PLP 6.6, 8.1&ndash;8.3.  Slides .    Abelson and Sussman on  the metacircurlar  evaluator   Our own version: mceval.scm        (Feb 16) Functional programming. Read PLP 10, including 10.6.1 on the CD, and Jung on Lambda Calculus .  Slides .     (Feb 23) Types. Read PLP 7.  Slides .  list.ml and plist.ml .     (Mar 2) More types. Read PLP 7.  Slides .  lambda.ml .     (Mar 9) In-class midterm exam. The exam is closed notes &amp; book. You have time for the entire period.     (Mar 16) Spring break.     (Mar 23) Program structure. Read PLP 3.3.4, 3.3.5, 3.7.  Slides .  tool.c .     (Mar 30) Object-oriented programming. Read PLP 9.  Slides .  pointer.c .     (Apr 6) More object-oriented programming. Read PLP 9.  Slides .     (Apr 13) Generic programming. Read PLP 8.4.  Slides .  Calculator.java .     (Apr 20) Exceptions. Read PLP 8.5.  Slides .  Transcript .     (Apr 27) Concurrency. Read PLP 12.  Slides .     (May 4) Q&amp;A session to help with final preparation.  Test.java and test.ml .     (May 11) Final exam. 7:10&ndash;9:00pm, Silver 206 .       Homework       Python: regular expressions and context-free grammars . Assigned 1/26. Due 2/9.    Scheme: call-by-value, call-by-name, and call-by-need . Assigned 2/9. Due 2/23.    OCaml: the simply typed lambda calculus . Assigned 2/23. Due 3/23.    C: Portable Network Graphics (PNG) . Assigned 3/23. Due 4/6.    Java: class signatures . Assigned 4/6. Due 4/27.        Resources   Languages and their implementations:     Python   Scheme     Gambit Scheme   PLT Scheme  (in R5RS mode)   MIT Scheme     gcc for C/C++   Java   O'Caml"}]},
{"detail": [{"content": "Programming Languages Home Page       Programming Languages    CSCI-GA.2110-001   Fall 2011   Wednesdays 5:00 - 6:50   Room 109, Warren Weaver Hall      Professor Edmond Schonberg         Instructor: Edmond Schonberg (schonberg@cs.nyu.edu)    Office hours: CIMS 420. Wednesday 3:00p m to 5:00 pm and by appointment.    Teaching Assistants:    Alex Rubinsteyn        Objectives  We will examine basic concepts underlying the design of modern programming languages: types, control structures, abstraction mechanisms, inheritance, concurrency, constructs for programming in the large, etc. This is not a programming course per se, but there will be programming assignments in several languages, imperative and functional. The languages are chosen because of the interest of their features, and not necessarily because of their wide use. We will touch on Ada, C++, C#, Java, LISP, ML, Python, Scheme, and mention many others.    Course Outline     Prerequisites  Undergraduate courses in data structures and algorithms, familiarity and programming experience with one of the following: C, C++, Ada,Java, or Pascal.    Course Work  Programming assignments, midterm, final examination. Assignments count for  40% of the grade, but you must hand in all assignments.  Textbook   required:   Michael Scott: Programming Language Pragmatics (Morgan Kaufman 2009)   This is a excellent recent text that covers both language design and compiler fundamentals. In your readings for this course you don't need to study sections that deal with translation and compiler construction issues, but that material is interesting, and you will examine it in more detail when you take the Compiler Construction course. The latest edition of the book has just appeared, but you can use an earlier edition if you have a copy of it.  Recommended :     John Barnes: Programming in Ada2005 Addison Wesley   We will mention Ada in several contexts because the language design highlights some fundamental issues about programming in general. This is the standard text on the language. We will also use on-line materials listed below.   You must have some good text on C++ and on Java. For C++ the 3rd edition of Stroustrup: the C++ programming Language, is the standard reference. For Java, the language definition is given in: Gosling, Joy and Steele: the Java Language Specification. For both languages, there are several introductory texts by Horstmann that are very well-written, and innumerable others.   We will discuss functional languages, specifically Scheme and ML, for which there is abundant on-line documentation. The older book by Ravi Sethi: Programming Languages, Concepts and Constructs, has several good chapters on functional languages. For ML, a good pragmatic reference is \"ML for the working Programmer\" by Paulson.   We will discuss scripting and so-called very high level languages, and focus on Python and Perl, There is abundant on-line documentation for both, and several programming texts and users guides from O'Reilly.   Class list  All students should register themselves with the class list, which is used for all technical discussions concerning the course. To register, go to the following web page, and follow the instructions:     g22_2110_001_fa11 class list    You can also subscribe by sending an e-mail message to  majordomo@cs.nyu.edu . The contents of the message should be the single line:     subscribe csci_ga_g22_2110_001_fa11   you will be notified in return that you are a list participant. Please send all your questions to this list (not to the instructor) so that everyone can participate.    Software  You are free to do the programming assignments on any machine you choose, either the NYU servers, some other machine at work, or a personal computer at home. For each programming assignment, Indicate what compiler you used.  Assignments  Assignments must be submitted electronically. Send plain text, not Word files or other exotic formats. For executable programs, provide the test data and the output, and indicate the compiler you used. Send the assignments to:   schonberg@cs.nyu.edu   nyu.cs.2110@gmail    Assignment 1     Assignment 2     Assignment 3     Assignment 4     Assignment 5     Assignment 6     Assignment 7"}, {"content": "G22.2110-001 Programming Languages            G22.2110-001 Programming Languages     Spring 2010  Class: Tuesdays, 7:10&ndash;9:00pm, WWH 102    Instructor: Robert Grimm , rgrimm@cs.nyu.edu  Office hours: Wednesdays, 2&ndash;3pm, 715 Broadway, room 711    Recitation: Ayse Naz Erkan , Mondays, 8:10&ndash;9:00pm, WWH 101        [ Overview |  Syllabus |  Homework |  Resources ]      Overview    This course explores the design, implementation, and use of mainstream programming languages. Topics include syntax, naming, scopes, state, types, abstraction through procedures, objects, and modules, as well as concurrency. Languages covered include Python, Scheme, C, Java, and O'Caml, with programming assignments for all these languages.    Textbook . Programming Language Pragmatics (PLP), 3rd edition, by Michael L. Scott.    Mailing List . Please subscribe to the class mailing list g22_2110_001_sp10 . Be sure to email your class-related questions to this list and not just the instructor.    Grading Policy . Approximately 30% for individual assignments, 30% for the midterm, and 40% for the final exam.    Collaboration Policy . Generally, please adhere to the department's  academic integrity policy . Specifically, you are encouraged to collaborate on homework assignments with other students in the course. You must, however, write up and hand in your own solutions, which clearly identify any collaborators.    Acknowledgements . This course builds on the experiences and notes of Clark Barrett, Allan Gottlieb, Martin Hirzel, and Ed Osinski. Previous versions of this course include  Spring '07 ,  Fall '08 , and  Fall '09 .     Syllabus   The syllabus will change, so please check this page at least once a week.      (Jan 19) Introduction to programming languages, syntax of programming languages. Read PLP 1 &amp; 2.1.  Slides .     (Jan 26) Names, scopes, and bindings. Read PLP 3.1&ndash;3.4 excluding 3.3.4 and 3.3.5.  Slides .  parser.py .     (Feb 2) Control flow. Read PLP 6.1&ndash;6.5.  Slides .  driver.py .     (Feb 9) Functions and procedures. Read PLP 6.6, 8.1&ndash;8.3.  Slides .    Abelson and Sussman on  the metacircurlar  evaluator   Our own version: mceval.scm        (Feb 16) Functional programming. Read PLP 10, including 10.6.1 on the CD, and Jung on Lambda Calculus .  Slides .     (Feb 23) Types. Read PLP 7.  Slides .  list.ml and plist.ml .     (Mar 2) More types. Read PLP 7.  Slides .  lambda.ml .     (Mar 9) In-class midterm exam. The exam is closed notes &amp; book. You have time for the entire period.     (Mar 16) Spring break.     (Mar 23) Program structure. Read PLP 3.3.4, 3.3.5, 3.7.  Slides .  tool.c .     (Mar 30) Object-oriented programming. Read PLP 9.  Slides .  pointer.c .     (Apr 6) More object-oriented programming. Read PLP 9.  Slides .     (Apr 13) Generic programming. Read PLP 8.4.  Slides .  Calculator.java .     (Apr 20) Exceptions. Read PLP 8.5.  Slides .  Transcript .     (Apr 27) Concurrency. Read PLP 12.  Slides .     (May 4) Q&amp;A session to help with final preparation.  Test.java and test.ml .     (May 11) Final exam. 7:10&ndash;9:00pm, Silver 206 .       Homework       Python: regular expressions and context-free grammars . Assigned 1/26. Due 2/9.    Scheme: call-by-value, call-by-name, and call-by-need . Assigned 2/9. Due 2/23.    OCaml: the simply typed lambda calculus . Assigned 2/23. Due 3/23.    C: Portable Network Graphics (PNG) . Assigned 3/23. Due 4/6.    Java: class signatures . Assigned 4/6. Due 4/27.        Resources   Languages and their implementations:     Python   Scheme     Gambit Scheme   PLT Scheme  (in R5RS mode)   MIT Scheme     gcc for C/C++   Java   O'Caml"}, {"content": "Programming Languages                   Programming Languages    CSCI-GA.2110-003    NYU, Graduate Division, Computer Science Course - Fall 2012              Information           Class Meetings Wed 7:10-9pm in CIWW 102          Recitations Thu 8:10-9pm in CIWW 102          First Lecture Sep 5, 2012          Last Lecture Dec 6, 2012           Midterm Exam Oct 17, 2012,   7:10-9pm in CIWW 102           Final Exam Dec 19, 2012,   7:10-9pm in CIWW 102          Instructor Thomas   Wies , office hours: Thu 3:00-4:00pm in CIWW 407, or by appointment          Teaching Assistant Sahil   Vora, office hours: Thu 7:00-8:00pm in CIWW 412            News        10/30/12 - Due to the closing of NYU,   the class on Wed 10/31/12 and the recitations on Thu   11/01/12 have been cancelled.        Course Description        Design and use of mainstream programming languages: naming,  scoping, type models, control structures, procedural  abstractions, modularization. Implementation issues and  runtime organization. We will study languages such as C, C++,  Java, Scala, Scheme, and ML. The course work includes  extensive programming exercises in various languages.       Prerequisites       Undergraduate courses in data structures and algorithms or  equivalent, as well as familiarity and programming experience  in a high-level language like C, C++, Java, or a similar  language.       Syllabus        Syntax    Names, Scopes, and Bindings    Control Flow    Subprograms and Control Abstraction    Functional Programming    Types    Object-Oriented Programming    Generic Programming    Exceptions    Concurrency        Reading Materials     Required Reading        Programming   Language Pragmatics, Third Edition    by Michael L. Scott, Morgan Kaufmann Publishers, 2009        Recommended Reading        Types   and Programming Languages by Benjamin C. Pierce, The MIT   Press, 2002    ML for the   Working Programmer, 2nd Edition by Lawrence C. Paulson, Cambridge   University Press, 1996    Programming   in Scala, Second Edition    by Martin Odersky, Lex Spoon and Bill Venners, Artima, 2010        Scheme Resources        Scheme   Tutorial    Scheme    Reference Manual    DrRacket        Standard ML Resources        Programming   in Standard ML by Robert Harper, CMU.    Standard ML of New   Jersey (SML/NJ)    Standard ML   Basis Library        Scala Resources        Programming   in Scala, Second Edition    by Martin Odersky, Lex Spoon and Bill Venners, Artima, 2010    Official Scala web site    Scala Standard Library        Syllabus            Week     Date     Topics     Materials           1     09/05     Programming Languages Introduction; Syntax     Slides ;   Readings: PLP, ch. 1-2           09/06     No recitations           2     09/12     Names, Bindings, Scopes     Slides ;   Readings: PLP, ch. 3.1-3.4 except 3.3.4 and 3.3.5           09/13     Recitations           3     09/19     Basic Control Flow Mechanisms     Slides ;   Readings: PLP, ch. 6.1-6.5           09/20     Recitations           4     09/26     Subprograms and Control Abstraction     Slides ;   Readings: PLP, ch. 3.6, 6.6, and 8.1-8.3           09/27     Recitations           5     10/03     Functional Programming     Slides ;    Lambda    calculus ; Scheme code     Readings: PLP, ch. 10 including 10.6.1 on the CD              10/04     Recitations           6     10/10     Types     Slides ;    Readings: PLP, ch. 7              10/11     Recitations           7     10/17     Midterm exam                   10/18     No recitations           8     10/24     ML     Slides ; Code ;   Readings: PLP, ch. 10;    Optional: Programming   in Standard ML ; ML for the Working   Programmer              10/25     Recitations           9     10/30     Class cancelled (rescheduled to Thu, 12/06)                   11/01     Recitations cancelled           10     11/07     Modules and Program Structure         Slides ;     Stack.sml ;    PriorityQueue.sml ;     Readings: PLP, ch. 3.3.4, 3.3.5, 3.8              11/08     Recitations           11     11/14     No class (rescheduled to Thu, 11/29)                       11/15     Recitations           12     11/21     Object-Oriented Programming     Slides ;     Readings: PLP, ch. 9, 3.6.3              11/22     No recitations (Thanksgiving)           13     11/28     Scala         Slides               11/29         7:10-8pm: Recitations (in CIWW 101)     8:10-9pm: Class (in CIWW 102)        Slides ;     Readings: PLP, ch. 8.5              14     12/05     Generic Programming         Slides ; Readings: PLP, ch. 8.4              12/06         7:10-8pm: Recitations (in CIWW 101)     8:10-9pm: Class (in CIWW 102)                     15     12/12     No class (Monday schedule)                       11/13     Recitations           Homework        For submission of solutions, please follow the instructions   on the assignment sheets. Sample solutions to homework   assignments will be available after the submission deadline has passed.          Homework   1       Homework   2       Homework   3       Homework   4       Homework   5       Homework   6       Homework   7 ;   Material: BIG_NAT.sig ,    BigNat.sml          Homework   8    Homework   9 Material: calendar.scala ,    control.scala    (due 12/12)      Homework   10 (due 12/13)       Grading     Weekly Assignments (30%), midterm exam (30%), final exam (40%).     Academic Integrity        Please review   the    departmental academic integrity policy . In this course,   you may discuss homework problems and assignments with other   students, but the work you turn in must be your own. Do not   copy another student's work. Also, you should consult the   instructor before using materials or code other than that   provided in class. Copying code or other work without giving   appropriate acknowledgment is a serious offense with   consequences ranging from no credit to potential expulsion.                         Quick Links              Instructor's web page    CS Fall 2012 Courses"}]}]