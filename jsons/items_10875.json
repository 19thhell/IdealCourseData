[{"detail": [{"content": "Compiler Construction/Spring 2015        Compiler Construction   CSCI-GA.2130-001/Spring 2015    General information  / Materials  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Mondays, 7:10-9:00pm, CIWW 202   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Mondays, 6-7pm, CIWW 328, or by appointment   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Grader:   Jos&eacute; Pablo Cambronero (jpc485@nyu.edu)   Grader's office hours:   Thursdays, 6-7pm, CIWW 229 (Computer Lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_sp15 .        Materials      Dragon Book     Compilers: Principles, Techniques, and Tools (2nd Edition) ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2006.   HACS   Manual: Introduction to Compiler Generation Using HACS    by Rose. Available from crsx.org/hacs.pdf (under continuous revision so check the version number).      Software:   HACS 1.0.2 ( reference version for pr1 ),   HACS 1.0.13 ( reference version for pr2 ),   HACS 1.0.17 ( updated reference version for pr3 ).   ARM32   ARM32 subset documentation: MinARM32.pdf .   Full ARM32 documentation (background information): Architecture , Refcard .       Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use the compiler-generator tool HACS (part of the open source  CRSX project).     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H n references to sections of the HACS manual and A n references to the ARM subset  (both quoted in the materials above).    Note that the contents of every provided link is subject to change up to end of the day of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Mon 1/26    1. Introduction    1.1-1.2 (12p), H1-2    hw1 ( solution )             Mon 2/2    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H3    hw2 ( solution )             Mon 2/9    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H4    hw3 ( solution )      Project Milestone 1 : pr1 due 2/27,   samples.zip (corrected) .    solution ( Pr1Rose.hx ).         Mon 2/16    Presidents Day                  Mon 2/23    4. Syntax-directed translation and recursive HACS    2.3 + 5.4 (21p), H5, H9    hw4 ( solution , Bool.hx , Desk.hx )         Mon 3/2    5. Syntax-directed definitions and type analysis    5.1-5.3 + 6.3, 6.5 (40p)    hw5 ( solution )      Project Milestone 2 : pr2 due 3/9 and 3/31, Pr2Base.hx .    SDD solution ( LaTeX source , solution ).         Mon 3/9    6. Name analysis and SDD to HACS translation    1.6 + 2.7 (15p), H6-8    hw6 ( solution )         Mon 3/16    Spring Recess                  Mon 3/23    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p)    hw7 ( solution )         Mon 3/30    Midterm exam                  Mon 4/6    8. Runtime environments    7.1-7.4 (36p), A1    hw8 ( solution )             Mon 4/13    9. Code generation    8.1-8.4 (28pp), A2    hw9 ( solution1 , solution2 )      Project Milestone 3 : pr3 due 4/20 and 5/1,   Pr3Base.hx (updated!),   samples.zip .    pr3-boxes solution .         Mon 4/20    10. Register allocation    8.6 + 8.8 (11p)    hw10          Mon 4/27   11. Bottom-up syntax analysis   4.5 + 4.8 (17p)   hw11*         Mon 5/4   12. Optimization   8.5 + 8.7 + 9.1 (26p)                 Mon 5/11   Final exam                     * Projected.      Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned) as well as documentation requirements. Each milestone  builds on code from the previous milestone, however, reference code  will be made available before each as an alternative to your own  code from the previous stage. Project milestones must be submitted  into the NYUClasses system no later than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Fall '14 (Eva Rose and Kristoffer Rose) ,  Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}, {"content": "Compiler Construction (CSCI-GA.2130-001) Fall 2014        Compiler Construction   CSCI-GA.2130-001, Fall 2014     General information  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Thursdays, 5:10-7:00pm, CIWW 312   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Thursdays, 4-5pm, CIWW 328   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Text book:    Compilers: Principles, Techniques, and Tools (2nd Edition) , aka the Dragon Book ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2007.   Grader:   Weicheng Ma (wm724@nyu.edu)   Grader's office hours:   Tuesday, 6-7pm, in CIWW 229 (the computer lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_fa14 .        Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use a custom NYU version of the compiler-generator infrastructure  CRSX , called HACS.     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H references to sections of the HACS documentation .    Note that the contents of every provided link is subject to change up to end of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Thur 9/4    1. Introduction    1.1-1.2 (12p)    hw1              Thur 9/11    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H1+H2    hw2              Thur 9/18    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H3    hw3     pr1 (due 10/6) samples (zip) .         Thur 9/25    4. Syntax-directed translation (SDT)    2.3 + 5.1-5.3 (30p), H4    hw4              Thur 10/2    5. Name analysis    1.6 + 2.7 (15p), H7    hw5              Thur 10/9    6. Type analysis    6.3 + 6.5 (20p), H6    hw6     pr2a (due 11/3)         Thur 10/16    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p), H5    hw7     pr2b (due 11/25)   Pr2Base.hx    sample (zip)          Thur 10/23   Midterm exam                      Thur 10/30    8. Runtime environments    7.1-7.4 (36p)    hw8              Thur 11/6    9. Code generation    8.1-8.4 + 8.6 (34p)    hw9              Thur 11/13    10. Register allocation    8.8 (5p)    hw10              Thur 11/20    11. Bottom-up syntax analysis    4.5-4.6 (26p)    hw11              Thur 11/27   Thanksgiving recess                      Thur 12/4    12. Optimization    8.5 + 8.7 + 9.1 (26p)        pr3 (due 12/16) Pr3Base.hx samples (zip) hints          Thur 12/11    13. Burka: The Shape of an Object             final announcements          Thur 12/18   Final exam                     Supporting Materials      HACS : Latest Manual (pdf) ,   Latest release (zip) .  ARM :   Class Minimal ARM32 subset ,   Architecture Reference Manual ,   Assembler Guide and   Reference Card ,   Procedure Call Standard .     Guest Lecture   This year, the guest lecture is given by Peter Burka:     The Shape of an Object    The layout of structures in memory is often an after-thought in the early designs of languages and their runtime systems. However there are a surprising number of choices available to the designer, with interesting trade-offs in speed, determinism, memory requirements, memory-management options, and other capabilities. Some of these are old techniques known to assembly programmers of yore, but forgotten by most high-level programmers. Others are still largely academic.   Peter worked at IBM for 14 years, mostly on the J9 Java Virtual Machine team. In this talk we'll explore some of the techniques used to optimize object shape in the J9 VM, as well as some more speculative options.        Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned). Each milestone builds on code from the previous  milestone, however, reference code will be made available before  each as an alternative to your own code from the previous stage.  Project milestones must be submitted into NYUClasses system no later  than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}]},
{"detail": [{"content": "Compiler Construction/Spring 2015        Compiler Construction   CSCI-GA.2130-001/Spring 2015    General information  / Materials  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Mondays, 7:10-9:00pm, CIWW 202   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Mondays, 6-7pm, CIWW 328, or by appointment   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Grader:   Jos&eacute; Pablo Cambronero (jpc485@nyu.edu)   Grader's office hours:   Thursdays, 6-7pm, CIWW 229 (Computer Lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_sp15 .        Materials      Dragon Book     Compilers: Principles, Techniques, and Tools (2nd Edition) ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2006.   HACS   Manual: Introduction to Compiler Generation Using HACS    by Rose. Available from crsx.org/hacs.pdf (under continuous revision so check the version number).      Software:   HACS 1.0.2 ( reference version for pr1 ),   HACS 1.0.13 ( reference version for pr2 ),   HACS 1.0.17 ( updated reference version for pr3 ).   ARM32   ARM32 subset documentation: MinARM32.pdf .   Full ARM32 documentation (background information): Architecture , Refcard .       Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use the compiler-generator tool HACS (part of the open source  CRSX project).     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H n references to sections of the HACS manual and A n references to the ARM subset  (both quoted in the materials above).    Note that the contents of every provided link is subject to change up to end of the day of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Mon 1/26    1. Introduction    1.1-1.2 (12p), H1-2    hw1 ( solution )             Mon 2/2    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H3    hw2 ( solution )             Mon 2/9    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H4    hw3 ( solution )      Project Milestone 1 : pr1 due 2/27,   samples.zip (corrected) .    solution ( Pr1Rose.hx ).         Mon 2/16    Presidents Day                  Mon 2/23    4. Syntax-directed translation and recursive HACS    2.3 + 5.4 (21p), H5, H9    hw4 ( solution , Bool.hx , Desk.hx )         Mon 3/2    5. Syntax-directed definitions and type analysis    5.1-5.3 + 6.3, 6.5 (40p)    hw5 ( solution )      Project Milestone 2 : pr2 due 3/9 and 3/31, Pr2Base.hx .    SDD solution ( LaTeX source , solution ).         Mon 3/9    6. Name analysis and SDD to HACS translation    1.6 + 2.7 (15p), H6-8    hw6 ( solution )         Mon 3/16    Spring Recess                  Mon 3/23    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p)    hw7 ( solution )         Mon 3/30    Midterm exam                  Mon 4/6    8. Runtime environments    7.1-7.4 (36p), A1    hw8 ( solution )             Mon 4/13    9. Code generation    8.1-8.4 (28pp), A2    hw9 ( solution1 , solution2 )      Project Milestone 3 : pr3 due 4/20 and 5/1,   Pr3Base.hx (updated!),   samples.zip .    pr3-boxes solution .         Mon 4/20    10. Register allocation    8.6 + 8.8 (11p)    hw10          Mon 4/27   11. Bottom-up syntax analysis   4.5 + 4.8 (17p)   hw11*         Mon 5/4   12. Optimization   8.5 + 8.7 + 9.1 (26p)                 Mon 5/11   Final exam                     * Projected.      Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned) as well as documentation requirements. Each milestone  builds on code from the previous milestone, however, reference code  will be made available before each as an alternative to your own  code from the previous stage. Project milestones must be submitted  into the NYUClasses system no later than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Fall '14 (Eva Rose and Kristoffer Rose) ,  Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}, {"content": "Compiler Construction (CSCI-GA.2130-001) Fall 2014        Compiler Construction   CSCI-GA.2130-001, Fall 2014     General information  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Thursdays, 5:10-7:00pm, CIWW 312   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Thursdays, 4-5pm, CIWW 328   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Text book:    Compilers: Principles, Techniques, and Tools (2nd Edition) , aka the Dragon Book ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2007.   Grader:   Weicheng Ma (wm724@nyu.edu)   Grader's office hours:   Tuesday, 6-7pm, in CIWW 229 (the computer lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_fa14 .        Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use a custom NYU version of the compiler-generator infrastructure  CRSX , called HACS.     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H references to sections of the HACS documentation .    Note that the contents of every provided link is subject to change up to end of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Thur 9/4    1. Introduction    1.1-1.2 (12p)    hw1              Thur 9/11    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H1+H2    hw2              Thur 9/18    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H3    hw3     pr1 (due 10/6) samples (zip) .         Thur 9/25    4. Syntax-directed translation (SDT)    2.3 + 5.1-5.3 (30p), H4    hw4              Thur 10/2    5. Name analysis    1.6 + 2.7 (15p), H7    hw5              Thur 10/9    6. Type analysis    6.3 + 6.5 (20p), H6    hw6     pr2a (due 11/3)         Thur 10/16    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p), H5    hw7     pr2b (due 11/25)   Pr2Base.hx    sample (zip)          Thur 10/23   Midterm exam                      Thur 10/30    8. Runtime environments    7.1-7.4 (36p)    hw8              Thur 11/6    9. Code generation    8.1-8.4 + 8.6 (34p)    hw9              Thur 11/13    10. Register allocation    8.8 (5p)    hw10              Thur 11/20    11. Bottom-up syntax analysis    4.5-4.6 (26p)    hw11              Thur 11/27   Thanksgiving recess                      Thur 12/4    12. Optimization    8.5 + 8.7 + 9.1 (26p)        pr3 (due 12/16) Pr3Base.hx samples (zip) hints          Thur 12/11    13. Burka: The Shape of an Object             final announcements          Thur 12/18   Final exam                     Supporting Materials      HACS : Latest Manual (pdf) ,   Latest release (zip) .  ARM :   Class Minimal ARM32 subset ,   Architecture Reference Manual ,   Assembler Guide and   Reference Card ,   Procedure Call Standard .     Guest Lecture   This year, the guest lecture is given by Peter Burka:     The Shape of an Object    The layout of structures in memory is often an after-thought in the early designs of languages and their runtime systems. However there are a surprising number of choices available to the designer, with interesting trade-offs in speed, determinism, memory requirements, memory-management options, and other capabilities. Some of these are old techniques known to assembly programmers of yore, but forgotten by most high-level programmers. Others are still largely academic.   Peter worked at IBM for 14 years, mostly on the J9 Java Virtual Machine team. In this talk we'll explore some of the techniques used to optimize object shape in the J9 VM, as well as some more speculative options.        Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned). Each milestone builds on code from the previous  milestone, however, reference code will be made available before  each as an alternative to your own code from the previous stage.  Project milestones must be submitted into NYUClasses system no later  than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}]},
{"detail": [{"content": "Compiler Construction/Spring 2015        Compiler Construction   CSCI-GA.2130-001/Spring 2015    General information  / Materials  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Mondays, 7:10-9:00pm, CIWW 202   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Mondays, 6-7pm, CIWW 328, or by appointment   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Grader:   Jos&eacute; Pablo Cambronero (jpc485@nyu.edu)   Grader's office hours:   Thursdays, 6-7pm, CIWW 229 (Computer Lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_sp15 .        Materials      Dragon Book     Compilers: Principles, Techniques, and Tools (2nd Edition) ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2006.   HACS   Manual: Introduction to Compiler Generation Using HACS    by Rose. Available from crsx.org/hacs.pdf (under continuous revision so check the version number).      Software:   HACS 1.0.2 ( reference version for pr1 ),   HACS 1.0.13 ( reference version for pr2 ),   HACS 1.0.17 ( updated reference version for pr3 ).   ARM32   ARM32 subset documentation: MinARM32.pdf .   Full ARM32 documentation (background information): Architecture , Refcard .       Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use the compiler-generator tool HACS (part of the open source  CRSX project).     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H n references to sections of the HACS manual and A n references to the ARM subset  (both quoted in the materials above).    Note that the contents of every provided link is subject to change up to end of the day of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Mon 1/26    1. Introduction    1.1-1.2 (12p), H1-2    hw1 ( solution )             Mon 2/2    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H3    hw2 ( solution )             Mon 2/9    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H4    hw3 ( solution )      Project Milestone 1 : pr1 due 2/27,   samples.zip (corrected) .    solution ( Pr1Rose.hx ).         Mon 2/16    Presidents Day                  Mon 2/23    4. Syntax-directed translation and recursive HACS    2.3 + 5.4 (21p), H5, H9    hw4 ( solution , Bool.hx , Desk.hx )         Mon 3/2    5. Syntax-directed definitions and type analysis    5.1-5.3 + 6.3, 6.5 (40p)    hw5 ( solution )      Project Milestone 2 : pr2 due 3/9 and 3/31, Pr2Base.hx .    SDD solution ( LaTeX source , solution ).         Mon 3/9    6. Name analysis and SDD to HACS translation    1.6 + 2.7 (15p), H6-8    hw6 ( solution )         Mon 3/16    Spring Recess                  Mon 3/23    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p)    hw7 ( solution )         Mon 3/30    Midterm exam                  Mon 4/6    8. Runtime environments    7.1-7.4 (36p), A1    hw8 ( solution )             Mon 4/13    9. Code generation    8.1-8.4 (28pp), A2    hw9 ( solution1 , solution2 )      Project Milestone 3 : pr3 due 4/20 and 5/1,   Pr3Base.hx (updated!),   samples.zip .    pr3-boxes solution .         Mon 4/20    10. Register allocation    8.6 + 8.8 (11p)    hw10          Mon 4/27   11. Bottom-up syntax analysis   4.5 + 4.8 (17p)   hw11*         Mon 5/4   12. Optimization   8.5 + 8.7 + 9.1 (26p)                 Mon 5/11   Final exam                     * Projected.      Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned) as well as documentation requirements. Each milestone  builds on code from the previous milestone, however, reference code  will be made available before each as an alternative to your own  code from the previous stage. Project milestones must be submitted  into the NYUClasses system no later than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Fall '14 (Eva Rose and Kristoffer Rose) ,  Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}, {"content": "Compiler Construction (CSCI-GA.2130-001) Fall 2014        Compiler Construction   CSCI-GA.2130-001, Fall 2014     General information  / Description  / Schedule  / Elements  / Grading  / See also      General Information       Lecture:   Thursdays, 5:10-7:00pm, CIWW 312   Instructors:   Eva Rose (evarose@cs.nyu.edu) and   Kristoffer H. Rose (krisrose@cs.nyu.edu)   Instructors's office hours:   Thursdays, 4-5pm, CIWW 328   Prerequisites:   G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Text book:    Compilers: Principles, Techniques, and Tools (2nd Edition) , aka the Dragon Book ,   by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2007.   Grader:   Weicheng Ma (wm724@nyu.edu)   Grader's office hours:   Tuesday, 6-7pm, in CIWW 229 (the computer lab)   Mailing list:    http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_fa14 .        Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use a custom NYU version of the compiler-generator infrastructure  CRSX , called HACS.     Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Paragraph references are to the dragon book, except H references to sections of the HACS documentation .    Note that the contents of every provided link is subject to change up to end of the lecture it is associated with.             Date    Lecture topic    Reading    Homework    Project milestone          Thur 9/4    1. Introduction    1.1-1.2 (12p)    hw1              Thur 9/11    2. Lexical analysis    3.1-3.4,3.6,3.7 (50p), H1+H2    hw2              Thur 9/18    3. Top-down syntax analysis    2.4 + 4.1-4.4 (50p), H3    hw3     pr1 (due 10/6) samples (zip) .         Thur 9/25    4. Syntax-directed translation (SDT)    2.3 + 5.1-5.3 (30p), H4    hw4              Thur 10/2    5. Name analysis    1.6 + 2.7 (15p), H7    hw5              Thur 10/9    6. Type analysis    6.3 + 6.5 (20p), H6    hw6     pr2a (due 11/3)         Thur 10/16    7. Intermediate code generation    6.1, 6.2, 6.4, 6.6, 6.9 (34p), H5    hw7     pr2b (due 11/25)   Pr2Base.hx    sample (zip)          Thur 10/23   Midterm exam                      Thur 10/30    8. Runtime environments    7.1-7.4 (36p)    hw8              Thur 11/6    9. Code generation    8.1-8.4 + 8.6 (34p)    hw9              Thur 11/13    10. Register allocation    8.8 (5p)    hw10              Thur 11/20    11. Bottom-up syntax analysis    4.5-4.6 (26p)    hw11              Thur 11/27   Thanksgiving recess                      Thur 12/4    12. Optimization    8.5 + 8.7 + 9.1 (26p)        pr3 (due 12/16) Pr3Base.hx samples (zip) hints          Thur 12/11    13. Burka: The Shape of an Object             final announcements          Thur 12/18   Final exam                     Supporting Materials      HACS : Latest Manual (pdf) ,   Latest release (zip) .  ARM :   Class Minimal ARM32 subset ,   Architecture Reference Manual ,   Assembler Guide and   Reference Card ,   Procedure Call Standard .     Guest Lecture   This year, the guest lecture is given by Peter Burka:     The Shape of an Object    The layout of structures in memory is often an after-thought in the early designs of languages and their runtime systems. However there are a surprising number of choices available to the designer, with interesting trade-offs in speed, determinism, memory requirements, memory-management options, and other capabilities. Some of these are old techniques known to assembly programmers of yore, but forgotten by most high-level programmers. Others are still largely academic.   Peter worked at IBM for 14 years, mostly on the J9 Java Virtual Machine team. In this talk we'll explore some of the techniques used to optimize object shape in the J9 VM, as well as some more speculative options.        Elements   The course includes the following elements:    There are homework assignments most weeks (the  schedule indicates when homework is assigned). These test your  understanding of material beyond the immediate hands-on knowledge  needed for the project. Each homework assignment is made available  after the appropriate lecture, and must be submitted into the  NYUClasses system before the specified deadline, typically in the  morning on the day of the subsequent lecture.      There are project milestones, which involve a  substantial amount of programming (the schedule indicates when they  are assigned). Each milestone builds on code from the previous  milestone, however, reference code will be made available before  each as an alternative to your own code from the previous stage.  Project milestones must be submitted into NYUClasses system no later  than the specified due date.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines  at NYU , as we will test the code there.    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Grading     Final grades will be calculated to 15% from homeworks,  45% from the project, 15% from the midterm exam, and  25% from the final exam.     See Also    NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/fall2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Spring'14 (Kristoffer Rose with Eva Rose) ,  Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html"}, {"content": "Compiler Construction (CSCI-GA.2130-001) Spring 2014        Compiler Construction   CSCI-GA.2130-001, Spring 2014     General information /  Description /  Elements /  Schedule /  Grading /  See also      General Information       Lecture:  Mondays, 7:10-9:00pm, CIWW 202   Instructors:   Kristoffer H. Rose (krisrose@cs.nyu.edu)  with Eva Rose   Instructors's office hours:  Mondays 6:00-7:00pm, Room CIWW 328, or by appointment   Prerequisites:  G22.1170 (algorithms), G22.2110 (programming languages), and G22.2250 (operating systems)   Text book:   Compilers: Principles, Techniques, and Tools (2nd Edition) , aka the Dragon Book ,  by Aho/Lam/Sethi/Ullman. Addison-Wesley , 2007.   Grader:   Weicheng Ma   Grader's office hours:   Wednesday 5:30-6:30pm, Room CIWW 230   Mailing list:   http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2130_001_sp14         Description    The course description below is quoted from the Graduate School of Arts and Science Bulletin :      This is a capstone course based on compilers and modern programming languages. The topics covered include structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques, including recursive descent and LR parsing; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. The course includes a special compiler-related capstone project, which ties together concepts of algorithms, theory (formal languages), programming languages, software engineering, computer architecture, and other subjects covered in the MS curriculum. This project requires a substantial semester-long programming effort, such as construction of a language compilation or translation system that includes lexical and syntactic analyzers, a type checker, and a code generator.      Specifically, the course will follow the  Dragon Book  (second edition) as the text book. In the semester-long programming project, we will implement a fully functional compiler for a simple programming language. The implementation will use a custom NYU version of the compiler-generator infrastructure  CRSX , called HACS .     Elements   The course includes the following elements:    There are homework assignments most weeks.  These test your understanding of material beyond the immediate hands-on knowledge needed for the project.  Each homework assignment is made available at the lecture one week before it is due.      There are project milestones every 2-3 weeks, which involve a substantial amount of programming.  Project milestones are made available two weeks before their due date.   Each milestone builds on code from the previous milestone; reference  code will be made available before each milestone as an alternative to  your own code from the previous stage.    You can develop the project on your own machine, but must make sure  that it works on the energon1.cims.nyu.edu to energon4.cims.nyu.edu  machines at NYU .    There are two exams: a midterm and a final . The exams  cover similar questions as the homeworks. The final exam is  cumulative : it will cover material from the entire semester.        Schedule    Here is the schedule. Each lecture links to the slides for that lecture, as they become available. Each homework and project milestone deliverable is linked from the due week . Paragraph references are to the dragon book, except H references that refer to sections of the hacs-gently.pdf document provided with HACS .     Date  Lecture topic                      Reading          Mon 1/27 Introduction                1.1-1.2 (12p), H1        Mon 2/3 Lexical analysis               3.1-3.6 (43p), H2        Mon 2/10 Top-down syntax analysis             2.4 + 4.1-4.4 (50p), H3      Mon 2/17 Presidents Day                     &mdash;          Mon 2/24 Syntax-directed translation (SDT)           2.3 + 2.5 + 5.1-5.3 (37p), H4     Mon 3/3 Name analysis                1.6 + 2.7 (15p), H5+H6       Mon 3/10 Type analysis                6.3 + 6.5 (20p)        Mon 3/17 Spring Recess---no class                  &mdash;          Mon 3/24 Intermediate code generation            6.1, 6.2, 6.4, 6.6, 6.9 (34p), H7+8    Mon 3/31 Midterm exam                   &mdash;       Mon 4/7 Runtime environments ( extra slides ) 7.1-7.4 (36p)       Mon 4/14 Code generation               8.1-8.4 + 8.6 (34p)       Mon 4/21 Register allocation              8.8 (5p)          Mon 4/28 Optimization                8.5 + 8.7 + 9.1 (26p)       Mon 5/5 Bottom-up syntax analysis             4.5 + 4.8 (17p)        Mon 5/12 Final exam                    &mdash;       Mon 5/19 GSAS Graduation---no class                  &mdash;                  Grading   Final grades will be calculated to 10% from homeworks,  50% from the project, 10% from the midterm exam, and  30% from the final exam.   Academic integrity   Please carefully read the CIMS department's academic integrity policy .     You are encouraged to collaborate on homework assignments and project   milestones. But you must write up and turn in your own answers.   Also, you must clearly indicate who you collaborated with.  During the midterm and the final exam, you must not use any   reference material, and of course, you must not communicate with   your fellow students.  If we detect any incidents of cheating, we will report them   immediately to the department.     Assignment deadlines   All homework and project assignments will be due on Mondays at 9am unless a different time is distributed explictly. To submit homeworks, log into home.nyu.edu , go to Academic &rarr; NYU Classes &rarr; Compiler Construction &rarr; Assignments, and upload your file with answers there. Don't forget to click &ldquo;submit&rdquo; before the deadline, just &ldquo;upload&rdquo; is not enough. The policy for late assignments is as follows:     If you submit at least 1 minute late, but at most 3 hours   late, you receive 50% of the points for that homework or project milestone.  Otherwise, late homeworks or project milestones are only acceptable   if the lateness is caused by circumstances beyond your control,   such as illness or a missed flight.  In this case, you only get the points for the homework if   you provide official documentation, such as a doctor's   certificate, for the reason why your homework is late.     Official Updates   All official updates and changes are published on the class mailing list (cited at the top of the page).     See also    Documentation:      The Dragon book, 2nd edition:   http://dragonbook.stanford.edu/   HACS:   http://krisrose.net/hacs.zip   Introduction to ARM Subset:   Not Yet Available       Supplementary Documentation:      ARM Instruction Set Summary:   http://ozark.hendrix.edu/~burch/cs/230/arm-ref.pdf   ARM Calling Conventions:   http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042e/IHI0042E_aapcs.pdf   Useful ARM Reference Manual:   https://www.scss.tcd.ie/john.waldron/3d1/arm_arm.pdf      NYU Information:       Machines at Courant:   http://cims.nyu.edu/webapps/content/systems/resources/computeservers     Graduate cs.nyu.edu courses:   http://cs.nyu.edu/webapps/spring2014/Graduate/courses    Graduate cs.nyu.edu calendar:   http://cs.nyu.edu/webapps/Graduate/calendar    Previous Incarnations:   Fall'13 (Martin Hirzel and Kristoffer Rose) ,  Spring'13 (Hubertus Franke) ,  Fall'12 (Mohamed Zahran) ,  Fall'11 (Martin Hirzel) ,  Spring'09 (Allan Gottlieb)    Academic integrity policy:   http://cs.nyu.edu/web/Academic/Graduate/academic_integrity.html        http://cs.nyu.edu/courses/spring14/CSCI-GA.2130-001/index.html  This file was last checked into CVS $Date: 2013/10/27 03:06:57 $ UTC (New York is at UTC-5)."}]}]