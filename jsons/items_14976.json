[{"detail": [{"content": "Transistors, Relays, and Controlling High-Current Loads | ITP Physical Computing                                                          ITP Physical Computing             Search                  Primary Menu       Skip to content       Syllabus Phys-comp List Topics What Is Physical Computing? Electronics Electricity: the Basics Transistors, Relays, and Controlling High-Current Loads Understanding DC Power Supplies  Microcontrollers Microcontrollers: The Basics Digital Input &#038; Output Analog Input Analog Output  Programming Programming Terms and Programming Environments Variables  Sensors: the Basics Serial Communication Asynchronous Serial Communication: The Basics Interpreting Serial Data Synchronous Serial Communication: The Basics  DC Motors DC Motors: The Basics Controlling Stepper Motors  Videos Videos: Electricity Videos: Tools Videos: Schematic Diagrams Videos: Sensors Videos: Digital and Analog Input and Output Videos: Serial Communication Videos: Relays, Transistors, and Motors Videos: Prototyping Methods and Tips  Labs Labs: Electronics Lab: Components Lab: Setting Up A Breadboard Lab: Switches Lab: Soldering Lab: Electronics  Labs: Arduino Digital and Analog Lab: Digital Input and Output with an Arduino Lab: Analog In with an Arduino Lab: Servo Motor Control with an Arduino Lab: Tone Output Using An Arduino Lab: Sensor Change Detection  Labs: Serial Communication Lab: Serial Output from an Arduino Lab: Two-way (Duplex) Serial Communication using an Arduino Lab: MIDI Output using an Arduino Lab: Arduino to DAW Lab: Serial Communication with Node.js Lab: SPI Communication With A Digital Potentiometer Lab: I2C Communication With An Infrared Temperature Sensor  Labs: Motors and Transistors Lab: Using a Transistor to Control a High Current Load Lab: Using a Transistor to Control High Current Loads with an Arduino Lab: DC Motor Control Using an H-Bridge Lab: Controlling a Stepper Motor With an H-Bridge  Labs: Mouse Control Lab: Mouse Control Lab: Mouse Control With Pushbuttons Lab: Mouse Control With Joystick  Resources Books GitHub Repository Parts Needed for Physical Computing Additional Useful Parts and Tools Other Useful Sites Suppliers Checkout Components at ITP LittleBits Resources  Sections Tom Igoe Class Oct 1 Afternoon  Benedetta Piantella MONDAY WEDNESDAY  Jeff Feddersen Arlene Ducao                                        Search for:                                                            Transistors, Relays, and Controlling High-Current Loads       \u00a0 last edited 4 Sept\u00a02014 by Tom Igoe.   Introduction Contents  1 Introduction  2 Relays  3 Transistors    Related video: High Current\u00a0Loads   When you&#8217;re using microcontrollers, you frequently need to control devices that need more electrical current than a microcontroller can supply. For this, you need electrical relays or transistors. These notes explain relays and transistors as they&#8217;re used for this purpose. In order to get the most out of these notes, you should know something about how electricity works , and you should know the basics of how a microcontroller works as well.   Relays   Related video: Relays   Digital output from a microcontroller is typically a low-amperage signal. For example, when you set\u00a0a pin HIGH, the voltage coming on\u00a0that pin is typically +3.3V or +5V, and the amperage that\u00a0it can source\u00a0is around 10 milliamps. This is fine if you\u2019re controlling an LED, whose required amperage is tiny. However, most devices you\u2019d want to control need\u00a0more current than that to operate. You need a component\u00a0in between your microcontroller and the device that can be controlled with this small voltage and amperage.\u00a0 Relays \u00a0and\u00a0 transistors \u00a0are most often used for this purpose. A relay is a switch that\u2019s controlled by a small electric current. Relays take advantage of \u00a0the fact that when you pass an electric current through a wire, a magnetic field is generated surrounding the wire as well. \u00a0This is called induction . When you place two pieces of ferrous metal\u00a0near a coil of wire and pass current through the wire, the magnetic field can move\u00a0the two pieces of metal towards each other. Those pieces of metal can form a switch, which\u00a0can be turned on and off by putting current through the coil.    Two relays, one whole and the other with the switch removed. The blue and white tube is the coil, and the glass vial contains the switch    Detail of the switch inside the relay, magnified 20x    \u00a0 In the illustration above, you can see that there&#8217;s no electrical connection between the microcontroller circuit that&#8217;s controlling the coil of the relay and the lamp circuit. This is another advantage that relays offer. A\u00a0schematic, of the relay circuit looks similar to the illustration above:  The current needed to move the shaft in the coil is very low (less than 10 milliamps) so the coil can be energized by an output pin of your\u00a0microcontroller. The current that can flow through the switch, however, is much higher. The lamp circuit is separate from the microcontroller. It uses a separate power source, with the amperage and voltage needed to turn on the lamp. The power source, the lamp, and the switch side of the relay are all placed in series. When the coil is energized, the leaves of the switch are\u00a0physically moved by the magnetic force created, the lamp circuit is completed, and the lamp turns on. Relays are also useful when you want to replace a switch in an existing electronic device. If you replace the switch with the coil of a relay, the microcontroller can control the device just as if the button were pressed.   Transistors   Related videos: Transistor Schematics , NPN Transistors , PNP Transistors , Darlingtons and MOSFETs   Because a relay is a mechanical switch, it can be somewhat slow. Relays take a few milliseconds to close, so they\u00a0aren\u2019t very effective when you want to turn them on and off rapidly. Sometimes you need to switch a high current circuit rapidly. In this case you would use a switching transistor. A\u00a0 transistor \u00a0is an electronic device that can work as a switch. It allows control of a large current by a smaller current as does a relay. Unlike a relay, however, a transistor is not mechanical, and can operate much faster than a relay. There are several types of transistors and they come in two major classes: bipolar transistors, and field-effect transistors, or FETs. All transistors have some similar properties though. They all have three connections, referred to as the\u00a0 base , the\u00a0 collector , and the\u00a0 emitter \u00a0(on FET transistors, the three connections are the gate , the drain \u00a0and the source ).When you apply\u00a0a small voltage and current between\u00a0the base of a transistor and the emitter (or the gate and the drain on a FET), you allow a larger current to flow from the collector to the emitter (or the drain and the source). One of the main differences between MOSFETS and bipolar transistors is that MOSFETS require\u00a0negligible current on the base in order to activate. Among bipolar transistors, there are two types: NPN transistors, and PNP transistors. When you apply positive voltage to\u00a0the base of an NPN transistor, \u00a0it turns on the collector-emitter connection \u00a0and allows current to flow from collector to emitter. \u00a0The equivalent MOSFET is called an N-channel MOSFET. When you apply voltage to the base of a PNP transistor, by contrast, the collector-emitter connection turns off, and \u00a0no current can flow from collector to emitter. The MOSFET equivalent is a P-channel MOSFET. \u00a0 \u00a0 We\u2019ll use NPN transistors in the examples here, specifically a very robust transistor called a\u00a0 darlington transistor . This type of transistor is designed to switch high-current loads. The particular model used in these examples is a TIP120 Darlington transistor. You could use an N-Channel MOSFET with a protection diode (more on that below) in place of the darlington transistor. The IRF520 MOSFET would be the appropriate equivalent. The basic circuit for using a transistor to control a high-current load is simple. You connect a DC power source to one terminal of the load, then connect the second terminal of the load to the collector (or drain, for a MOSFET) of the transistor. The emitter (or source) is then connected to ground, and the base (or gate) is connected to the output of your microcontroller. When you take the output pin of the microcontroller high, the voltage difference between the base (or gate) and the emitter \u00a0(or source) allows\u00a0current to flow through the load, through the collector \u00a0(or drain) to the emitter (or source) and to ground. \u00a0 Note how similar this schematic is to the relay schematic. The transistor here is serving the same function as the relay. However, it can switch much faster than the relay. In addition, because there are no mechanical parts, it will reliably function for more switching operations than the relay. However, current can only flow in one direction through a transistor. If\u00a0the voltage on the collector (or drain) is lower than that on the emitter (or source), you can damage the transistor. The same is not true with a relay. There are three\u00a0differences between this transistor circuit and the relay circuit above. The first is that you&#8217;re using a motor as the load, rather than an incandescent light bulb. Because motors are inductive loads (they work because of induction; for more, see the DC motor notes ), they can create a reverse voltage when spinning down after you turn them off. Because of this, the second difference is the protection diode in parallel with the transistor. The protection diode routes any reverse voltage around the transistor, thereby\u00a0protecting it. The third difference is that the microcontroller attached to the base (or gate) and the transistor&#8217;s emitter (or source) must have a common ground. If not, then the circuit will not work. You don&#8217;t need the diode if you&#8217;re controlling a resistive load like an incandescent lamp, but it generally doesn&#8217;t hurt to include it. Generally, if you are switching DC motors, solenoids, or other high-current DC devices which create motion, it\u2019s better to use a switching transistor than a relay. The ideal way to control a motor is with an H-bridge, which is an array of transistors that lets you control not only speed but also direction. There\u2019s more on that in the\u00a0 motor control notes .                                                 Proudly powered by WordPress"}]},
{"detail": [{"content": "Transistors, Relays, and Controlling High-Current Loads | ITP Physical Computing                                                          ITP Physical Computing             Search                  Primary Menu       Skip to content       Syllabus Phys-comp List Topics What Is Physical Computing? Electronics Electricity: the Basics Transistors, Relays, and Controlling High-Current Loads Understanding DC Power Supplies  Microcontrollers Microcontrollers: The Basics Digital Input &#038; Output Analog Input Analog Output  Programming Programming Terms and Programming Environments Variables  Sensors: the Basics Serial Communication Asynchronous Serial Communication: The Basics Interpreting Serial Data Synchronous Serial Communication: The Basics  DC Motors DC Motors: The Basics Controlling Stepper Motors  Videos Videos: Electricity Videos: Tools Videos: Schematic Diagrams Videos: Sensors Videos: Digital and Analog Input and Output Videos: Serial Communication Videos: Relays, Transistors, and Motors Videos: Prototyping Methods and Tips  Labs Labs: Electronics Lab: Components Lab: Setting Up A Breadboard Lab: Switches Lab: Soldering Lab: Electronics  Labs: Arduino Digital and Analog Lab: Digital Input and Output with an Arduino Lab: Analog In with an Arduino Lab: Servo Motor Control with an Arduino Lab: Tone Output Using An Arduino Lab: Sensor Change Detection  Labs: Serial Communication Lab: Serial Output from an Arduino Lab: Two-way (Duplex) Serial Communication using an Arduino Lab: MIDI Output using an Arduino Lab: Arduino to DAW Lab: Serial Communication with Node.js Lab: SPI Communication With A Digital Potentiometer Lab: I2C Communication With An Infrared Temperature Sensor  Labs: Motors and Transistors Lab: Using a Transistor to Control a High Current Load Lab: Using a Transistor to Control High Current Loads with an Arduino Lab: DC Motor Control Using an H-Bridge Lab: Controlling a Stepper Motor With an H-Bridge  Labs: Mouse Control Lab: Mouse Control Lab: Mouse Control With Pushbuttons Lab: Mouse Control With Joystick  Resources Books GitHub Repository Parts Needed for Physical Computing Additional Useful Parts and Tools Other Useful Sites Suppliers Checkout Components at ITP LittleBits Resources  Sections Tom Igoe Class Oct 1 Afternoon  Benedetta Piantella MONDAY WEDNESDAY  Jeff Feddersen Arlene Ducao                                        Search for:                                                            Transistors, Relays, and Controlling High-Current Loads       \u00a0 last edited 4 Sept\u00a02014 by Tom Igoe.   Introduction Contents  1 Introduction  2 Relays  3 Transistors    Related video: High Current\u00a0Loads   When you&#8217;re using microcontrollers, you frequently need to control devices that need more electrical current than a microcontroller can supply. For this, you need electrical relays or transistors. These notes explain relays and transistors as they&#8217;re used for this purpose. In order to get the most out of these notes, you should know something about how electricity works , and you should know the basics of how a microcontroller works as well.   Relays   Related video: Relays   Digital output from a microcontroller is typically a low-amperage signal. For example, when you set\u00a0a pin HIGH, the voltage coming on\u00a0that pin is typically +3.3V or +5V, and the amperage that\u00a0it can source\u00a0is around 10 milliamps. This is fine if you\u2019re controlling an LED, whose required amperage is tiny. However, most devices you\u2019d want to control need\u00a0more current than that to operate. You need a component\u00a0in between your microcontroller and the device that can be controlled with this small voltage and amperage.\u00a0 Relays \u00a0and\u00a0 transistors \u00a0are most often used for this purpose. A relay is a switch that\u2019s controlled by a small electric current. Relays take advantage of \u00a0the fact that when you pass an electric current through a wire, a magnetic field is generated surrounding the wire as well. \u00a0This is called induction . When you place two pieces of ferrous metal\u00a0near a coil of wire and pass current through the wire, the magnetic field can move\u00a0the two pieces of metal towards each other. Those pieces of metal can form a switch, which\u00a0can be turned on and off by putting current through the coil.    Two relays, one whole and the other with the switch removed. The blue and white tube is the coil, and the glass vial contains the switch    Detail of the switch inside the relay, magnified 20x    \u00a0 In the illustration above, you can see that there&#8217;s no electrical connection between the microcontroller circuit that&#8217;s controlling the coil of the relay and the lamp circuit. This is another advantage that relays offer. A\u00a0schematic, of the relay circuit looks similar to the illustration above:  The current needed to move the shaft in the coil is very low (less than 10 milliamps) so the coil can be energized by an output pin of your\u00a0microcontroller. The current that can flow through the switch, however, is much higher. The lamp circuit is separate from the microcontroller. It uses a separate power source, with the amperage and voltage needed to turn on the lamp. The power source, the lamp, and the switch side of the relay are all placed in series. When the coil is energized, the leaves of the switch are\u00a0physically moved by the magnetic force created, the lamp circuit is completed, and the lamp turns on. Relays are also useful when you want to replace a switch in an existing electronic device. If you replace the switch with the coil of a relay, the microcontroller can control the device just as if the button were pressed.   Transistors   Related videos: Transistor Schematics , NPN Transistors , PNP Transistors , Darlingtons and MOSFETs   Because a relay is a mechanical switch, it can be somewhat slow. Relays take a few milliseconds to close, so they\u00a0aren\u2019t very effective when you want to turn them on and off rapidly. Sometimes you need to switch a high current circuit rapidly. In this case you would use a switching transistor. A\u00a0 transistor \u00a0is an electronic device that can work as a switch. It allows control of a large current by a smaller current as does a relay. Unlike a relay, however, a transistor is not mechanical, and can operate much faster than a relay. There are several types of transistors and they come in two major classes: bipolar transistors, and field-effect transistors, or FETs. All transistors have some similar properties though. They all have three connections, referred to as the\u00a0 base , the\u00a0 collector , and the\u00a0 emitter \u00a0(on FET transistors, the three connections are the gate , the drain \u00a0and the source ).When you apply\u00a0a small voltage and current between\u00a0the base of a transistor and the emitter (or the gate and the drain on a FET), you allow a larger current to flow from the collector to the emitter (or the drain and the source). One of the main differences between MOSFETS and bipolar transistors is that MOSFETS require\u00a0negligible current on the base in order to activate. Among bipolar transistors, there are two types: NPN transistors, and PNP transistors. When you apply positive voltage to\u00a0the base of an NPN transistor, \u00a0it turns on the collector-emitter connection \u00a0and allows current to flow from collector to emitter. \u00a0The equivalent MOSFET is called an N-channel MOSFET. When you apply voltage to the base of a PNP transistor, by contrast, the collector-emitter connection turns off, and \u00a0no current can flow from collector to emitter. The MOSFET equivalent is a P-channel MOSFET. \u00a0 \u00a0 We\u2019ll use NPN transistors in the examples here, specifically a very robust transistor called a\u00a0 darlington transistor . This type of transistor is designed to switch high-current loads. The particular model used in these examples is a TIP120 Darlington transistor. You could use an N-Channel MOSFET with a protection diode (more on that below) in place of the darlington transistor. The IRF520 MOSFET would be the appropriate equivalent. The basic circuit for using a transistor to control a high-current load is simple. You connect a DC power source to one terminal of the load, then connect the second terminal of the load to the collector (or drain, for a MOSFET) of the transistor. The emitter (or source) is then connected to ground, and the base (or gate) is connected to the output of your microcontroller. When you take the output pin of the microcontroller high, the voltage difference between the base (or gate) and the emitter \u00a0(or source) allows\u00a0current to flow through the load, through the collector \u00a0(or drain) to the emitter (or source) and to ground. \u00a0 Note how similar this schematic is to the relay schematic. The transistor here is serving the same function as the relay. However, it can switch much faster than the relay. In addition, because there are no mechanical parts, it will reliably function for more switching operations than the relay. However, current can only flow in one direction through a transistor. If\u00a0the voltage on the collector (or drain) is lower than that on the emitter (or source), you can damage the transistor. The same is not true with a relay. There are three\u00a0differences between this transistor circuit and the relay circuit above. The first is that you&#8217;re using a motor as the load, rather than an incandescent light bulb. Because motors are inductive loads (they work because of induction; for more, see the DC motor notes ), they can create a reverse voltage when spinning down after you turn them off. Because of this, the second difference is the protection diode in parallel with the transistor. The protection diode routes any reverse voltage around the transistor, thereby\u00a0protecting it. The third difference is that the microcontroller attached to the base (or gate) and the transistor&#8217;s emitter (or source) must have a common ground. If not, then the circuit will not work. You don&#8217;t need the diode if you&#8217;re controlling a resistive load like an incandescent lamp, but it generally doesn&#8217;t hurt to include it. Generally, if you are switching DC motors, solenoids, or other high-current DC devices which create motion, it\u2019s better to use a switching transistor than a relay. The ideal way to control a motor is with an H-bridge, which is an array of transistors that lets you control not only speed but also direction. There\u2019s more on that in the\u00a0 motor control notes .                                                 Proudly powered by WordPress"}, {"content": "Lab: Using a Transistor to Control High Current Loads with an Arduino | ITP Physical Computing                                                          ITP Physical Computing             Search                  Primary Menu       Skip to content       Syllabus Phys-comp List Topics What Is Physical Computing? Electronics Electricity: the Basics Transistors, Relays, and Controlling High-Current Loads Understanding DC Power Supplies  Microcontrollers Microcontrollers: The Basics Digital Input &#038; Output Analog Input Analog Output  Programming Programming Terms and Programming Environments Variables  Sensors: the Basics Serial Communication Asynchronous Serial Communication: The Basics Interpreting Serial Data Synchronous Serial Communication: The Basics  DC Motors DC Motors: The Basics Controlling Stepper Motors  Videos Videos: Electricity Videos: Tools Videos: Schematic Diagrams Videos: Sensors Videos: Digital and Analog Input and Output Videos: Serial Communication Videos: Relays, Transistors, and Motors Videos: Prototyping Methods and Tips  Labs Labs: Electronics Lab: Components Lab: Setting Up A Breadboard Lab: Switches Lab: Soldering Lab: Electronics  Labs: Arduino Digital and Analog Lab: Digital Input and Output with an Arduino Lab: Analog In with an Arduino Lab: Servo Motor Control with an Arduino Lab: Tone Output Using An Arduino Lab: Sensor Change Detection  Labs: Serial Communication Lab: Serial Output from an Arduino Lab: Two-way (Duplex) Serial Communication using an Arduino Lab: MIDI Output using an Arduino Lab: Arduino to DAW Lab: Serial Communication with Node.js Lab: SPI Communication With A Digital Potentiometer Lab: I2C Communication With An Infrared Temperature Sensor  Labs: Motors and Transistors Lab: Using a Transistor to Control a High Current Load Lab: Using a Transistor to Control High Current Loads with an Arduino Lab: DC Motor Control Using an H-Bridge Lab: Controlling a Stepper Motor With an H-Bridge  Labs: Mouse Control Lab: Mouse Control Lab: Mouse Control With Pushbuttons Lab: Mouse Control With Joystick  Resources Books GitHub Repository Parts Needed for Physical Computing Additional Useful Parts and Tools Other Useful Sites Suppliers Checkout Components at ITP LittleBits Resources  Sections Tom Igoe Class Oct 1 Afternoon  Benedetta Piantella MONDAY WEDNESDAY  Jeff Feddersen Arlene Ducao                                        Search for:                                                            Lab: Using a Transistor to Control High Current Loads with an Arduino       last edited 31\u00a0August 2014 by\u00a0Tom Igoe   Introduction Contents  1 Introduction  2 What You\u2019ll Need to Know  3 Things You\u2019ll Need  4 Connect the Breadboard  5 Add a potentiometer  6 Connect a transistor to the microcontroller  6.1 Note: Using MOSFETS instead  7 Connect a motor and power supply  7.1 Connect a lamp instead  8 Program the microcontroller    In this tutorial, you&#8217;ll learn how to control a high-current DC load such as a DC motor or an incandescent light from a microcontroller. Microcontrollers can only output a very small amount of current from their output pins. These pins are meant to send control signals, not to act as power supplies. The most common way to control another direct current device from a microcontroller is to use a transistor. Transistors allow you to control the flow of a high-current circuit from a low-current source.     Video: Transistor Schematics   Video: Meet the motors   Video: Pulse-width modulating\u00a0a transistor to to control a fan motor   Video: NPN Transistors   Video: Darlingtons and MOSFETs     What You\u2019ll Need to Know   To get the most out of this Lab you should be familiar with the following concepts beforehand. If you\u2019re not, review the links below:     What is a microcontroller   Beginning\u00a0 programming terms   What is a\u00a0 solderless breadboard \u00a0and\u00a0 how to use one   Digital Input and output   Analog Output   Basic Electronics       Safety Warning: \u00a0This tutorial shows you how to control high-current loads. This comes with a higher danger of injury from electricity than the earlier tutorials. Please be careful and double-check your wiring before plugging anything in, and never change your wiring while your circuit is powered.     Things You\u2019ll Need     For this lab you'll need:                      Solderless breadboard   22-AWG hookup wire   Arduino Microcontroller module   10Kohm potentiometer                       Power diodes (for DC Motor version only)   DC power supply   TIP120 transistor   DC Motor       OR\u00a0            Incandescent lamp and socket       Connect the Breadboard   Connect the breadboard to the Arduino, running 5V and ground to the side rails:     Add a potentiometer   Connect a potentiometer to analog in pin 0 of the module:                 Schematic view   Arduino with Potentiometer       Connect a transistor to the microcontroller   The transistor allows you to control a circuit that&#8217;s carrying higher current and voltage from the microcontroller. It acts as an electronic switch. The one you&#8217;re using for this lab is an NPN-type transistor called a TIP120. The datasheet for it can be found\u00a0 here . It&#8217;s designed for switching high-current loads. It has three connections, the base, the collector, and the emitter. The base is connected to the microcontroller&#8217;s output. The high-current load (i.e. the motor or light) is attached to its power source, and then to the collector of the transistor. The emitter of the transistor is connected to ground.                  Pinout of a TIP-120 transistor from left to right: base,collector, emitter   Schematic symbol of a TIP-120 transistor         Note: Using MOSFETS instead   You can also use an IRF510 or IRF520 MOSFET transistor for this. They have the same pin configuration as the TIP120, and perform similarly. They can handle more amperage and voltage, but are more sensitive to static electricity damage. MOSFETs are grouped into N-Channel and P-Channel, which are equivalent to NPN and PNP bipolar transistors. Here&#8217;s a quick translation table for the pin names on both:        Bipolar Transistor   MOSFET          Base   Gate       Collector   Drain       Emitter   Source         Connect the base to an output pin of the microcontroller, and the emitter to ground like so:                   Safety Warning: You can generally connect the base to a microcontroller&#8217;s pin directly without a current limiting resistor because the current from the pin is low enough. But it&#8217;s necessary if you&#8217;re controlling a transistor circuit\u00a0without a microcontroller .   Connect a motor and power supply   Attach a DC motor to the collector of the transistor. Most motors will require more amperage than the microcontroller can supply, so you will need to add a separate power supply as well. If your motor runs on around 9V, you could use a 9V battery. A 5V motor might run on 4 AA batteries. a 12V battery may need a 12V wall wart, or a 12V battery. The ground of the motor power supply should connect to the ground of the microcontroller, on the breadboard.                  Next, add a diode in parallel with the collector and emitter of the transistor, pointing away from ground. The diode to protects the transistor from back voltage generated when the motor shuts off, or if the motor is turned in the reverse direction.                  The circuit with protection diode across the transistor   The TIP120 can be replaced with a MOSFET if you prefer.       You may also find that adding a diode across the motor helps with back voltage protection as well, particularly when you&#8217;re running multiple transistor-motor circuits. If you plan to add a diode across the motor, here&#8217;s the circuit:                  A diode across the motor helps with back voltage protection as well\u00a0       Be sure to add the diode to your circuit correctly. The silver band on the diode denotes the cathode which is the tip of the arrow in the schematic, like so:      This circuit assumes you&#8217;re using a 12V motor. If your motor requires a different voltage, make sure to use a power supply that&#8217;s appropriate. Connect the ground of the motor&#8217;s supply to the ground of your microcontroller circuit, though, or the circuit won&#8217;t work properly.   Connect a lamp instead   You could also attach a lamp using a transistor. Like the motor, the lamp circuit below assumes a 12V lamp. Change your power supply accordingly if you&#8217;re using a different lamp. In the lamp circuit, the protection diode is not needed, since there&#8217;s no way for the polarity to get reversed in this circuit:                   Schematic view   When the motor is replaced with a lamp there is no need for the protection diode       Program the microcontroller   Write a quick program to test the circuit. Your program should make the transistor pin an output in the setup method. Then in the loop, it should turn the motor on and off every second, just like the\u00a0 blink sketch \u00a0does.     const int transistorPin = 9; // connected to the base of the transistor     void setup() {   // set the transistor pin as output:   pinMode(transistorPin, OUTPUT);   }     void loop() {   digitalWrite(transistorPin, HIGH);   delay(1000);   digitalWrite(transistorPin, LOW);   delay(1000);   }     Now that you see it working, try changing the speed of the motor or the intensity of the lamp using the potentiometer.   To do that, read the voltage of the potentiometer using\u00a0 analogRead() . Then map the result to a range from 0 to 255 and save it in a new variable. Use that variable to set the speed of the motor or the brightness of the lamp using\u00a0 analogWrite() .     const int transistorPin = 9; // connected to the base of the transistor     void setup() {   // set the transistor pin as output:   pinMode(transistorPin, OUTPUT);   }     void loop() {   // read the potentiometer:   int sensorValue = analogRead(A0);   // map the sensor value to a range from 0 - 255:   int outputValue = map(sensorValue, 0, 1023, 0, 255);   // use that to control the transistor:   analogWrite(transistorPin, outputValue);   }     For the motor users: A motor controlled like this can only be turned in one direction. To be able to reverse the direction of the motor, an H-bridge circuit is required. For more on controlling DC motors with H-bridges, see the\u00a0 DC Motor Control lab                                                 Proudly powered by WordPress"}]}]