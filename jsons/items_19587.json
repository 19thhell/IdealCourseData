[{"detail": [{"content": "Lecture 5: Logic Design        V22.0436 - Prof. Grishman    Lecture 5: Logic Design -- Synchronous Circuits          Timing for synchronous circuits (text, section C.7)       basic requirement: delay of combinational circuit to compute next state &lt; clock period       Representing sequential circuits (text, sec. C.10)     a sequential circuit can be described as a finite state machine     state machine includes a next-state function and an output function  (text, figure C.10.1)      we will consider a simple version where the output is just part of the current state        next-state function can be represented by a graph or a table   graph: finite state transition network   transition table: table which gives new state as a function of current state and inputs      Finite state transition network     a network consists of a set of nodes connected by arcs   each node represents a state of the circuit (so a circuit with n bits of registers may have 2 n states)   each arc represents a possible transition between states; it is labeled by the condition (if any) under which the transition is made      Transition table  In a transition table, the input columns represent the state of the circuit and the inputs to the circuit; the output columns represent the next state of the circuit.  Designing a sequential circuit     (sometimes) draw a transition network for the circuit   build a transition table   use the transition table as the truth table for the \"next state\" combinatorial circuit   convert this table to a circuit   if necessary, build an output function truth table and convert it to a circuit   example: binary up-counter; binary up-down counter   example: \"traffic light\" circuit from text     Register files (text, pp. C-53 and C-54)     minimal register file has data input, data output, register number, and write signal   general arithmetic operation takes two operands (from registers) and produces a result (to be stored inn a register); to accomodate this        can provide separate read and write register numbers    can provide multiple read ports     selecting a register to read is controlled by a multiplexer (figure C.8.8)   selecting a register to write is controlled by a decoder (figure C.8.9)   figures from Prof. Gottlieb's notes: register file | read ports | write port"}]},
{"detail": [{"content": "Lecture 5: Logic Design        V22.0436 - Prof. Grishman    Lecture 5: Logic Design -- Synchronous Circuits          Timing for synchronous circuits (text, section C.7)       basic requirement: delay of combinational circuit to compute next state &lt; clock period       Representing sequential circuits (text, sec. C.10)     a sequential circuit can be described as a finite state machine     state machine includes a next-state function and an output function  (text, figure C.10.1)      we will consider a simple version where the output is just part of the current state        next-state function can be represented by a graph or a table   graph: finite state transition network   transition table: table which gives new state as a function of current state and inputs      Finite state transition network     a network consists of a set of nodes connected by arcs   each node represents a state of the circuit (so a circuit with n bits of registers may have 2 n states)   each arc represents a possible transition between states; it is labeled by the condition (if any) under which the transition is made      Transition table  In a transition table, the input columns represent the state of the circuit and the inputs to the circuit; the output columns represent the next state of the circuit.  Designing a sequential circuit     (sometimes) draw a transition network for the circuit   build a transition table   use the transition table as the truth table for the \"next state\" combinatorial circuit   convert this table to a circuit   if necessary, build an output function truth table and convert it to a circuit   example: binary up-counter; binary up-down counter   example: \"traffic light\" circuit from text     Register files (text, pp. C-53 and C-54)     minimal register file has data input, data output, register number, and write signal   general arithmetic operation takes two operands (from registers) and produces a result (to be stored inn a register); to accomodate this        can provide separate read and write register numbers    can provide multiple read ports     selecting a register to read is controlled by a multiplexer (figure C.8.8)   selecting a register to write is controlled by a decoder (figure C.8.9)   figures from Prof. Gottlieb's notes: register file | read ports | write port"}, {"content": "Lecture 3: Logic Design -- Combinational Circuits        V22.0436 - Prof. Grishman    Lecture 3: Logic Design -- Simulation; combinational Circuits:  propagation delay  (finish lecture 2 material: how many types of gates do we need?)   Circuit simulation     old-fashioned approach: breadboarding ... build and test      difficult even for systems using off-the-shelf parts           importance of simulating designs before they are built     simulation becomes much more important for VLSI        tooling up to build a new VLSI circuit is very expensive  (low cost is obtained by making a large number of a single design)   hard to debug a circuit once it is built    distributing a chip (processor) with a bug can cause huge problems     special purpose simulators for logic simulation   two approaches to circuit entry:        specialized languages: VHDL, Verilog    graphical entry of circuits     we will use a graphical entry approach: Logisim       Propagation delay (note: not covered in text)     delay of individual transistor -- how fast it can switch -- determined by physical factors (e.g., size)   speed of transistor determines speed of gate   the propagation delay (speed) of a combinatorial circuit is the length of time from the moment when all input signals are stable until the moment when all outputs have stabilized   propagation delay of a combinatorial circuit can be determined as longest path (in number of gates) from any input to any output      Fan-in (note: not covered in text)     sum-of-products form suggests any combinatorial function can be computed in 3 gate delays (one delay for inverters, one for ANDs, one for OR)   but gates are limited in their fan-in (number of inputs a gate has)   so, for example, if fan-in is f , it takes log (base f ) n gate delays to OR or AND together n inputs      Ripple carry adder (C-26 to 28; C-46)     simplest n-bit binary adder connects together n full adders, feeding Cout of bit k into Cin of bit k+1 (where low order bit is bit 0)   delay is approximately n * delay(Cin,Cout) of full adder      Representing signed numbers (text, section 2.4 and 3.2)     negative numbers generally represented in two's complement   computing the two's complement: flipping each bit and adding 1   doing subtraction by adding the two's complement  (simple subtractor using one row of full adders: page C-30)"}]},
{"detail": [{"content": "Lecture 5: Logic Design        V22.0436 - Prof. Grishman    Lecture 5: Logic Design -- Synchronous Circuits          Timing for synchronous circuits (text, section C.7)       basic requirement: delay of combinational circuit to compute next state &lt; clock period       Representing sequential circuits (text, sec. C.10)     a sequential circuit can be described as a finite state machine     state machine includes a next-state function and an output function  (text, figure C.10.1)      we will consider a simple version where the output is just part of the current state        next-state function can be represented by a graph or a table   graph: finite state transition network   transition table: table which gives new state as a function of current state and inputs      Finite state transition network     a network consists of a set of nodes connected by arcs   each node represents a state of the circuit (so a circuit with n bits of registers may have 2 n states)   each arc represents a possible transition between states; it is labeled by the condition (if any) under which the transition is made      Transition table  In a transition table, the input columns represent the state of the circuit and the inputs to the circuit; the output columns represent the next state of the circuit.  Designing a sequential circuit     (sometimes) draw a transition network for the circuit   build a transition table   use the transition table as the truth table for the \"next state\" combinatorial circuit   convert this table to a circuit   if necessary, build an output function truth table and convert it to a circuit   example: binary up-counter; binary up-down counter   example: \"traffic light\" circuit from text     Register files (text, pp. C-53 and C-54)     minimal register file has data input, data output, register number, and write signal   general arithmetic operation takes two operands (from registers) and produces a result (to be stored inn a register); to accomodate this        can provide separate read and write register numbers    can provide multiple read ports     selecting a register to read is controlled by a multiplexer (figure C.8.8)   selecting a register to write is controlled by a decoder (figure C.8.9)   figures from Prof. Gottlieb's notes: register file | read ports | write port"}, {"content": "Lecture 3: Logic Design -- Combinational Circuits        V22.0436 - Prof. Grishman    Lecture 3: Logic Design -- Simulation; combinational Circuits:  propagation delay  (finish lecture 2 material: how many types of gates do we need?)   Circuit simulation     old-fashioned approach: breadboarding ... build and test      difficult even for systems using off-the-shelf parts           importance of simulating designs before they are built     simulation becomes much more important for VLSI        tooling up to build a new VLSI circuit is very expensive  (low cost is obtained by making a large number of a single design)   hard to debug a circuit once it is built    distributing a chip (processor) with a bug can cause huge problems     special purpose simulators for logic simulation   two approaches to circuit entry:        specialized languages: VHDL, Verilog    graphical entry of circuits     we will use a graphical entry approach: Logisim       Propagation delay (note: not covered in text)     delay of individual transistor -- how fast it can switch -- determined by physical factors (e.g., size)   speed of transistor determines speed of gate   the propagation delay (speed) of a combinatorial circuit is the length of time from the moment when all input signals are stable until the moment when all outputs have stabilized   propagation delay of a combinatorial circuit can be determined as longest path (in number of gates) from any input to any output      Fan-in (note: not covered in text)     sum-of-products form suggests any combinatorial function can be computed in 3 gate delays (one delay for inverters, one for ANDs, one for OR)   but gates are limited in their fan-in (number of inputs a gate has)   so, for example, if fan-in is f , it takes log (base f ) n gate delays to OR or AND together n inputs      Ripple carry adder (C-26 to 28; C-46)     simplest n-bit binary adder connects together n full adders, feeding Cout of bit k into Cin of bit k+1 (where low order bit is bit 0)   delay is approximately n * delay(Cin,Cout) of full adder      Representing signed numbers (text, section 2.4 and 3.2)     negative numbers generally represented in two's complement   computing the two's complement: flipping each bit and adding 1   doing subtraction by adding the two's complement  (simple subtractor using one row of full adders: page C-30)"}, {"content": "Lecture 4: Logic Design              CSCI-UA.0436 - Prof. Grishman       Lecture 4: Logic Design -- Sequential Circuits: Latches and   Flip-Flops    (guest lecture by Prof. Gottlieb:       his Computer Architecture notes )      (text, sections B.7 and B.8)          Combinational vs. sequential circuits       in a combinational circuit, output (after some delay) is a   function of   inputs    in contrast, a sequential circuit holds state information :   the   output   is   a function of the state of the device, as well as its inputs; in   other   words, sequential circuits have memory          Simple latches       RS latch (reset-set latch) using NOR gates: set and reset   inputs (text, figure   B.8.1)        to retain current state, S=R=0     changing S to 1 forces Q=1; when S is returned to 0,    Q=1 state is retained     changing R to 1 forces Q=0; when R is returned to 0,    Q=0 state is retained           D-type latch: clock and data inputs (text, figure B.8.2): use   of clock to control when a latch is updated        when C [clock] input is 0, latch retains current state     setting C to 1 forces Q=D [\"load data\"]; when C is    returned to 0, state is retained           register: set of latches with a common clock       Synchronous circuits       consists of a set of registers controlled by a common clock,   along with   a combinatorial circuit to compute the next state (text, section   B.7)    up-counter as simple example of synchronous circuit    race problem if same latches are used for input to and output   from combinatorial   circuit (figure B.7.3)         use of edge-triggered registers to address race    problem                 Master-slave flip-flops       provide an way of implementing edge-triggered FFs    built from two simple flip-flops (latches) with complementary   clocks (figure B.8.4)    changes output on falling edge       Register files (text, pp. B-53 and B-54)       minimal register file has data input, data output, register   number, and write signal    general arithmetic operation takes two operands (from   registers)   and produces a result (to be stored inn a register); to   accomodate this           can provide separate read and write register numbers     can provide multiple read ports       selecting a register to read is controlled by a multiplexer   (figure B.8.8)    selecting a register to write is controlled by a decoder   (figure   B.8.9)    figures from Prof. Gottlieb's notes: register file | read    ports | write port"}]}]