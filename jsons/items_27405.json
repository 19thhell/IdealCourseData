[{"detail": [{"content": "Physical Computing | for Tinker Tailor Soldier Spies                                              Physical Computing      for Tinker Tailor Soldier Spies               Menu      Skip to content      Site moved                                                   Site moved               This site is in the process of being moved to\u00a0 http://cs.nyu.edu/~amos/courses/pcomp .   Please visit that new site instead.                                                                   Proudly powered by WordPress"}]},
{"detail": [{"content": "Physical Computing | for Tinker Tailor Soldier Spies                                              Physical Computing      for Tinker Tailor Soldier Spies               Menu      Skip to content      Site moved                                                   Site moved               This site is in the process of being moved to\u00a0 http://cs.nyu.edu/~amos/courses/pcomp .   Please visit that new site instead.                                                                   Proudly powered by WordPress"}, {"content": "ITP Physical Computing                                                          ITP Physical Computing             Search                  Primary Menu       Skip to content       Syllabus Phys-comp List Topics What Is Physical Computing? Electronics Electricity: the Basics Transistors, Relays, and Controlling High-Current Loads Understanding DC Power Supplies  Microcontrollers Microcontrollers: The Basics Digital Input &#038; Output Analog Input Analog Output  Programming Programming Terms and Programming Environments Variables  Sensors: the Basics Serial Communication Asynchronous Serial Communication: The Basics Interpreting Serial Data Synchronous Serial Communication: The Basics  DC Motors DC Motors: The Basics Controlling Stepper Motors  Videos Videos: Electricity Videos: Tools Videos: Schematic Diagrams Videos: Sensors Videos: Digital and Analog Input and Output Videos: Serial Communication Videos: Relays, Transistors, and Motors Videos: Prototyping Methods and Tips  Labs Labs: Electronics Lab: Components Lab: Setting Up A Breadboard Lab: Switches Lab: Soldering Lab: Electronics  Labs: Arduino Digital and Analog Lab: Digital Input and Output with an Arduino Lab: Analog In with an Arduino Lab: Servo Motor Control with an Arduino Lab: Tone Output Using An Arduino Lab: Sensor Change Detection  Labs: Serial Communication Lab: Serial Output from an Arduino Lab: Two-way (Duplex) Serial Communication using an Arduino Lab: MIDI Output using an Arduino Lab: Arduino to DAW Lab: Serial Communication with Node.js Lab: SPI Communication With A Digital Potentiometer Lab: I2C Communication With An Infrared Temperature Sensor  Labs: Motors and Transistors Lab: Using a Transistor to Control a High Current Load Lab: Using a Transistor to Control High Current Loads with an Arduino Lab: DC Motor Control Using an H-Bridge Lab: Controlling a Stepper Motor With an H-Bridge  Labs: Mouse Control Lab: Mouse Control Lab: Mouse Control With Pushbuttons Lab: Mouse Control With Joystick  Resources Books GitHub Repository Parts Needed for Physical Computing Additional Useful Parts and Tools Other Useful Sites Suppliers Checkout Components at ITP LittleBits Resources  Sections Tom Igoe Class Oct 1 Afternoon  Benedetta Piantella MONDAY WEDNESDAY  Jeff Feddersen Arlene Ducao                                        Search for:                                                            What Is Physical Computing?       Physical Computing is an approach to computer-human interaction design that starts by considering how humans express themselves physically. Computer interface design instruction often takes the computer hardware for given &#8212; namely, that there is a keyboard, a screen, speakers, and a mouse or trackpad or touchscreen &#8212; and concentrates on teaching the software necessary to design within those boundaries. In physical computing, we take the human body and its capabilities as the starting point, and attempt to design interfaces, both software and hardware, that can sense and respond to what humans can physically do.   Starting with a person&#8217;s capabilities requires an understanding of how a computer can sense physical action. When we act, we cause changes in various forms of energy. Speech generates the air pressure waves that are sound. Gestures change the flow of light and heat in a space. Electronic sensors can convert these energy changes into changing electronic signals that can be read and interpreted by computers. In physical computing, we learn how to connect sensors to the simplest of computers, called microcontrollers, in order to read these changes and interpret them as actions. Finally, we learn how microcontrollers communicate with other computers in order to connect physical action with multimedia displays.   Physical computing takes a hands-on approach, which means that you spend a lot of time building circuits, soldering, writing programs, building structures to hold sensors and controls, and figuring out how best to make all of these things relate to a person&#8217;s expression.   Cool. So we&#8217;ll build all kinds of robots?   Not quite. While the hardware skills used in physical computing are similar to those used in robotics, the concepts are a bit different. When you build robots, you&#8217;re usually focused on making devices that are autonomous, capable of navigating through the world on its own. Physical computing systems, in contrast, focus on interaction with the human. Rather than automation, we focus on using digital technologies to extend human capabilities, creating systems that are driven by a person&#8217;s intentions, decisions and actions. Where a robotics course might focus on the mechanics, drive and sensing systems of a robot, a physical computing course might concentrate more on the interface, both hardware and software, necessary for a human to direct that robot.   What will I learn in this class, and what should I know in advance?   There are three broad areas you&#8217;ll learn about in this course:     you&#8217;ll get an introduction of microcontroller electronics, in order to understand how sensors and actuators work and how they are controlled by computers;   you&#8217;ll learn the rudiments of programming microcontrollers, and how to interface them to other computers via serial communication;   you&#8217;ll learn how to think about physical interaction design starting with observation of what the user physically does and then planning the best ways to sense and respond to that action.     This course assumes no prior knowledge of any of these subjects, but it does require a lot of out-of-class time and effort. Most of the real work happens outside of class, both in the shop building and programming, and in the world observing people to understand how their actions reflect their intentions.   Many people take an introductory programming course in parallel with a physical computing course. If you&#8217;ve done some web-based user interface programming in JavaScript, you&#8217;re in good shape. Likewise, if you&#8217;ve learned Java, Processing, C, C++, Python, Ruby, or most any other programming language, you&#8217;ll have enough of the basics necessary to get going.   You don&#8217;t need any prior background in electronics for this course. You&#8217;ll learn just enough in this class to connect a variety of sensors and actuators to a microcontroller so that you can realize your ideas.   This isn&#8217;t primarily an electronics course or a programming course or a design course. Just as there are complementary courses that go more into depth in programming, there are also complementary classes that go more into depth in electronics. This course is a broad overview of techniques used in physical interaction design.                                                 Proudly powered by WordPress"}]}]