[{"detail": [{"content": "NYU, CIMS, CS, CSCI-GA.3110-001, Spring 2015, Honors PL, P. Cousot               NYU, Graduate Division, Computer Science Course, CSCI-GA.3110-001     Honors Programming Languages     Patrick Cousot     pcousot  cs  nyu  edu     Spring 2015               Prerequisites ,   Description ,   Schedule ,   Office Hours ,   Textbook ,   Requirements ,   Grading ,   First class ,   Midterm ,   Spring Recess ,   Last Class ,   Reading Day ,   Final ,   Requirements   Course content          Prerequisites:  Basic practice of programming in any high-level programming language.     Course Description:      Objective of the course: learning how to learn programming languages     Programming is one of the basic activities of computer scientists which implies to know one or several programming languages. In the history of computer science thousands of programming languages have been invented, implemented, and used. Moreover each language has many revisions, dialects for different computers and operating systems, and domain-specific variants. It is therefore impossible to know all programming languages and programming models. Moreover research in programming languages is very active, so that computer scientists are very likely to use many programming languages during their career that simply did not exist at the beginning of their career. Hence, it is extremely important to learn how to learn new programming languages. This is precisely the main objective of this course which provides a methodology to learn and use programming languages, models, concepts, and tools to cope with legacy, portability, inter-operability, scalability, safety and security challenges in programming.     Basic concepts of programming languages    Languages are designed out of basic ideas, concepts, models, and programming styles that can be explained and understood independently of a particular languages and have as many instances as programming languages emboddying these features. The course will extensively study such features and abstractions. Examples are static and dynamic languages, typing and type inferrence, object-orientation, modularity, data organization, allocation and handling (e.g. stack, heap), control structures (iterators, recursion), abstraction (functions, objects), environment accessing (scripting), reflexion (self-modification of behavior), shared-variables/communications concurrency, etc. Moreover modern programming languages come with advanced tools (for example to verify the correctness of programs) which underlying principles must be well understood to be able to use these tools.    Which languages to learn   The course will introduce a panorama of programming languages concepts underlying the main programming language paradigms (such as imperative, functional, object-oriented, logic, concurrent, and scripting languages) and present in detail the formal methods (code semantics, specification, and verification) used in modern high quality assurance tools for software safety and security. A programming project (design and implementation of an interpreter/compiler for an dynamic object-oriented mini-language) will be programmed in OCaml , a multiparadigm language introduced at the beginning of the course.      Class Hours:  Tuesday and Thursday, 3:30PM&#8212;4:45PM, CIWW 312.     Office Hours:  Tuesday/Thursday, 2:00PM&#8212;3:15PM, CIWW 405, by email appointment only, to avoid wait lines.     Textbook:  None, all information (including course notes) is provided online by the instructor.     First class:  Tuesday January 26 th , 2015     Midterm:  Thursday March 12 th , 2015     Spring Recess:  Monday, March 16 th , 2015 &#8212; Sunday, March 22 rd , 2015, see the Official University Academic Calendar      Last Class:  Tuesday, May 7 th , 2015      Reading Day:  Tuesday, May 12 th , 2015      Final:  Thursday May 14 th , 2015      Course requirements:  Midterm, programming project, Individual oral presentation of a programming language, and final exam.     Grading:  midterm (20%),  oral presentation of a programming language (20%),  programming project (30%),  and final exam (30%).    The course content is online         &copy; P. Cousot"}]},
{"detail": [{"content": "NYU, CIMS, CS, CSCI-GA.3110-001, Spring 2015, Honors PL, P. Cousot               NYU, Graduate Division, Computer Science Course, CSCI-GA.3110-001     Honors Programming Languages     Patrick Cousot     pcousot  cs  nyu  edu     Spring 2015               Prerequisites ,   Description ,   Schedule ,   Office Hours ,   Textbook ,   Requirements ,   Grading ,   First class ,   Midterm ,   Spring Recess ,   Last Class ,   Reading Day ,   Final ,   Requirements   Course content          Prerequisites:  Basic practice of programming in any high-level programming language.     Course Description:      Objective of the course: learning how to learn programming languages     Programming is one of the basic activities of computer scientists which implies to know one or several programming languages. In the history of computer science thousands of programming languages have been invented, implemented, and used. Moreover each language has many revisions, dialects for different computers and operating systems, and domain-specific variants. It is therefore impossible to know all programming languages and programming models. Moreover research in programming languages is very active, so that computer scientists are very likely to use many programming languages during their career that simply did not exist at the beginning of their career. Hence, it is extremely important to learn how to learn new programming languages. This is precisely the main objective of this course which provides a methodology to learn and use programming languages, models, concepts, and tools to cope with legacy, portability, inter-operability, scalability, safety and security challenges in programming.     Basic concepts of programming languages    Languages are designed out of basic ideas, concepts, models, and programming styles that can be explained and understood independently of a particular languages and have as many instances as programming languages emboddying these features. The course will extensively study such features and abstractions. Examples are static and dynamic languages, typing and type inferrence, object-orientation, modularity, data organization, allocation and handling (e.g. stack, heap), control structures (iterators, recursion), abstraction (functions, objects), environment accessing (scripting), reflexion (self-modification of behavior), shared-variables/communications concurrency, etc. Moreover modern programming languages come with advanced tools (for example to verify the correctness of programs) which underlying principles must be well understood to be able to use these tools.    Which languages to learn   The course will introduce a panorama of programming languages concepts underlying the main programming language paradigms (such as imperative, functional, object-oriented, logic, concurrent, and scripting languages) and present in detail the formal methods (code semantics, specification, and verification) used in modern high quality assurance tools for software safety and security. A programming project (design and implementation of an interpreter/compiler for an dynamic object-oriented mini-language) will be programmed in OCaml , a multiparadigm language introduced at the beginning of the course.      Class Hours:  Tuesday and Thursday, 3:30PM&#8212;4:45PM, CIWW 312.     Office Hours:  Tuesday/Thursday, 2:00PM&#8212;3:15PM, CIWW 405, by email appointment only, to avoid wait lines.     Textbook:  None, all information (including course notes) is provided online by the instructor.     First class:  Tuesday January 26 th , 2015     Midterm:  Thursday March 12 th , 2015     Spring Recess:  Monday, March 16 th , 2015 &#8212; Sunday, March 22 rd , 2015, see the Official University Academic Calendar      Last Class:  Tuesday, May 7 th , 2015      Reading Day:  Tuesday, May 12 th , 2015      Final:  Thursday May 14 th , 2015      Course requirements:  Midterm, programming project, Individual oral presentation of a programming language, and final exam.     Grading:  midterm (20%),  oral presentation of a programming language (20%),  programming project (30%),  and final exam (30%).    The course content is online         &copy; P. Cousot"}, {"content": "NYU Computer Science Department &gt; The Faculty and Their Interests                                                                                                         Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                         The Faculty and Their Interests     Faculty          Clark W. Barrett          Propositional satisfiability (SAT), satisfiability modulo theories (SMT), automated deduction and applied logic, proof-producing algorithms, formal and semi-formal verification of hardware and software, and combining verification systems.           Marsha Berger          Computational fluid dynamics, adaptive methods, and parallel scientific computing.           Richard Bonneau          Algorithms for learning regulatory networks/biological control, computational structural biology, and systems-biology.           Richard J. Cole          Algorithmics, algorithmic economics and game theory, algorithms in nature and society.           Patrick M. Cousot          Abstract interpretation, semantics, verifcation, and static analysis.           Ernest Davis          Artificial intelligence, knowledge representation, and automated commonsense reasoning.           Yevgeniy Dodis          Cryptography, security, information theory, complexity theory, algorithms.           Rob Fergus          Computer vision and computational photography.           Davi Geiger          Computational vision, learning, memory, and applications.           Benjamin Goldberg          Design and implementation of programming languages, compiler verification, and compiler optimizations.           Allan Gottlieb          Parallel computing, computer architecture, operating systems, distributed systems, and free software.           Robert Grimm          Operating systems, distributed systems, and interaction of programming languages and systems.           Ralph Grishman          Natural language processing.           Zvi Kedem          Algorithmic techniques for designing computer-based systems.           Subhash Khot          Algorithms, computational complexity, and computational intractability.           Yann Andre LeCun          Machine learning, computer vision, autonomous robotics, computational neuroscience, computational statistics, computational economics, hardware architectures for vision, digital libraries, and data compression.           Jinyang Li          Distributed systems, operating systems, wireless networks.           Bhubaneswar Mishra          Bioinformatics, algorithmic algebra, robotics, computational biology, and computational finance.           Mehryar Mohri          Machine learning, computational biology, text and speech processing, algorithms, and theory.           Michael Overton          Numerical analysis, linear algebra, optimization, and mathematical programming.           Kenneth Perlin          Computer graphics, simulation, computer/human interface, multimedia, and animation.           Theodore (Ted) S. Rappaport          Wireless communication systems and networks, compressed sensing for wireless and video applications, RF/Analog circuit design, antennas and propagation, wireless for medical applications.           Oded Regev          Lattice-based cryptography, quantum computation, and mathematical aspects of theoretical computer science.           Dennis E. Shasha          Network inference and protein design for biology, software for searching databases of trees and graphs, outsourcing data while preserving privacy, finding patterns in time series, DNA computing, and puzzles.           Victor J. Shoup          Cryptography and algorithms.           Alan R. Siegel          VLSI design, analysis of algorithms, lower bounds, parallel algorithms, probability, and combinatorial geometry.           David Sontag          Machine learning, graphical models, artificial intelligence           Joel Spencer          Theoretical computer science and discrete mathematics.           Lakshminarayanan Subramanian          Networks, distributed systems, computing for development .           Michael Walfish          Systems, security, and networks.           Thomas Wies          Program analysis and verification; automated deduction; concurrent software; software productivity           Margaret Wright          Optimization, scientific computing, and linear algebra.           Chee Yap          Computational geometry, computer algebra, visualization, algorithmic robotics, complexity theory, and numerical robustness issues and exact computation.           Denis Zorin          Computer graphics, geometric modeling, subdivision surfaces, multiresolution surface representations, fluid and solid simulation, and perceptually based methods for computer graphics.          Research Faculty          Adam Meyers          Natural Language Processing, Linguistics, Pre-college Computer Science Education.           Satoshi Sekine          Natural language processing, synctactic analysis, and information extraction.                        top | contact webmaster"}]},
{"detail": [{"content": "NYU, CIMS, CS, CSCI-GA.3110-001, Spring 2015, Honors PL, P. Cousot               NYU, Graduate Division, Computer Science Course, CSCI-GA.3110-001     Honors Programming Languages     Patrick Cousot     pcousot  cs  nyu  edu     Spring 2015               Prerequisites ,   Description ,   Schedule ,   Office Hours ,   Textbook ,   Requirements ,   Grading ,   First class ,   Midterm ,   Spring Recess ,   Last Class ,   Reading Day ,   Final ,   Requirements   Course content          Prerequisites:  Basic practice of programming in any high-level programming language.     Course Description:      Objective of the course: learning how to learn programming languages     Programming is one of the basic activities of computer scientists which implies to know one or several programming languages. In the history of computer science thousands of programming languages have been invented, implemented, and used. Moreover each language has many revisions, dialects for different computers and operating systems, and domain-specific variants. It is therefore impossible to know all programming languages and programming models. Moreover research in programming languages is very active, so that computer scientists are very likely to use many programming languages during their career that simply did not exist at the beginning of their career. Hence, it is extremely important to learn how to learn new programming languages. This is precisely the main objective of this course which provides a methodology to learn and use programming languages, models, concepts, and tools to cope with legacy, portability, inter-operability, scalability, safety and security challenges in programming.     Basic concepts of programming languages    Languages are designed out of basic ideas, concepts, models, and programming styles that can be explained and understood independently of a particular languages and have as many instances as programming languages emboddying these features. The course will extensively study such features and abstractions. Examples are static and dynamic languages, typing and type inferrence, object-orientation, modularity, data organization, allocation and handling (e.g. stack, heap), control structures (iterators, recursion), abstraction (functions, objects), environment accessing (scripting), reflexion (self-modification of behavior), shared-variables/communications concurrency, etc. Moreover modern programming languages come with advanced tools (for example to verify the correctness of programs) which underlying principles must be well understood to be able to use these tools.    Which languages to learn   The course will introduce a panorama of programming languages concepts underlying the main programming language paradigms (such as imperative, functional, object-oriented, logic, concurrent, and scripting languages) and present in detail the formal methods (code semantics, specification, and verification) used in modern high quality assurance tools for software safety and security. A programming project (design and implementation of an interpreter/compiler for an dynamic object-oriented mini-language) will be programmed in OCaml , a multiparadigm language introduced at the beginning of the course.      Class Hours:  Tuesday and Thursday, 3:30PM&#8212;4:45PM, CIWW 312.     Office Hours:  Tuesday/Thursday, 2:00PM&#8212;3:15PM, CIWW 405, by email appointment only, to avoid wait lines.     Textbook:  None, all information (including course notes) is provided online by the instructor.     First class:  Tuesday January 26 th , 2015     Midterm:  Thursday March 12 th , 2015     Spring Recess:  Monday, March 16 th , 2015 &#8212; Sunday, March 22 rd , 2015, see the Official University Academic Calendar      Last Class:  Tuesday, May 7 th , 2015      Reading Day:  Tuesday, May 12 th , 2015      Final:  Thursday May 14 th , 2015      Course requirements:  Midterm, programming project, Individual oral presentation of a programming language, and final exam.     Grading:  midterm (20%),  oral presentation of a programming language (20%),  programming project (30%),  and final exam (30%).    The course content is online         &copy; P. Cousot"}, {"content": "NYU Computer Science Department &gt; The Faculty and Their Interests                                                                                                         Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                         The Faculty and Their Interests     Faculty          Clark W. Barrett          Propositional satisfiability (SAT), satisfiability modulo theories (SMT), automated deduction and applied logic, proof-producing algorithms, formal and semi-formal verification of hardware and software, and combining verification systems.           Marsha Berger          Computational fluid dynamics, adaptive methods, and parallel scientific computing.           Richard Bonneau          Algorithms for learning regulatory networks/biological control, computational structural biology, and systems-biology.           Richard J. Cole          Algorithmics, algorithmic economics and game theory, algorithms in nature and society.           Patrick M. Cousot          Abstract interpretation, semantics, verifcation, and static analysis.           Ernest Davis          Artificial intelligence, knowledge representation, and automated commonsense reasoning.           Yevgeniy Dodis          Cryptography, security, information theory, complexity theory, algorithms.           Rob Fergus          Computer vision and computational photography.           Davi Geiger          Computational vision, learning, memory, and applications.           Benjamin Goldberg          Design and implementation of programming languages, compiler verification, and compiler optimizations.           Allan Gottlieb          Parallel computing, computer architecture, operating systems, distributed systems, and free software.           Robert Grimm          Operating systems, distributed systems, and interaction of programming languages and systems.           Ralph Grishman          Natural language processing.           Zvi Kedem          Algorithmic techniques for designing computer-based systems.           Subhash Khot          Algorithms, computational complexity, and computational intractability.           Yann Andre LeCun          Machine learning, computer vision, autonomous robotics, computational neuroscience, computational statistics, computational economics, hardware architectures for vision, digital libraries, and data compression.           Jinyang Li          Distributed systems, operating systems, wireless networks.           Bhubaneswar Mishra          Bioinformatics, algorithmic algebra, robotics, computational biology, and computational finance.           Mehryar Mohri          Machine learning, computational biology, text and speech processing, algorithms, and theory.           Michael Overton          Numerical analysis, linear algebra, optimization, and mathematical programming.           Kenneth Perlin          Computer graphics, simulation, computer/human interface, multimedia, and animation.           Theodore (Ted) S. Rappaport          Wireless communication systems and networks, compressed sensing for wireless and video applications, RF/Analog circuit design, antennas and propagation, wireless for medical applications.           Oded Regev          Lattice-based cryptography, quantum computation, and mathematical aspects of theoretical computer science.           Dennis E. Shasha          Network inference and protein design for biology, software for searching databases of trees and graphs, outsourcing data while preserving privacy, finding patterns in time series, DNA computing, and puzzles.           Victor J. Shoup          Cryptography and algorithms.           Alan R. Siegel          VLSI design, analysis of algorithms, lower bounds, parallel algorithms, probability, and combinatorial geometry.           David Sontag          Machine learning, graphical models, artificial intelligence           Joel Spencer          Theoretical computer science and discrete mathematics.           Lakshminarayanan Subramanian          Networks, distributed systems, computing for development .           Michael Walfish          Systems, security, and networks.           Thomas Wies          Program analysis and verification; automated deduction; concurrent software; software productivity           Margaret Wright          Optimization, scientific computing, and linear algebra.           Chee Yap          Computational geometry, computer algebra, visualization, algorithmic robotics, complexity theory, and numerical robustness issues and exact computation.           Denis Zorin          Computer graphics, geometric modeling, subdivision surfaces, multiresolution surface representations, fluid and solid simulation, and perceptually based methods for computer graphics.          Research Faculty          Adam Meyers          Natural Language Processing, Linguistics, Pre-college Computer Science Education.           Satoshi Sekine          Natural language processing, synctactic analysis, and information extraction.                        top | contact webmaster"}, {"content": "NYU Computer Science Department                                                                                                         Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                            Course List, Spring 2015    Fall 2014 | Spring 2015 | Summer 2015 | Fall 2015      Course Archive       Graduate Schedule       Undergraduate Schedule       Graduate Course Descriptions:  Regular courses (GSAS Bulletin) ,  Special Topics Course Archive       Undergraduate Course Descriptions                                            Mohamed Zahran            CSCI-GA.1144-001     PAC II                                  Scott Buckfelder            CSCI-GA.1144-002     PAC II Recitation                                  Joel Spencer            CSCI-GA.1170-001     Fundamental Algorithms                                  Molly Alter            CSCI-GA.1170-002     Fundamental Algorithms Recitation                                  Benjamin Goldberg            CSCI-GA.2110-001     Programming Languages                                  Arpit Jain            CSCI-GA.2110-002     Programming Languages Recitation                                   CANCELLED            CSCI-GA.2112-001     Scientific Computing                                  Kristoffer Rose;Eva Rose            CSCI-GA.2130-001     Compiler Construction                                  Hubertus Franke            CSCI-GA.2250-001     Operating Systems                                   CANCELLED            CSCI-GA.2250-002     Operating Systems                                  Jean-Claude Franchitti            CSCI-GA.2262-001     Data Communications and Networks                                  Kenneth Perlin            CSCI-GA.2270-001     Computer Graphics                                  Olof Widlund            CSCI-GA.2421-001     Numerical Methods II                                  Jean-Claude Franchitti            CSCI-GA.2433-001     Database Systems                                  Jean-Claude Franchitti            CSCI-GA.2440-001     Software Engineering                                  Richard Bonneau            CSCI-GA.2520-001     Bioinformatics and Genomes                                  Ernest Davis            CSCI-GA.2560-001     Artificial Intelligence                                  Ernest Davis            CSCI-GA.2580-001     Web Search Engines                                  Cyril Allauzen            CSCI-GA.2585-001     Speech Recognition                                  Ralph Grishman            CSCI-GA.2590-001     Natural Language Processing                                  Lakshminarayanan Subramanian            CSCI-GA.2620-001     Networks and Distributed Systems                                  Jonathan Goodman            CSCI-GA.2945-001     Advanced Topics in Numerical Analysis: Monte Carlo Methods                                  Charles Peskin            CSCI-GA.2945-002     Advanced Topics in Numerical Analysis: The Immersed Boundary Method for Fluid-Structure  Interaction                                  Georg Stadler            CSCI-GA.2945-003     Advanced Topics in Numerical Analysis: High Performance Computing                                  Eran Fishler            CSCI-GA.3033-001     Financial Computing                                  Bhubaneswar Mishra            CSCI-GA.3033-002     Social Networks                                  Michael Schidlowsky            CSCI-GA.3033-003     Production Quality Software                                  Yoav Zibin            CSCI-GA.3033-004     Social Multiplayer Games                                  Suzanne McIntosh            CSCI-GA.3033-005     Realtime &amp; Big Data Analytics                                  Matthew Doherty            CSCI-GA.3033-006     Search Engine Architecture                                  Mehryar Mohri            CSCI-GA.3033-007     Advanced Machine Learning                                  Cory Plock            CSCI-GA.3033-008     .Net Web Application Development                                   CANCELLED            CSCI-GA.3033-009     Virtual Machines: Concepts and Applications                                  Chee Yap            CSCI-GA.3033-010     Robot Motion Planning***                                     Nikolai Joukov; Murthy Devarakonda; Harigovind Ramasamy; John Rofrano            CSCI-GA.3033-011     Transformation to Cloud Computing                                  Patrick Cousot            CSCI-GA.3110-001     Honors Programming Languages                                  Zvi Kedem            CSCI-GA.3205-001     Applied Cryptography &amp; Network Security                                   CANCELLED            CSCI-GA.3220-001     Advanced Cryptography                                  Evan Korth            CSCI-GA.3812-001     Information Technology Projects *                                   Faculty            CSCI-GA.3813-001     Adv Lab MS *                                   Faculty            CSCI-GA.3813-002     Adv Lab MS *                                   Faculty            CSCI-GA.3813-003     Adv Lab MS *                                   Faculty            CSCI-GA.3813-004     Adv Lab MS *                                   Faculty            CSCI-GA.3813-005     Adv Lab PhD **                                   Faculty            CSCI-GA.3813-006     Adv Lab PhD **                                   Faculty            CSCI-GA.3813-007     Adv Lab PhD **                                   Faculty            CSCI-GA.3813-008     Adv Lab PhD **                                   Faculty            CSCI-GA.3840-001     Master&#39;s Thesis Research *                                  Yevgeniy Dodis            CSCI-GA.3850-001     PhD Seminar: Cryptography **                                  Thomas Wies            CSCI-GA.3850-004     PhD Seminar: Formal Methods **                                  Mehryar Mohri            CSCI-GA.3850-006     PhD Seminar: Machine Learning **                                   Faculty            CSCI-GA.3860-001     PhD Thesis Research **                                  Craig Kapp            CSCI-UA.0002-001     Intro To Computer Programming                                  Deena Engel            CSCI-UA.0002-002     Intro To Computer Programming                                  Craig Kapp            CSCI-UA.0002-003     Intro To Computer Programming                                  Michael Kadri            CSCI-UA.0002-004     Intro To Computer Programming                                   CANCELLED            CSCI-UA.0002-005     Intro To Computer Programming                                  Jerry Waxman            CSCI-UA.0002-006     Intro To Computer Programming                                  Joseph Versoza            CSCI-UA.0002-007     Intro To Computer Programming                                  Joseph Versoza            CSCI-UA.0002-008     Intro To Computer Programming                                   CANCELLED            CSCI-UA.0002-009     Intro To Computer Programming                                  Michael Kadri            CSCI-UA.0002-010     Intro To Computer Programming                                  Syed Salahuddin            CSCI-UA.0002-011     Intro To Computer Programming                                  Joshua Clayton            CSCI-UA.0004-001     Intro to Web Design &amp; Computer Principles                                  Alvaro Olsen            CSCI-UA.0004-002     Intro to Web Design &amp; Computer Principles                                  Nathan Hull            CSCI-UA.0004-003     Intro to Web Design &amp; Computer Principles                                  Michell Cardona            CSCI-UA.0004-004     Intro to Web Design &amp; Computer Principles                                  Craig Kapp            CSCI-UA.0004-005     Intro to Web Design &amp; Computer Principles                                  Alvaro Olsen            CSCI-UA.0004-006     Intro to Web Design &amp; Computer Principles                                  Adam Scher            CSCI-UA.0004-007     Intro to Web Design &amp; Computer Principles                                  Deena Engel            CSCI-UA.0060-001     Database Design And Web Implementation                                  Amos Bloomberg            CSCI-UA.0060-002     Database Design And Web Implementation                                  Nathan Hull            CSCI-UA.0061-001     Web Development And Programming                                  Joshua Clayton            CSCI-UA.0061-002     Web Development And Programming                                  Joanna Klukowska            CSCI-UA.0101-001     Intro To Computer Science                                  Joanna Klukowska            CSCI-UA.0101-002     Intro To Computer Science                                  Amos Bloomberg            CSCI-UA.0101-003     Intro To Computer Science                                  Joseph Versoza            CSCI-UA.0101-004     Intro To Computer Science                                  Tim Mitchell            CSCI-UA.0101-005     Intro To Computer Science                                   CANCELLED            CSCI-UA.0101-006     Intro To Computer Science                                  Douglas Moody            CSCI-UA.0101-007     Intro To Computer Science                                  Joanna Klukowska            CSCI-UA.0102-001     Data Structures                                  Joanna Klukowska            CSCI-UA.0102-002     Data Structures                                  Paul Gazzillo            CSCI-UA.0102-003     Data Structures - Recitation                                  Evan Korth            CSCI-UA.0102-004     Data Structures                                  Diego Francisco Rincon Santana            CSCI-UA.0102-005     Data Structures - Recitation                                  Chee Yap            CSCI-UA.0102-006     Data Structures                                  Huan Kang            CSCI-UA.0102-007     Data Structures - Recitation                                  Mohamed Zahran            CSCI-UA.0201-001     Computer Systems Organization                                  Mohamed Zahran            CSCI-UA.0201-002     Computer Systems Organization                                  Joanna Klukowska            CSCI-UA.0201-003     Computer Systems Organization                                  Michael Walfish            CSCI-UA.0202-001     Operating Systems                                  Michael Walfish            CSCI-UA.0202-002     Operating Systems                                  Alan Siegel            CSCI-UA.0310-001     Basic Algorithms                                  Alan Siegel            CSCI-UA.0310-002     Basic Algorithms                                  Alan Siegel            CSCI-UA.0310-003     Basic Algorithms - Recitation                                  Yevgeniy Dodis            CSCI-UA.0310-004     Basic Algorithms                                  Maria Pershina            CSCI-UA.0310-005     Basic Algorithms - Recitation                                  Charles Peskin            CSCI-UA.0330-001     Introduction to Computer Simulation                                  Manas Rachh            CSCI-UA.0330-002     Introduction to Computer Simulation                                  Amos Bloomberg            CSCI-UA.0380-001     Topics of General Interest: Physical Computing                                  Joshua Clayton            CSCI-UA.0380-002     Topics of General Interest: Drawing on the Web                                  Lakshminarayanan Subramanian            CSCI-UA.0380-003     Topics of General Interest: Technology and Economic Development                                  Margaret Wright            CSCI-UA.0421-001     Numerical Computing                                  Victor Shoup            CSCI-UA.0478-001     Introduction To Cryptography                                  Davi Geiger            CSCI-UA.0480-001     Special Topics: Computer Vision                                  Nathan Hull            CSCI-UA.0480-002     Special Topics: iOS Programming                                  Mohamed Zahran            CSCI-UA.0480-003     Special Topics: Parallel Computing                                  John Zhang            CSCI-UA.0480-004     Special Topics: Algorithmic Problem Solving                                  Theodore Rappaport            CSCI-UA.0480-005     Special Topics: Electrical Engineering for Computer Scientists                                  Thomas Wies            CSCI-UA.0480-006     Special Topics: Principles of Programming Languages                                  Brett Bernstein;Eric Schles            CSCI-UA.0480-007     Special Topics: Algorithmic Problem Solving - RECITATION                                  TBA            MAINT-GA.4747-001     Maintenance of Matriculation (MS students)                                  TBA            MAINT-GA.4747-004     Maintenance of Matriculation (non-supported PhD students)                  * indicates controlled enrollment (permission number required for registration). Contact your program advisor for CSCI-GA.3812, CSCI-GA.3813 sections 001 - 004 &amp; CSCI-GA.3840-001.    ** indicates controlled enrollment (permission number required for registration). Contact Santiago Pizzini (pizzini@cs.nyu.edu) for CSCI-GA.3813 sections 005-008, CSCI-GA.3850 (all sections) &amp; CSCI-GA.3860.    *** indicates controlled enrollment (permission number required for registration). Please contact the instructor.                  top | contact webmaster"}]}]