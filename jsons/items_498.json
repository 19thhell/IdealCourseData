[{"detail": [{"content": "Database Systems Home Page       Database Systems    G22.2433.01   Spring 2006   Monday 5:00 - 7, Warren Weaver 109.        Prof Dennis Shasha       Instructors: Dennis Shasha (shasha@cs.nyu.edu) with Alberto Lerner (lerner@cs.nyu.edu)      Office hours: Monday 4-4:45, Warren Weaver room 422 also after class.      Teaching Assistants:  Guy Lichtman (lichtman@cs.nyu.edu) -- he will be familiar with the course material so you can ask him questions. He is the primay source of knowledge about software we will use. He is also the class list administrator. His software web page is    here               OVERVIEW       The goal of this course is  to study the design and data manipulation of large data applications. The course will be addressed to students who have only an elementary familiarity with databases, but want to learn how to use such systems effectively and correctly.    Virtually every interesting computer application involves  large data. Database management systems have grown up as generic pieces of software that allow the input, modification, and querying of large data. The chief amenities offered by such systems are a high level query language (SQL, XPath, XQuery), indexes to make data access fast, an optimizer that chooses how to process queries, and the illusion of transactional atomicity (concurrency control and recovery). The job of a database designer is to understand an application,  decide on the table design (which attributes go into which tables), decide on a set of indexes, and build queries. Doing this well entails learning design theory (normal forms), the various kinds of indexes, and SQL. We will spend the bulk of this course on these issues though we will touch on data mining, data warehouses, capacity planning, transaction processing, semantic extensions to SQL for finance, and XML.    Syllabus   The syllabus follows the chapter in the book  Database Systems Concepts, fifth edition. You can use any recent edition however.     Introduction to the issues Find slides    here.     Relational model -- algebras  and the advantage of having a single data type -- relation (intuitively, a table where the order of rows doesn't matter). Every operation takes a relation and produces one. Find slides    here.   See notes on lecture 1   here     SQL -- starts simple, but can get quite complex. It's important to think in terms of bulk as opposed to scalar operators. When used to query and manipulate data, SQL is a \"Data Manipulation Language\" (DML). Find slides    here.   See notes on lecture 2   here   See notes on lecture 3   here   We also discuss SQL as a language for setting up databases, i.e. as a \"Data Definition Language\" (DDL): Find slides    here.     Entity relationship-based design  Find slides    here.   See notes on lecture 4   here     Normalization theory -- the theory behind database design Find slides    here.   See notes on lecture 6   here     XML, Xquery Find slides    here.     File structures and indexing Find slides    here.   See notes on    this lecture     Query processing Find slides    here.   See notes on    this lecture     Related to file  structures and query processing is how to configure your system. Here is an approximation to an n-server    capacity planner.     Query optimization Find slides    here.   See notes on    this lecture     Data warehousing and data mining Find slides    here.   Also find some notes from the data warehousing portion    of the database tuning notes     In class, we will discuss  clustering. If we have time, we will discuss information gain and decision tree building based on    Andrew Moore's notes.   See notes on    this lecture     Personalized search using Bigtable: Bigtable is a system for storing and managing very large amounts of structured data.  Unlike a traditional database system, the row/column space can be sparse. Row keys and values are arbitrary strings, and the system allows each row/column cell to store not just a single value but a set of values with associated timestamps, simplifying analyses that examine how values have changed over time. Data in a single table is internally broken at arbitrary row boundaries to form contiguous regions of data called tablets.   Other fun topics (inserted at various times in the semester): array databases, more data mining and so on. You can find the lecture about array query languages    here   Sam Madden in his class at MIT on the subject suggested the    following questions pertaining to this topic.      Homeworks  You may work in groups of two on the homeworks. Please sign both of your names.       Please find homework 1 here.       Please find homework 2 here.       Please find homework 3 here, though we need to give you a bit more information.      Grading    Homeworks 1/2 and in-class exam 1/2 (closed book but for which you may bring in one 8.5 inch by 11 inch sheet of paper on which you may write or type anything you like on either side of the sheet). The in-class exam will be given on April 24, 2006. For the last class on May 1, you will be invited to put your feet up on the table and relax. Note that you can work in teams of 1 or 2 for all homeworks.   Exam topics follow what we covered in the lectures. Nothing optional will be included (though I encourage you to read that). Typical questions: given an English description, find the SQL; canonical covers and database table design; index selection; capacity planning; application design (given an English description, find the table design and select appropriate indexes); XML; query optimization basics; etc.   Late policy:  Homeworks must be submitted electronically at 4:30 PM on the day they are due to the teaching assistant or in class if by hard copy. There are no late homeworks. If you miss a homework, then I need a doctor's note or a note from your employer (with contact information). Your scores from the other homeworks will be averaged in to give you a grade for the missing one. If you miss the final exam, then again I need a note from your employer or doctor (again with contact information).  Please note that I may verify these notes. I'm sorry to be hard-nosed about this, but I'm giving you the homeworks as of the first day of class so you should make these deadlines.    Notes and Other Information    Register for the    class list server mailing system here.    The notes come largely from the book   Database System Concepts   by Silberschatz, Korth, and Sudarshan fourth or fifth edition. Formally, this book is optional, so you can get it  from an online bookseller as you wish. There are also six copies on reserve in Bobst (not in the Courant library but in Bobst).    Here is a lecture on    biosurveillance    by Andrew Moore and colleagues.   Here is a lecture    on time series analysis   by my colleagues and me.     We will also discuss, if we have time   several related topics found at the end of these lecture notes   (i) high performance replicated database systems without the use of two phase commit, (ii) case studies from Wall Street, (iii) a self-tuning technique that improves on LRU, and (iv) a data structure for data warehouses.   Here are some notes about    good and bad uses of stored procedures          Here is Joe Conron's nice paper on indexes (from when he was a master's student).     Here are notes about   materialized views in Oracle.         Finally, here are the rules about    academic honesty."}]},
{"detail": [{"content": "Database Systems Home Page       Database Systems    G22.2433.01   Spring 2006   Monday 5:00 - 7, Warren Weaver 109.        Prof Dennis Shasha       Instructors: Dennis Shasha (shasha@cs.nyu.edu) with Alberto Lerner (lerner@cs.nyu.edu)      Office hours: Monday 4-4:45, Warren Weaver room 422 also after class.      Teaching Assistants:  Guy Lichtman (lichtman@cs.nyu.edu) -- he will be familiar with the course material so you can ask him questions. He is the primay source of knowledge about software we will use. He is also the class list administrator. His software web page is    here               OVERVIEW       The goal of this course is  to study the design and data manipulation of large data applications. The course will be addressed to students who have only an elementary familiarity with databases, but want to learn how to use such systems effectively and correctly.    Virtually every interesting computer application involves  large data. Database management systems have grown up as generic pieces of software that allow the input, modification, and querying of large data. The chief amenities offered by such systems are a high level query language (SQL, XPath, XQuery), indexes to make data access fast, an optimizer that chooses how to process queries, and the illusion of transactional atomicity (concurrency control and recovery). The job of a database designer is to understand an application,  decide on the table design (which attributes go into which tables), decide on a set of indexes, and build queries. Doing this well entails learning design theory (normal forms), the various kinds of indexes, and SQL. We will spend the bulk of this course on these issues though we will touch on data mining, data warehouses, capacity planning, transaction processing, semantic extensions to SQL for finance, and XML.    Syllabus   The syllabus follows the chapter in the book  Database Systems Concepts, fifth edition. You can use any recent edition however.     Introduction to the issues Find slides    here.     Relational model -- algebras  and the advantage of having a single data type -- relation (intuitively, a table where the order of rows doesn't matter). Every operation takes a relation and produces one. Find slides    here.   See notes on lecture 1   here     SQL -- starts simple, but can get quite complex. It's important to think in terms of bulk as opposed to scalar operators. When used to query and manipulate data, SQL is a \"Data Manipulation Language\" (DML). Find slides    here.   See notes on lecture 2   here   See notes on lecture 3   here   We also discuss SQL as a language for setting up databases, i.e. as a \"Data Definition Language\" (DDL): Find slides    here.     Entity relationship-based design  Find slides    here.   See notes on lecture 4   here     Normalization theory -- the theory behind database design Find slides    here.   See notes on lecture 6   here     XML, Xquery Find slides    here.     File structures and indexing Find slides    here.   See notes on    this lecture     Query processing Find slides    here.   See notes on    this lecture     Related to file  structures and query processing is how to configure your system. Here is an approximation to an n-server    capacity planner.     Query optimization Find slides    here.   See notes on    this lecture     Data warehousing and data mining Find slides    here.   Also find some notes from the data warehousing portion    of the database tuning notes     In class, we will discuss  clustering. If we have time, we will discuss information gain and decision tree building based on    Andrew Moore's notes.   See notes on    this lecture     Personalized search using Bigtable: Bigtable is a system for storing and managing very large amounts of structured data.  Unlike a traditional database system, the row/column space can be sparse. Row keys and values are arbitrary strings, and the system allows each row/column cell to store not just a single value but a set of values with associated timestamps, simplifying analyses that examine how values have changed over time. Data in a single table is internally broken at arbitrary row boundaries to form contiguous regions of data called tablets.   Other fun topics (inserted at various times in the semester): array databases, more data mining and so on. You can find the lecture about array query languages    here   Sam Madden in his class at MIT on the subject suggested the    following questions pertaining to this topic.      Homeworks  You may work in groups of two on the homeworks. Please sign both of your names.       Please find homework 1 here.       Please find homework 2 here.       Please find homework 3 here, though we need to give you a bit more information.      Grading    Homeworks 1/2 and in-class exam 1/2 (closed book but for which you may bring in one 8.5 inch by 11 inch sheet of paper on which you may write or type anything you like on either side of the sheet). The in-class exam will be given on April 24, 2006. For the last class on May 1, you will be invited to put your feet up on the table and relax. Note that you can work in teams of 1 or 2 for all homeworks.   Exam topics follow what we covered in the lectures. Nothing optional will be included (though I encourage you to read that). Typical questions: given an English description, find the SQL; canonical covers and database table design; index selection; capacity planning; application design (given an English description, find the table design and select appropriate indexes); XML; query optimization basics; etc.   Late policy:  Homeworks must be submitted electronically at 4:30 PM on the day they are due to the teaching assistant or in class if by hard copy. There are no late homeworks. If you miss a homework, then I need a doctor's note or a note from your employer (with contact information). Your scores from the other homeworks will be averaged in to give you a grade for the missing one. If you miss the final exam, then again I need a note from your employer or doctor (again with contact information).  Please note that I may verify these notes. I'm sorry to be hard-nosed about this, but I'm giving you the homeworks as of the first day of class so you should make these deadlines.    Notes and Other Information    Register for the    class list server mailing system here.    The notes come largely from the book   Database System Concepts   by Silberschatz, Korth, and Sudarshan fourth or fifth edition. Formally, this book is optional, so you can get it  from an online bookseller as you wish. There are also six copies on reserve in Bobst (not in the Courant library but in Bobst).    Here is a lecture on    biosurveillance    by Andrew Moore and colleagues.   Here is a lecture    on time series analysis   by my colleagues and me.     We will also discuss, if we have time   several related topics found at the end of these lecture notes   (i) high performance replicated database systems without the use of two phase commit, (ii) case studies from Wall Street, (iii) a self-tuning technique that improves on LRU, and (iv) a data structure for data warehouses.   Here are some notes about    good and bad uses of stored procedures          Here is Joe Conron's nice paper on indexes (from when he was a master's student).     Here are notes about   materialized views in Oracle.         Finally, here are the rules about    academic honesty."}, {"content": "Advanced Database Systems Home Page       Advanced Database Systems    CSCI-GA.2434-001   Fall 2013   Tuesdays 5:00 - 7, Warren Weaver 101.        Prof Dennis Shasha       Instructor: Dennis Shasha (shasha@cs.nyu.edu)      Office hours: Tuesdays at 9 pm in Warren Weaver 101    Listserv for email announcements:  http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2434_001_fa13.      Graders:    Long Yang (ly603@nyu.edu)   Akshay Kumar (ak4126@nyu.edu)             GOALS       To study the internals of database systems as an introduction to research and as a basis for rational performance tuning.    The study of internals will concern topics at the intersection of database system, operating system, and distributed computing research and development. Specific to databases is the support of the notion of transaction: a multi-step atomic unit of work that must appear to execute in isolation and in an all-or-nothing manner. The theory and practice of transaction processing is the problem of making this happen efficiently and reliably.    Tuning is the activity of making your database system run faster. The capable tuner must understand the internals and externals of a database system well enough to understand what could be affecting the performance of a database application. We will see that interactions between different levels of the system, e.g., index design and concurrency control, are extremely important, so will require a new optic on database management design as well as introduce new research issues. Our discussion of tuning will range from the hardware to conceptual design, touching on operating systems, transactional subcomponents, index selection, query reformulation, normalization decisions, and the comparative advantage of object-oriented database systems. This portion of the course will be heavily sprinkled with case studies from database tuning in biotech, telecommunications, and finance. Also, since the book that Philippe Bonnet and I have written has many tests associated with it, you will get the benefit of those tests.    Because of my recent research (and product) interests, this year will include frequent discussions of      databases that support ordered queries such as those found in finance and science and   technology-enhanced privacy.      Class materials       Here is the syllabus in   pdf.      Please find homework 1 here.       Please find homework 2 here. This one includes a tuning practicum so give yourself extra time.   Homework 2 also includes a second part, called the supplement, but that is required. Please find that    here   You will need to    download the free version of q for that purpose.     A    frequently asked question write-up   about the replicated concurrency control project. Also, here is a set of    sample tests    for that project.   There are two principal sets of class notes:   transaction processing in pdf  and    database tuning slides . However there are ancillary lecture notes.   Here is a lecture on    concurrent search structure algorithms.     Here   find a brief lecture traitorous failures   from the paper \"Easy Impossibility Proofs for Distributed Consensus Problems\" by Fischer, M. and Lynch, N. and Merritt, M.   Here   is a relevant picture. Network partitions alone can lead to problems as shown   in these notes that are derived from Lynch, Fisher, and Patterson   A related topic is the so-called   CAP theorem   which states that achieving consistency (up-to-date information is always available), availability (if some site is up, it will have the most up-to-date information), and partition tolerance (this all works even if the network is broken) cannot all be done simultaneously.   One lecture will be on    array query languages.   The system that aquery is most similar to has   a nice way of scaling data.   In fact, here is an  argument for why it should be used for Big Data .   Here are Alberto Lerner's lecture notes on   partitioning in large data systems   and the    accompanying prose notes     Here is a nice    talk about Not Only SQL databases (nosql).   along with my   notes on that talk.   Here is a link to    a course on NoSQL by Shahram Ghandeharizadeh.   Here is a   taxonomy of NoSQL systems.   Here is one of many    NoSQL benchmarks.     Here are Alberto Lerner's notes on   parallelizing locking, logging, accessing and buffer management     Here is an article about some   successes and failures of big data analysis.     Here is an article about a very   fast transactional system called VoltDB     Here is a    discussion about the merits of eventual consistency vs. transactions.     Here is a    tuning case study from a travel application.   Here is a description of    AppSleuth     Here is a lecture about a   database-inspired language called pig.   Here is a    recent video.     Installing mysql are   on PC, Linux, and Mac.     Eric Hielscher's notes on running mysql are   here.     Another lecture will be on    an approach to allow database outsourcing     Here is an approximation to an n-server    capacity planner.     We will discuss information gain, decision trees and clustering, perhaps among other topics. Here is a web site of tutorials on   data mining by Andrew Moore     Here is a lecture on    biosurveillance    by Andrew Moore and colleagues.   Here is a lecture    on time series analysis   by my colleagues and me.   Here    is a cartoon concerning a related puzzle about sketches.   Here are some notes about    clustering.       We will also discuss, if we have time   several related topics found at the end of these lecture notes   (i) high performance replicated database systems without the use of two phase commit, (ii) case studies from Wall Street, (iii) a self-tuning technique that improves on LRU, and (iv) a data structure for data warehouses.   Here is a nice   poster showing the genealogy of relational databases.        Books         Concurrency Control and Recovery in Database Systems    by Bernstein, Hadzilacos, and Goodman, Addison-Wesley, 1987. ISBN 0-201-10715-5 Here is a local copy in zip format.    Your reading in this book should focus on the topics we hit in lecture. Note that the available copies algorithm I present is a slightly different version from tha presented in the book. Please use mine for the project.    Database Tuning: principles, experiments, and troubleshooting techniques  by Dennis Shasha and Philippe Bonnet 2002 Morgan Kaufmann Publishers; ISBN: 1558607536   We will go through essentially this whole book.   Additional books can be found in the syllabus.        Here are some    experiments having to do with database tuning  .   Here is how to call C from K:  Don Orth's description of how to call C from K.     Here are Alan Fekete's slides on snapshot isolation  Snapshot Isolation and Fixes to It   and the even better fixes (but in a paper)    due to Michael Cahill, Uwe Roehm, and Alan Fekete.       Here is Joe Conron's nice paper on indexes (from when he was a master's student).     Some results from database tuning projects.   Presented as rules of thumb.   Here is one very nice tuning project by   Yuhong Chen.   Here is another by   Ilya Finkelshteyn   Here is a third by   Marina Balina   Here is a fourth by   Pratik Daga.       Here are Alberto Lerner's excellent notes on performance monitoring.   Here you can find   his thesis.     Here are notes about   materialized views in Oracle.     Here is a call to a new organization of    databases by the Turing Award winner Jim Gray     Here are two very nice and very practical papers about  data warehousing by one of the foremost practitioners in the field:   Ralph Kimball on constructing an enterprise data warehouse   and   Ralph Kimball on why to use star schemas in dimensional modeling.     Finally, here are the rules about    academic honesty."}]},
{"detail": [{"content": "Database Systems Home Page       Database Systems    G22.2433.01   Spring 2006   Monday 5:00 - 7, Warren Weaver 109.        Prof Dennis Shasha       Instructors: Dennis Shasha (shasha@cs.nyu.edu) with Alberto Lerner (lerner@cs.nyu.edu)      Office hours: Monday 4-4:45, Warren Weaver room 422 also after class.      Teaching Assistants:  Guy Lichtman (lichtman@cs.nyu.edu) -- he will be familiar with the course material so you can ask him questions. He is the primay source of knowledge about software we will use. He is also the class list administrator. His software web page is    here               OVERVIEW       The goal of this course is  to study the design and data manipulation of large data applications. The course will be addressed to students who have only an elementary familiarity with databases, but want to learn how to use such systems effectively and correctly.    Virtually every interesting computer application involves  large data. Database management systems have grown up as generic pieces of software that allow the input, modification, and querying of large data. The chief amenities offered by such systems are a high level query language (SQL, XPath, XQuery), indexes to make data access fast, an optimizer that chooses how to process queries, and the illusion of transactional atomicity (concurrency control and recovery). The job of a database designer is to understand an application,  decide on the table design (which attributes go into which tables), decide on a set of indexes, and build queries. Doing this well entails learning design theory (normal forms), the various kinds of indexes, and SQL. We will spend the bulk of this course on these issues though we will touch on data mining, data warehouses, capacity planning, transaction processing, semantic extensions to SQL for finance, and XML.    Syllabus   The syllabus follows the chapter in the book  Database Systems Concepts, fifth edition. You can use any recent edition however.     Introduction to the issues Find slides    here.     Relational model -- algebras  and the advantage of having a single data type -- relation (intuitively, a table where the order of rows doesn't matter). Every operation takes a relation and produces one. Find slides    here.   See notes on lecture 1   here     SQL -- starts simple, but can get quite complex. It's important to think in terms of bulk as opposed to scalar operators. When used to query and manipulate data, SQL is a \"Data Manipulation Language\" (DML). Find slides    here.   See notes on lecture 2   here   See notes on lecture 3   here   We also discuss SQL as a language for setting up databases, i.e. as a \"Data Definition Language\" (DDL): Find slides    here.     Entity relationship-based design  Find slides    here.   See notes on lecture 4   here     Normalization theory -- the theory behind database design Find slides    here.   See notes on lecture 6   here     XML, Xquery Find slides    here.     File structures and indexing Find slides    here.   See notes on    this lecture     Query processing Find slides    here.   See notes on    this lecture     Related to file  structures and query processing is how to configure your system. Here is an approximation to an n-server    capacity planner.     Query optimization Find slides    here.   See notes on    this lecture     Data warehousing and data mining Find slides    here.   Also find some notes from the data warehousing portion    of the database tuning notes     In class, we will discuss  clustering. If we have time, we will discuss information gain and decision tree building based on    Andrew Moore's notes.   See notes on    this lecture     Personalized search using Bigtable: Bigtable is a system for storing and managing very large amounts of structured data.  Unlike a traditional database system, the row/column space can be sparse. Row keys and values are arbitrary strings, and the system allows each row/column cell to store not just a single value but a set of values with associated timestamps, simplifying analyses that examine how values have changed over time. Data in a single table is internally broken at arbitrary row boundaries to form contiguous regions of data called tablets.   Other fun topics (inserted at various times in the semester): array databases, more data mining and so on. You can find the lecture about array query languages    here   Sam Madden in his class at MIT on the subject suggested the    following questions pertaining to this topic.      Homeworks  You may work in groups of two on the homeworks. Please sign both of your names.       Please find homework 1 here.       Please find homework 2 here.       Please find homework 3 here, though we need to give you a bit more information.      Grading    Homeworks 1/2 and in-class exam 1/2 (closed book but for which you may bring in one 8.5 inch by 11 inch sheet of paper on which you may write or type anything you like on either side of the sheet). The in-class exam will be given on April 24, 2006. For the last class on May 1, you will be invited to put your feet up on the table and relax. Note that you can work in teams of 1 or 2 for all homeworks.   Exam topics follow what we covered in the lectures. Nothing optional will be included (though I encourage you to read that). Typical questions: given an English description, find the SQL; canonical covers and database table design; index selection; capacity planning; application design (given an English description, find the table design and select appropriate indexes); XML; query optimization basics; etc.   Late policy:  Homeworks must be submitted electronically at 4:30 PM on the day they are due to the teaching assistant or in class if by hard copy. There are no late homeworks. If you miss a homework, then I need a doctor's note or a note from your employer (with contact information). Your scores from the other homeworks will be averaged in to give you a grade for the missing one. If you miss the final exam, then again I need a note from your employer or doctor (again with contact information).  Please note that I may verify these notes. I'm sorry to be hard-nosed about this, but I'm giving you the homeworks as of the first day of class so you should make these deadlines.    Notes and Other Information    Register for the    class list server mailing system here.    The notes come largely from the book   Database System Concepts   by Silberschatz, Korth, and Sudarshan fourth or fifth edition. Formally, this book is optional, so you can get it  from an online bookseller as you wish. There are also six copies on reserve in Bobst (not in the Courant library but in Bobst).    Here is a lecture on    biosurveillance    by Andrew Moore and colleagues.   Here is a lecture    on time series analysis   by my colleagues and me.     We will also discuss, if we have time   several related topics found at the end of these lecture notes   (i) high performance replicated database systems without the use of two phase commit, (ii) case studies from Wall Street, (iii) a self-tuning technique that improves on LRU, and (iv) a data structure for data warehouses.   Here are some notes about    good and bad uses of stored procedures          Here is Joe Conron's nice paper on indexes (from when he was a master's student).     Here are notes about   materialized views in Oracle.         Finally, here are the rules about    academic honesty."}, {"content": "Advanced Database Systems Home Page       Advanced Database Systems    CSCI-GA.2434-001   Fall 2013   Tuesdays 5:00 - 7, Warren Weaver 101.        Prof Dennis Shasha       Instructor: Dennis Shasha (shasha@cs.nyu.edu)      Office hours: Tuesdays at 9 pm in Warren Weaver 101    Listserv for email announcements:  http://www.cs.nyu.edu/mailman/listinfo/csci_ga_2434_001_fa13.      Graders:    Long Yang (ly603@nyu.edu)   Akshay Kumar (ak4126@nyu.edu)             GOALS       To study the internals of database systems as an introduction to research and as a basis for rational performance tuning.    The study of internals will concern topics at the intersection of database system, operating system, and distributed computing research and development. Specific to databases is the support of the notion of transaction: a multi-step atomic unit of work that must appear to execute in isolation and in an all-or-nothing manner. The theory and practice of transaction processing is the problem of making this happen efficiently and reliably.    Tuning is the activity of making your database system run faster. The capable tuner must understand the internals and externals of a database system well enough to understand what could be affecting the performance of a database application. We will see that interactions between different levels of the system, e.g., index design and concurrency control, are extremely important, so will require a new optic on database management design as well as introduce new research issues. Our discussion of tuning will range from the hardware to conceptual design, touching on operating systems, transactional subcomponents, index selection, query reformulation, normalization decisions, and the comparative advantage of object-oriented database systems. This portion of the course will be heavily sprinkled with case studies from database tuning in biotech, telecommunications, and finance. Also, since the book that Philippe Bonnet and I have written has many tests associated with it, you will get the benefit of those tests.    Because of my recent research (and product) interests, this year will include frequent discussions of      databases that support ordered queries such as those found in finance and science and   technology-enhanced privacy.      Class materials       Here is the syllabus in   pdf.      Please find homework 1 here.       Please find homework 2 here. This one includes a tuning practicum so give yourself extra time.   Homework 2 also includes a second part, called the supplement, but that is required. Please find that    here   You will need to    download the free version of q for that purpose.     A    frequently asked question write-up   about the replicated concurrency control project. Also, here is a set of    sample tests    for that project.   There are two principal sets of class notes:   transaction processing in pdf  and    database tuning slides . However there are ancillary lecture notes.   Here is a lecture on    concurrent search structure algorithms.     Here   find a brief lecture traitorous failures   from the paper \"Easy Impossibility Proofs for Distributed Consensus Problems\" by Fischer, M. and Lynch, N. and Merritt, M.   Here   is a relevant picture. Network partitions alone can lead to problems as shown   in these notes that are derived from Lynch, Fisher, and Patterson   A related topic is the so-called   CAP theorem   which states that achieving consistency (up-to-date information is always available), availability (if some site is up, it will have the most up-to-date information), and partition tolerance (this all works even if the network is broken) cannot all be done simultaneously.   One lecture will be on    array query languages.   The system that aquery is most similar to has   a nice way of scaling data.   In fact, here is an  argument for why it should be used for Big Data .   Here are Alberto Lerner's lecture notes on   partitioning in large data systems   and the    accompanying prose notes     Here is a nice    talk about Not Only SQL databases (nosql).   along with my   notes on that talk.   Here is a link to    a course on NoSQL by Shahram Ghandeharizadeh.   Here is a   taxonomy of NoSQL systems.   Here is one of many    NoSQL benchmarks.     Here are Alberto Lerner's notes on   parallelizing locking, logging, accessing and buffer management     Here is an article about some   successes and failures of big data analysis.     Here is an article about a very   fast transactional system called VoltDB     Here is a    discussion about the merits of eventual consistency vs. transactions.     Here is a    tuning case study from a travel application.   Here is a description of    AppSleuth     Here is a lecture about a   database-inspired language called pig.   Here is a    recent video.     Installing mysql are   on PC, Linux, and Mac.     Eric Hielscher's notes on running mysql are   here.     Another lecture will be on    an approach to allow database outsourcing     Here is an approximation to an n-server    capacity planner.     We will discuss information gain, decision trees and clustering, perhaps among other topics. Here is a web site of tutorials on   data mining by Andrew Moore     Here is a lecture on    biosurveillance    by Andrew Moore and colleagues.   Here is a lecture    on time series analysis   by my colleagues and me.   Here    is a cartoon concerning a related puzzle about sketches.   Here are some notes about    clustering.       We will also discuss, if we have time   several related topics found at the end of these lecture notes   (i) high performance replicated database systems without the use of two phase commit, (ii) case studies from Wall Street, (iii) a self-tuning technique that improves on LRU, and (iv) a data structure for data warehouses.   Here is a nice   poster showing the genealogy of relational databases.        Books         Concurrency Control and Recovery in Database Systems    by Bernstein, Hadzilacos, and Goodman, Addison-Wesley, 1987. ISBN 0-201-10715-5 Here is a local copy in zip format.    Your reading in this book should focus on the topics we hit in lecture. Note that the available copies algorithm I present is a slightly different version from tha presented in the book. Please use mine for the project.    Database Tuning: principles, experiments, and troubleshooting techniques  by Dennis Shasha and Philippe Bonnet 2002 Morgan Kaufmann Publishers; ISBN: 1558607536   We will go through essentially this whole book.   Additional books can be found in the syllabus.        Here are some    experiments having to do with database tuning  .   Here is how to call C from K:  Don Orth's description of how to call C from K.     Here are Alan Fekete's slides on snapshot isolation  Snapshot Isolation and Fixes to It   and the even better fixes (but in a paper)    due to Michael Cahill, Uwe Roehm, and Alan Fekete.       Here is Joe Conron's nice paper on indexes (from when he was a master's student).     Some results from database tuning projects.   Presented as rules of thumb.   Here is one very nice tuning project by   Yuhong Chen.   Here is another by   Ilya Finkelshteyn   Here is a third by   Marina Balina   Here is a fourth by   Pratik Daga.       Here are Alberto Lerner's excellent notes on performance monitoring.   Here you can find   his thesis.     Here are notes about   materialized views in Oracle.     Here is a call to a new organization of    databases by the Turing Award winner Jim Gray     Here are two very nice and very practical papers about  data warehousing by one of the foremost practitioners in the field:   Ralph Kimball on constructing an enterprise data warehouse   and   Ralph Kimball on why to use star schemas in dimensional modeling.     Finally, here are the rules about    academic honesty."}, {"content": "Database Systems Course Page            NEW YORK UNIVERSITY    COMPUTER SCIENCES DEPARTMENT    Spring 1900 oops 2000    G22.2433-001    Database Systems (Graduate Level Course)    Instructor: Viswanath  Poosala (Bell Labs, Lucent Technologies)   Lectures: 5pm-7pm Thursdays. Rm 109.                  Instructor/TA      E-mail address      Office Room      Office Hours            Vishy Poosala      poosala@cs.nyu.edu      Rm 401 WWH      Thu 4-5            Wei Shao      weishao@cs.nyu.edu      Rm 410 WWH      Wed 6-7            Hsing-Kuo Pao (Kenneth)      hsingkuo@cs.nyu.edu      Rm 421 WWH      Fri 3-4            Lexing Ying      lexing@cs.nyu.edu      Rm 417 WWH      Mon 3:45-4:45               Index         Mission  of the course      Text  Books and References      Course  outline      Assignments,  Exams      ANNOUNCEMENTS   (latest: 2/Feb)      Lecture  Notes (latest: 26/Jan)               Mission      This  course is intended to give students a solid background in database management  systems, particularly relational database management systems. Such systems  will be examined from two perspectives: that of a database user ,  and that of a database system implementer . The  primary goal is to develop a keen understanding of how to use a  database in a larger application setting, with the knowledge of the DBMS  internals helping in creating an efficient system. The student will  also develop skills in deploying databases in the World Wide Web setting.      Approximately  half of the course material will focus on the use of DBMSs. This will include  data models, entity relationship model, relational models, an extensive  study of the SQL query language, and database design issues. Advanced features  such as object databases, views, and integrity constraints will also be  discussed briefly.      The  other half of the course will concentrate on the implementation of relational  DBMSs. Topics to be covered include file organizations, access methods  (e.g., ISAM, B+trees, and hashing), external sorting techniques, the implementation  of database operations, and the basic concepts of query optimization. Concurrency  control, recovery, and other advanced implementation issues will be also  be introduced to the extent that time permits.      Towards  the end of the course, the student will be exposed to several novel applications  of DBMSs, including data mining, data warehousing, and geographical databases.            Text Book and References:      Text  book: Database  System Concepts (Third Edition) ,   by Abraham Silberschatz, Henry  F. Korth, and S. Sudarshan, Publishers: McGraw-Hill, 1998. ISBN: 0-07-031086-6.      References:   It  is expected that the student is comfortable with programming in either  C or C++. HTML and CGI can be learnt as the course proceeds. I will  make the reference books available at the library.         C:  The C Programming Language, by Kernighan and Ritchie.      C++:  C++ Primer, by Lippman      CGI:   CGI  Programming on the WWW (online book) ; O'Reilly &amp; Associates Inc.      HTML:  HTML The Definitive Guide, by Musciano &amp; Kennedy; O'Reilly &amp; Associates  Inc.               Assignments/Exams      The  percentage contribution to the final grade is listed in brackets (TENTATIVE)         (5%)  A#1: C/CGI assignment : How to build a  very simple database application without using a DBMS (and playing with  some C, CGI along the way).      (10%)   SQL  assignment ; Answers (SQL queries)      (25%)  March 9th: Midterm: Will cover the DBMS usage part of the course.    Midterm practice questions .   Midterm Answers .        (30%)   Project:  This will test your overall understanding of database design and application  development on the web, using a DBMS.      (30%)  Final Exam: Will cover the entire course material (with more Emphasis on  the second half of the course).               Latest Announcements         (1/Mar/00)   Midterm  practice questions and answers posted.    (27/Feb/00)   Project description posted    (11/Feb/00)   Assignment 2 posted on the web    (2/Feb/00)   C++ versions of cgi libray and header file are now posted  on the cgi page.      (27/Jan/00)   Assignment  1 and Lecture notes have been posted on the web page.      (19/Jan/00)   Get  your SUN accounts (if you don't have one already): Send email to csgrad@cs.nyu.edu  with your name, student ID number, and the course number. The status of  new account requests will be posted outside room 424.The earlier students  request accounts, the quicker the turnaround time of the Sun systems staff.      (15/Jan/00)   Subscribe to the class mailing list immediately: Send mail from your  email account to majordomo@cs.nyu.edu   with empty subject (nothing in the subject) and \" subscribe g22_2433_001_sp00\" in  the body of the mail (no quotes).               Lecture Notes      All  the lecture notes for lectures BEFORE The MIDTERM are provided in Postscript/PDF formats ( download  Postscript Viewer if you don't have one on your machine). They are  very closely aligned with the text book and roughly correspond with the  class lectures, but may contain a few things out of order and a few more  things than discussed in the class. You MUST still refer to the text book  for the full details.  For classes after the midterm, please look at the powerpoint file below.        This  is the pointer to the authors' web site that has all the lecture notes      Course overview (last class) (Powerpoint)    E-R to Relational (Powerpoint)    Physical Organization, Indexes, Query processing, Query optimization              Other useful info:         Web  Programming (HTML Forms, CGI)    MySQL            Vishy  Poosala, Spring'2000.      Please  email the instructor at poosala@cs.nyu.edu   if you have any questions."}]}]