[{"detail": [{"content": "Bonneau Lab / Large Data Sets                                                Structure Prediction       Protein Design       Biclustering + cMonkey       Network Inference       Social Networks       Publications &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Links + Collaborations       People &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Opportunities &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Software + Code       Teaching &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp                        &nbsp     Computing with Large Data Sets                  Course Links      External      Course Wiki      Internal      Course Materials      Evaluation      Syllabus                  Introduction     Enormous collections of data in multiple fields of science and engineering are being gathered and need to be analyzed. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions, and other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data. Biology, and more specificallythe field of systems biology, have seen massive improvements in thetechnologies we use to sequence genomes and measure the levels of gene expression (or activity) in cells under different conditions. These large biology data sets have have features in common with large data sets arising in other fields and illustrate the general need for tools for analysis, manipulation and statisticalanalysis of large data sets. This course will discuss some of the associated unprecedented computational challenges, focusing on these very large data sets arising in computational biology.     High-level languages for mathematical modeling and statistical analysis offer a double-edged sword: use these languages correctly and you'll be able to prototype methods for data analysis and discovery that amaze your co-workers and can be translated into stand-alone code and Web services; but use these language incorrectly and you will end up with inefficient code that is impossible for others to understand. The course is intended to address some of the needed general principles by using the R statistical programming language to analyze large genomic data sets. In the first few lectures I'll describe what these large biology data sets are, where they come from, and what we'll try to learn from them. We will then learn basic statistics fundamentals and how to program R in ways that are efficient in usage of compute-time, memory, and programmer time. We will focus on four main data-sets in this class that come from current genomics and systems-biology studies.     Pre-requisites: Experience in programming. Prior knowledge of biology and statistics is not required. Non-CS majors with programming experience are encouraged to take the class.           Books and Materials     The course will be taught primarily from Web materials and the primary literature.        Web Materials     The main reading assignments will be these and other Web documents:     http://www.r-project.org/ (click on Manuals on the left side-bar)     Translations of many of these documents into several languages are also provided on the R website.        Books (optional)     John Verzani, Using R for Introductory Statistics. Chapman &amp; Hall/CRC. New York, 2005. ISBN 1-58488-4509. A introduction to the language that is woven together with an introduction to statistics.     JohnM. Chambers. Programming with Data. Springer, New York, 1998. ISBN 0-387-98503-4. A general introduction to the S language (which is very similar to R). A great book, but out of date.     Paul Murrell. R Graphics. A book on the core graphics facilities of the R language and environment for statistical computing and graphics (Chapman &amp; Hall/CRC, August 2005).     More R- and S-books on the R Website ( http://www.r-project.org/ )        Code, Packages and libraries used:     We will use only open source code in the course. Each student will need access to a computer with R and all required packages installed as there will be at least one exercise a week, and several graded coding exercises. Most packages are available at: http://cran.cnr.Berkeley.edu/ All packages used will have windows and MacOS binaries available. Packages made as part of assignments will need to compile on Windows, Mac, and linux platforms.        Evaluation     There will be three graded exercises (20 points each) and one final project (40 points). You will also be expected to help build the course Wiki which will be used to design the next iteration of the course (10 points). Optional challenges will be given most weeks and will include visualization, speed and memory challenges depending on the exercise (i.e. best graphic wins, lowest memory footprint wins, fastest run time on oldest computer wins, etc.). Extra-credit points will beawarded to people who win challenges.        Syllabus     Each week will have one hour-long lecture discussing the main points for the week and one hour devoted to working on using those principles via the exercises for the week. Remember that R is a high-level language, and example code will be provided, so many of the items on the syllabus seem more difficult than they, in fact, are. The full tentative syllabus will be provided on the course Wiki.                                        &copy; 2011 Richard Bonneau"}]},
{"detail": [{"content": "Bonneau Lab / Large Data Sets                                                Structure Prediction       Protein Design       Biclustering + cMonkey       Network Inference       Social Networks       Publications &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Links + Collaborations       People &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Opportunities &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Software + Code       Teaching &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp                        &nbsp     Computing with Large Data Sets                  Course Links      External      Course Wiki      Internal      Course Materials      Evaluation      Syllabus                  Introduction     Enormous collections of data in multiple fields of science and engineering are being gathered and need to be analyzed. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions, and other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data. Biology, and more specificallythe field of systems biology, have seen massive improvements in thetechnologies we use to sequence genomes and measure the levels of gene expression (or activity) in cells under different conditions. These large biology data sets have have features in common with large data sets arising in other fields and illustrate the general need for tools for analysis, manipulation and statisticalanalysis of large data sets. This course will discuss some of the associated unprecedented computational challenges, focusing on these very large data sets arising in computational biology.     High-level languages for mathematical modeling and statistical analysis offer a double-edged sword: use these languages correctly and you'll be able to prototype methods for data analysis and discovery that amaze your co-workers and can be translated into stand-alone code and Web services; but use these language incorrectly and you will end up with inefficient code that is impossible for others to understand. The course is intended to address some of the needed general principles by using the R statistical programming language to analyze large genomic data sets. In the first few lectures I'll describe what these large biology data sets are, where they come from, and what we'll try to learn from them. We will then learn basic statistics fundamentals and how to program R in ways that are efficient in usage of compute-time, memory, and programmer time. We will focus on four main data-sets in this class that come from current genomics and systems-biology studies.     Pre-requisites: Experience in programming. Prior knowledge of biology and statistics is not required. Non-CS majors with programming experience are encouraged to take the class.           Books and Materials     The course will be taught primarily from Web materials and the primary literature.        Web Materials     The main reading assignments will be these and other Web documents:     http://www.r-project.org/ (click on Manuals on the left side-bar)     Translations of many of these documents into several languages are also provided on the R website.        Books (optional)     John Verzani, Using R for Introductory Statistics. Chapman &amp; Hall/CRC. New York, 2005. ISBN 1-58488-4509. A introduction to the language that is woven together with an introduction to statistics.     JohnM. Chambers. Programming with Data. Springer, New York, 1998. ISBN 0-387-98503-4. A general introduction to the S language (which is very similar to R). A great book, but out of date.     Paul Murrell. R Graphics. A book on the core graphics facilities of the R language and environment for statistical computing and graphics (Chapman &amp; Hall/CRC, August 2005).     More R- and S-books on the R Website ( http://www.r-project.org/ )        Code, Packages and libraries used:     We will use only open source code in the course. Each student will need access to a computer with R and all required packages installed as there will be at least one exercise a week, and several graded coding exercises. Most packages are available at: http://cran.cnr.Berkeley.edu/ All packages used will have windows and MacOS binaries available. Packages made as part of assignments will need to compile on Windows, Mac, and linux platforms.        Evaluation     There will be three graded exercises (20 points each) and one final project (40 points). You will also be expected to help build the course Wiki which will be used to design the next iteration of the course (10 points). Optional challenges will be given most weeks and will include visualization, speed and memory challenges depending on the exercise (i.e. best graphic wins, lowest memory footprint wins, fastest run time on oldest computer wins, etc.). Extra-credit points will beawarded to people who win challenges.        Syllabus     Each week will have one hour-long lecture discussing the main points for the week and one hour devoted to working on using those principles via the exercises for the week. Remember that R is a high-level language, and example code will be provided, so many of the items on the syllabus seem more difficult than they, in fact, are. The full tentative syllabus will be provided on the course Wiki.                                        &copy; 2011 Richard Bonneau"}, {"content": "Bonneau Lab / Teaching                                                Structure Prediction       Protein Design       Biclustering + cMonkey       Network Inference       Social Networks       Publications &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Links + Collaborations       People &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Opportunities &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Software + Code       Teaching &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp                          &nbsp     Teaching                  Teaching Links      Courses Wiki / Page      Team Teaching      Outreach      Guest Lectures      Tutorials      Courses:      Bioinformatics and Genomes      Computing with Large Data Sets                        I aim to provide practical CS training for biologists and hands on experiences with biology data and biology questions for CS majors. Biology is one of the more interdisciplinary fields and therefore presents curriculum challenges that we are a long way from solving. I hope to continue being a part of the ever-necessary renewal of our CS and biology curriculum. My main teaching activities are concentrated in two new courses that I have designed and teach, a consistent effort to mentor 1-2 high school students at any given time, team-teaching and guest lectures, and the mentorship of PhD and masters students.        My first new solo course at NYU was G23.1127 (x-listed as G22.2520-001) Bioinformatics and Genomes. This class aimed to do three things:           Provide students with a principled and consistent theoretical treatment of the sequence analysis (e.g. alignment, RNA structure prediction and building phylogenetic trees),      Provide practical experience relevant to their research interests via projects, and      Foster, via the projects, the close partnership of Biology and CS graduate students.         This course was designed from scratch, as I did not find any previous model or syllabus that met these three needs. The course ratings and student feedback are quite positive and several of the CS-biology bonds formed within the class were kept up beyond the class, resulting in lasting intellectual partnerships between our graduate students. This year this class has ~30 registered graduate and undergraduate students and ~10 people auditing the class (a very high level of interest for an advanced topic graduate course).     My second new solo course stemmed from what I perceived to be a hole in the undergraduate CS curriculum, practical experience programming with large data-sets and basic statistics. This class teaches students to program using higher-level numerical and statistics languages (like R, octave, numPy) and relational databases while trying to teach them statistics. Evaluation is based on projects and homework. We use genomics data-sets as examples throughout the course, but I encourage students to find problems they are more interested in and have had students projects focus on classification of music, integrating statistics into journalism, and social networking.     I have found that the incoming students (typically CS seniors and juniors) lack even the most rudimentary experience with statistics (my class or something like it is needed). Student feedback has been positive and course rating have been good/high, but I feel this area (programing with data) is something that we need to continue to develop at the undergraduate level at NYU, with major modifications to my course and better integration with courses that develop related topics (a data-science track).     After teaching these two classes I still struggle with balancing test and homework-based evaluation and project driven evaluation. Homework and test based evaluation has the advantage of locally reinforcing the material, helping to pace the students, and identifying students that need more attention. Project driven evaluation and inquiry based curricula, in my experience, leads to better long term learning of skills, large improvements in student communication skills, and better mirrors what we are training these students to do. My undergraduate course is an even mix of these two methods for evaluation, my graduate course is all project driven (since I feel that graduate students should never be made to take quizzes or tests). Although I have taught both of these classes multiple times they are still works in progress, and I hope to continue tuning them in the years to come.     Both of my classes are described in much greater detail on each courses' Wiki / Webpage: http://cook-2.bio.nyu.edu/courses/index.php/Main_Page        G23.1127 / G22.2520-001 Bioinformatics and Genomes     (Spring 2007, 2008, 2009, 2011 - Richard Bonneau, sole instructor)     Graduate Course: Cross listed with CS and Biology. We were successful in forming balanced groups of CS and Bio students and two of the class projects resulted in results that contributed to publications. One nice example was a student in Claude Desplan's lab teaming up with two CS students to make a very nice tool that they then used to explore promoters controlling the circuit surrounding a key step in fly eye development.     The course was well received and I am teaching a slightly revised version of it this semester (SP11). Two years ago 20 students took the class (17 for credit) ~1/2 CS and 1/2 Bio, and is now enrollment is at 30+ students for credit and ~10 auditing. This year I am adapting the curriculum to include three new sections of next-generation sequencing analysis (by popular demand).     Course Outline     Course Wiki        V22.0480-003 Special Topics: Computing with Large Data Sets     (Spring 2009, Fall 2011 - Richard Bonneau, sole instructor)     Undergraduate course, Cross listed with CS and Biology. Enormous collections of data in multiple fields of science and engineering are being gathered that fundamentally challenge the way we analyst large datasets, and thereby our current offerings for undergraduates majoring in CS at NYU. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions. Other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data (for example the planned sequencing on 10,000 human beings). \u00a0This course discusses some of the associated unprecedented computational challenges, focusing on very large data sets arising in computational biology.     High-level languages for mathematical modeling and statistical analysis offer a double-edged sword: use these languages correctly and you\u2019ll be able to prototype methods for data analysis and discovery that amaze your co-workers and can be translated into stand-alone code and Web services; but use these language incorrectly and you will end up with inefficient code that is impossible for others to understand. The course is intended to address some of the needed general principles by using the R statistical programming language to analyze large genomic data sets, which provide examples of data types and statistical analysis common to several problems. In the first few lectures I describe what these large biology data sets are, where they come from, and what we\u2019ll try to learn from them. \u00a0We then learn basic statistics fundamentals and how to program R in ways that are efficient in usage of processor, memory, and programmer time.     Course Outline     Course Wiki      Team Teaching     Team Taught:     BIO CORE II: GENES, SYSTEMS & EVOLUTION (G23.1002.001.SP07)     BIO CORE IV: GENES, SYSTEMS & EVOLUTION (G23.2004.001.SP07)     My module in BioCore covered Genomics technologies, such as microarray manufacture, error/quality control, proteomics, sequencing.        Outreach and Undergraduate Research     I have been devoted to teaching high school students since graduate school. During my PhD I convinced my program to allow me to teach at an area high school (NOVA alternative high school, Seattle) instead of being a teaching assistant. As a Sr. Scientist at the ISB in Seattle I participated in high school out reach as part of the ISB Center for Inquiry Science.     My main outreach activity has been mentoring High-school students over the summer. We have had one High School student in the lab each year, in his second year in the lab Kevin returned for a second year and was able to help Devorah in her first summer in the lab. Three of these interns, including the two high school students, made significant contributions and are included on one or more papers. Both of these students were great and went on to MIT and Princeton respectively.          Devorah Kengmana (Stuyvesant High School, 2 years in lab, Now at MIT)      Kevin Belasco (Scarsdale High School, CT, Now at Princeton)      Alex Pine (CS undergraduate, NYU, 2 years in lab, Now at Bloomberg)      Elena Helman (Biology, Undergraduate, Brown)      Kiran Mayi (Bioenginering, Brooklyn Polytechnic)      Michelle Zhang (Stuyvesant high, 1 year in lab, will start on second year this summer, current lab expert in using Rosetta\u2019s python bindings)            Guest Lectures     I have given guest lectures in the following courses:          (1 Lecture) Microbiology G23.1027      (1 Lecture) Genomics and Bioinformatics V23.0038      (1 Lecture) Principles in Structural Biology (Sackler, Medical School)          Tutorials     Tutorials (NYU-medical school PhD students): These are one-on-one tutorials, given by professors with experience in the area of interest. These tutorials serve the purpose of an alternate proposal. Keren Klein (reviewing papers on protein design), Ben Bartelle (reviewing synthetic biology).                                       &copy; 2011 Richard Bonneau"}]},
{"detail": [{"content": "Bonneau Lab / Large Data Sets                                                Structure Prediction       Protein Design       Biclustering + cMonkey       Network Inference       Social Networks       Publications &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Links + Collaborations       People &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Opportunities &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Software + Code       Teaching &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp                        &nbsp     Computing with Large Data Sets                  Course Links      External      Course Wiki      Internal      Course Materials      Evaluation      Syllabus                  Introduction     Enormous collections of data in multiple fields of science and engineering are being gathered and need to be analyzed. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions, and other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data. Biology, and more specificallythe field of systems biology, have seen massive improvements in thetechnologies we use to sequence genomes and measure the levels of gene expression (or activity) in cells under different conditions. These large biology data sets have have features in common with large data sets arising in other fields and illustrate the general need for tools for analysis, manipulation and statisticalanalysis of large data sets. This course will discuss some of the associated unprecedented computational challenges, focusing on these very large data sets arising in computational biology.     High-level languages for mathematical modeling and statistical analysis offer a double-edged sword: use these languages correctly and you'll be able to prototype methods for data analysis and discovery that amaze your co-workers and can be translated into stand-alone code and Web services; but use these language incorrectly and you will end up with inefficient code that is impossible for others to understand. The course is intended to address some of the needed general principles by using the R statistical programming language to analyze large genomic data sets. In the first few lectures I'll describe what these large biology data sets are, where they come from, and what we'll try to learn from them. We will then learn basic statistics fundamentals and how to program R in ways that are efficient in usage of compute-time, memory, and programmer time. We will focus on four main data-sets in this class that come from current genomics and systems-biology studies.     Pre-requisites: Experience in programming. Prior knowledge of biology and statistics is not required. Non-CS majors with programming experience are encouraged to take the class.           Books and Materials     The course will be taught primarily from Web materials and the primary literature.        Web Materials     The main reading assignments will be these and other Web documents:     http://www.r-project.org/ (click on Manuals on the left side-bar)     Translations of many of these documents into several languages are also provided on the R website.        Books (optional)     John Verzani, Using R for Introductory Statistics. Chapman &amp; Hall/CRC. New York, 2005. ISBN 1-58488-4509. A introduction to the language that is woven together with an introduction to statistics.     JohnM. Chambers. Programming with Data. Springer, New York, 1998. ISBN 0-387-98503-4. A general introduction to the S language (which is very similar to R). A great book, but out of date.     Paul Murrell. R Graphics. A book on the core graphics facilities of the R language and environment for statistical computing and graphics (Chapman &amp; Hall/CRC, August 2005).     More R- and S-books on the R Website ( http://www.r-project.org/ )        Code, Packages and libraries used:     We will use only open source code in the course. Each student will need access to a computer with R and all required packages installed as there will be at least one exercise a week, and several graded coding exercises. Most packages are available at: http://cran.cnr.Berkeley.edu/ All packages used will have windows and MacOS binaries available. Packages made as part of assignments will need to compile on Windows, Mac, and linux platforms.        Evaluation     There will be three graded exercises (20 points each) and one final project (40 points). You will also be expected to help build the course Wiki which will be used to design the next iteration of the course (10 points). Optional challenges will be given most weeks and will include visualization, speed and memory challenges depending on the exercise (i.e. best graphic wins, lowest memory footprint wins, fastest run time on oldest computer wins, etc.). Extra-credit points will beawarded to people who win challenges.        Syllabus     Each week will have one hour-long lecture discussing the main points for the week and one hour devoted to working on using those principles via the exercises for the week. Remember that R is a high-level language, and example code will be provided, so many of the items on the syllabus seem more difficult than they, in fact, are. The full tentative syllabus will be provided on the course Wiki.                                        &copy; 2011 Richard Bonneau"}, {"content": "Bonneau Lab / Teaching                                                Structure Prediction       Protein Design       Biclustering + cMonkey       Network Inference       Social Networks       Publications &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Links + Collaborations       People &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Opportunities &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       Software + Code       Teaching &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp                          &nbsp     Teaching                  Teaching Links      Courses Wiki / Page      Team Teaching      Outreach      Guest Lectures      Tutorials      Courses:      Bioinformatics and Genomes      Computing with Large Data Sets                        I aim to provide practical CS training for biologists and hands on experiences with biology data and biology questions for CS majors. Biology is one of the more interdisciplinary fields and therefore presents curriculum challenges that we are a long way from solving. I hope to continue being a part of the ever-necessary renewal of our CS and biology curriculum. My main teaching activities are concentrated in two new courses that I have designed and teach, a consistent effort to mentor 1-2 high school students at any given time, team-teaching and guest lectures, and the mentorship of PhD and masters students.        My first new solo course at NYU was G23.1127 (x-listed as G22.2520-001) Bioinformatics and Genomes. This class aimed to do three things:           Provide students with a principled and consistent theoretical treatment of the sequence analysis (e.g. alignment, RNA structure prediction and building phylogenetic trees),      Provide practical experience relevant to their research interests via projects, and      Foster, via the projects, the close partnership of Biology and CS graduate students.         This course was designed from scratch, as I did not find any previous model or syllabus that met these three needs. The course ratings and student feedback are quite positive and several of the CS-biology bonds formed within the class were kept up beyond the class, resulting in lasting intellectual partnerships between our graduate students. This year this class has ~30 registered graduate and undergraduate students and ~10 people auditing the class (a very high level of interest for an advanced topic graduate course).     My second new solo course stemmed from what I perceived to be a hole in the undergraduate CS curriculum, practical experience programming with large data-sets and basic statistics. This class teaches students to program using higher-level numerical and statistics languages (like R, octave, numPy) and relational databases while trying to teach them statistics. Evaluation is based on projects and homework. We use genomics data-sets as examples throughout the course, but I encourage students to find problems they are more interested in and have had students projects focus on classification of music, integrating statistics into journalism, and social networking.     I have found that the incoming students (typically CS seniors and juniors) lack even the most rudimentary experience with statistics (my class or something like it is needed). Student feedback has been positive and course rating have been good/high, but I feel this area (programing with data) is something that we need to continue to develop at the undergraduate level at NYU, with major modifications to my course and better integration with courses that develop related topics (a data-science track).     After teaching these two classes I still struggle with balancing test and homework-based evaluation and project driven evaluation. Homework and test based evaluation has the advantage of locally reinforcing the material, helping to pace the students, and identifying students that need more attention. Project driven evaluation and inquiry based curricula, in my experience, leads to better long term learning of skills, large improvements in student communication skills, and better mirrors what we are training these students to do. My undergraduate course is an even mix of these two methods for evaluation, my graduate course is all project driven (since I feel that graduate students should never be made to take quizzes or tests). Although I have taught both of these classes multiple times they are still works in progress, and I hope to continue tuning them in the years to come.     Both of my classes are described in much greater detail on each courses' Wiki / Webpage: http://cook-2.bio.nyu.edu/courses/index.php/Main_Page        G23.1127 / G22.2520-001 Bioinformatics and Genomes     (Spring 2007, 2008, 2009, 2011 - Richard Bonneau, sole instructor)     Graduate Course: Cross listed with CS and Biology. We were successful in forming balanced groups of CS and Bio students and two of the class projects resulted in results that contributed to publications. One nice example was a student in Claude Desplan's lab teaming up with two CS students to make a very nice tool that they then used to explore promoters controlling the circuit surrounding a key step in fly eye development.     The course was well received and I am teaching a slightly revised version of it this semester (SP11). Two years ago 20 students took the class (17 for credit) ~1/2 CS and 1/2 Bio, and is now enrollment is at 30+ students for credit and ~10 auditing. This year I am adapting the curriculum to include three new sections of next-generation sequencing analysis (by popular demand).     Course Outline     Course Wiki        V22.0480-003 Special Topics: Computing with Large Data Sets     (Spring 2009, Fall 2011 - Richard Bonneau, sole instructor)     Undergraduate course, Cross listed with CS and Biology. Enormous collections of data in multiple fields of science and engineering are being gathered that fundamentally challenge the way we analyst large datasets, and thereby our current offerings for undergraduates majoring in CS at NYU. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions. Other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data (for example the planned sequencing on 10,000 human beings). \u00a0This course discusses some of the associated unprecedented computational challenges, focusing on very large data sets arising in computational biology.     High-level languages for mathematical modeling and statistical analysis offer a double-edged sword: use these languages correctly and you\u2019ll be able to prototype methods for data analysis and discovery that amaze your co-workers and can be translated into stand-alone code and Web services; but use these language incorrectly and you will end up with inefficient code that is impossible for others to understand. The course is intended to address some of the needed general principles by using the R statistical programming language to analyze large genomic data sets, which provide examples of data types and statistical analysis common to several problems. In the first few lectures I describe what these large biology data sets are, where they come from, and what we\u2019ll try to learn from them. \u00a0We then learn basic statistics fundamentals and how to program R in ways that are efficient in usage of processor, memory, and programmer time.     Course Outline     Course Wiki      Team Teaching     Team Taught:     BIO CORE II: GENES, SYSTEMS & EVOLUTION (G23.1002.001.SP07)     BIO CORE IV: GENES, SYSTEMS & EVOLUTION (G23.2004.001.SP07)     My module in BioCore covered Genomics technologies, such as microarray manufacture, error/quality control, proteomics, sequencing.        Outreach and Undergraduate Research     I have been devoted to teaching high school students since graduate school. During my PhD I convinced my program to allow me to teach at an area high school (NOVA alternative high school, Seattle) instead of being a teaching assistant. As a Sr. Scientist at the ISB in Seattle I participated in high school out reach as part of the ISB Center for Inquiry Science.     My main outreach activity has been mentoring High-school students over the summer. We have had one High School student in the lab each year, in his second year in the lab Kevin returned for a second year and was able to help Devorah in her first summer in the lab. Three of these interns, including the two high school students, made significant contributions and are included on one or more papers. Both of these students were great and went on to MIT and Princeton respectively.          Devorah Kengmana (Stuyvesant High School, 2 years in lab, Now at MIT)      Kevin Belasco (Scarsdale High School, CT, Now at Princeton)      Alex Pine (CS undergraduate, NYU, 2 years in lab, Now at Bloomberg)      Elena Helman (Biology, Undergraduate, Brown)      Kiran Mayi (Bioenginering, Brooklyn Polytechnic)      Michelle Zhang (Stuyvesant high, 1 year in lab, will start on second year this summer, current lab expert in using Rosetta\u2019s python bindings)            Guest Lectures     I have given guest lectures in the following courses:          (1 Lecture) Microbiology G23.1027      (1 Lecture) Genomics and Bioinformatics V23.0038      (1 Lecture) Principles in Structural Biology (Sackler, Medical School)          Tutorials     Tutorials (NYU-medical school PhD students): These are one-on-one tutorials, given by professors with experience in the area of interest. These tutorials serve the purpose of an alternate proposal. Keren Klein (reviewing papers on protein design), Ben Bartelle (reviewing synthetic biology).                                       &copy; 2011 Richard Bonneau"}, {"content": "Fall 2013 Elective Courses - NYU Computer Science Department                                                                     Search                                                  go                         Location          Contacts      Directions      NYC Information            Admissions          Undergraduate Admissions      Graduate Admissions           People           Faculty        Researchers/Visitors      Administration/Staff      Students: PhD / MS      Alumni / In Memoriam             Research           Research Areas      Tech Reports      Theses: PhD / MS        Faculty Recognition      Student Recognition           Education           Undergraduate Program      Graduate Program : PhD / MS        Courses      Office Hours           News / Events           Colloquia        Calendar: Grad / Undergrad           Job Openings           Faculty Positions             Links           Libraries      Student Organizations      CIMS Computing                                                                                                                                                                 Fall 2013 Elective Courses         Course Descriptions   Fall 2013 Course List         CSCI-UA.0436-001 5897 Computer Architecture     Prerequisites: Computer Systems Organization (CSCI-UA.0201) and Discrete Mathematics (MATH-UA.0120). Offered in the fall. 4 points.  A first course in the structure and design of computer systems. Basic logic modules and arithmetic circuits. Control unit design of computers and structure of a simple processor; speed-up techniques. Storage technologies and structure of memory hierarchies; error detection and correction. Input/output structures, busses, programmed data transfer, interrupts, DMA, and microprocessors. Discussion of various computer architectures; stack, pipeline, and parallel machines; and multiple functional units.      CSCI-UA.0453-001 5898 Theory Of Computation     Prerequisite: Basic Algorithms (CSCI-UA 310). Offered in the fall. 4 points.  Takes a mathematical approach to studying topics in computer science, such as regular languages and some of their representations (deterministic finite automata, nondeterministic finite automata, regular expressions) and proof of nonregularity. Context-free languages and pushdown automata; proofs that languages are not context-free. Elements of computability theory. Brief introduction to NP-completeness.      CSCI-UA.0470-001 5899 Object Oriented Programming     Prerequisite: Computer Systems Organization (CSCI-UA 201). Offered in the fall. 4 points.  Object-oriented programming has emerged as a significant software development methodology. This course introduces the important concepts of object-oriented design and languages, including code reuse, data abstraction, inheritance, and dynamic overloading. Covers in depth those features of Java and C++ that support object-oriented programming and gives an overview of other object-oriented languages of interest. Significant programming assignments stressing object-oriented design.       CSCI-UA. 480-001 5900 Special Topics In Computer Science: Computing with Large Data Sets     Prerequisite: CSCI-UA.0201  Enormous collections of data in multiple fields of science and engineering are being gathered and need to be analyzed. For example, the Sloan Digital Sky Survey will represent more than 200 million objects, each with 100 dimensions, and other activities in physics, biology, astronomy, and medicine will soon gather ever-larger sets of data. Biology, and more specifically the field of systems biology, have seen massive improvements in the technologies we use to sequence genomes and measure the levels of gene expression (or activity) in cells under different conditions. These large biology data sets have have features in common with large data sets arising in other fields and illustrate the general need for tools for analysis, manipulation and statistical analysis of large data sets. This course will discuss some of the associated unprecedented computational challenges, focusing on these very large data sets arising in computational biology. The course is intended to addre ss some of the needed general principles by using a high-level language, the R statistical programming language, to analyze large genomic data sets. We will focus on four main data-sets in this class that come from current genomics and systems-biology studies; the needed biology and statistics will be taught throughout the course.     CSCI-UA. 480-002 13986 Special Topics In Comp Science: Introduction to Machine Learning     Prerequisite: CSCI-UA.0310  This course will cover a wide variety of topics in machine learning, pattern recognition, statistical modeling, and neural computation. Machine Learning and Pattern Recognition methods are at the core of many recent advances in \"intelligent computing\". Current applications include machine perception (vision, audition), control (process control, robotics), data mining, time-series prediction (e.g. in finance), natural language processing, web search and text mining, and text classification, bio-informatics, modeling of biological processes, and many other areas.                top | contact webmaster@cs.nyu.edu"}]}]